
STM32_MCP2515.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080037fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080037fc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000071b8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000164c  00000000  00000000  00027237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00028888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000511  00000000  00000000  00028f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f61  00000000  00000000  00029471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087cf  00000000  00000000  000433d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096ad6  00000000  00000000  0004bba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a44  00000000  00000000  000e2678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e40bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037a0 	.word	0x080037a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037a0 	.word	0x080037a0

080001c8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 奝ｵ・ ・一ｸｰ嶹・ */
int CANSPI_Initialize(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values ・一ｸｰ嶹・*/
  RXM0reg.RXM0SIDH = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80001d6:	2300      	movs	r3, #0
 80001d8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80001de:	2300      	movs	r3, #0
 80001e0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80001e2:	2300      	movs	r3, #0
 80001e4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values ・一ｸｰ嶹・*/
  RXF0reg.RXF0SIDH = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80001f2:	2300      	movs	r3, #0
 80001f4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80001fe:	2300      	movs	r3, #0
 8000200:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000202:	2308      	movs	r3, #8
 8000204:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000206:	2300      	movs	r3, #0
 8000208:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800020e:	2300      	movs	r3, #0
 8000210:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000212:	2300      	movs	r3, #0
 8000214:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000216:	2300      	movs	r3, #0
 8000218:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800021e:	2300      	movs	r3, #0
 8000220:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000226:	2300      	movs	r3, #0
 8000228:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800023e:	2300      	movs	r3, #0
 8000240:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000242:	2308      	movs	r3, #8
 8000244:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 ・一ｸｰ嶹・ SPI 奝ｵ・ ・・・ 嶹菩攤 */
  if(!MCP2515_Initialize())
 800024e:	f000 fa13 	bl	8000678 <MCP2515_Initialize>
 8000252:	4603      	mov	r3, r0
 8000254:	f083 0301 	eor.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <CANSPI_Initialize+0x9c>
    return -1;
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	e060      	b.n	8000326 <CANSPI_Initialize+0x15e>

  /* Configuration ・ｨ・罹｡・・､・・*/
  if(!MCP2515_SetConfigMode())
 8000264:	f000 fa2a 	bl	80006bc <MCP2515_SetConfigMode>
 8000268:	4603      	mov	r3, r0
 800026a:	f083 0301 	eor.w	r3, r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <CANSPI_Initialize+0xb2>
    return -2;
 8000274:	f06f 0301 	mvn.w	r3, #1
 8000278:	e055      	b.n	8000326 <CANSPI_Initialize+0x15e>

  /* Filter & Mask ・・・､・・*/
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	461a      	mov	r2, r3
 800027e:	2123      	movs	r1, #35	; 0x23
 8000280:	2020      	movs	r0, #32
 8000282:	f000 fac2 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000286:	463b      	mov	r3, r7
 8000288:	461a      	mov	r2, r3
 800028a:	2127      	movs	r1, #39	; 0x27
 800028c:	2024      	movs	r0, #36	; 0x24
 800028e:	f000 fabc 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000292:	f107 031c 	add.w	r3, r7, #28
 8000296:	461a      	mov	r2, r3
 8000298:	2103      	movs	r1, #3
 800029a:	2000      	movs	r0, #0
 800029c:	f000 fab5 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	461a      	mov	r2, r3
 80002a6:	2107      	movs	r1, #7
 80002a8:	2004      	movs	r0, #4
 80002aa:	f000 faae 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	461a      	mov	r2, r3
 80002b4:	210b      	movs	r1, #11
 80002b6:	2008      	movs	r0, #8
 80002b8:	f000 faa7 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	461a      	mov	r2, r3
 80002c2:	2113      	movs	r1, #19
 80002c4:	2010      	movs	r0, #16
 80002c6:	f000 faa0 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	461a      	mov	r2, r3
 80002d0:	2117      	movs	r1, #23
 80002d2:	2014      	movs	r0, #20
 80002d4:	f000 fa99 	bl	800080a <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	461a      	mov	r2, r3
 80002de:	211b      	movs	r1, #27
 80002e0:	2018      	movs	r0, #24
 80002e2:	f000 fa92 	bl	800080a <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80002e6:	2104      	movs	r1, #4
 80002e8:	2060      	movs	r0, #96	; 0x60
 80002ea:	f000 fa69 	bl	80007c0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80002ee:	2101      	movs	r1, #1
 80002f0:	2070      	movs	r0, #112	; 0x70
 80002f2:	f000 fa65 	bl	80007c0 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80002f6:	2100      	movs	r1, #0
 80002f8:	202a      	movs	r0, #42	; 0x2a
 80002fa:	f000 fa61 	bl	80007c0 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80002fe:	21e5      	movs	r1, #229	; 0xe5
 8000300:	2029      	movs	r0, #41	; 0x29
 8000302:	f000 fa5d 	bl	80007c0 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000306:	2183      	movs	r1, #131	; 0x83
 8000308:	2028      	movs	r0, #40	; 0x28
 800030a:	f000 fa59 	bl	80007c0 <MCP2515_WriteByte>

  /* Normal ・ｨ・罹｡・・､・・*/
  if(!MCP2515_SetNormalMode())
 800030e:	f000 f9f3 	bl	80006f8 <MCP2515_SetNormalMode>
 8000312:	4603      	mov	r3, r0
 8000314:	f083 0301 	eor.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	2b00      	cmp	r3, #0
 800031c:	d002      	beq.n	8000324 <CANSPI_Initialize+0x15c>
    return -3;
 800031e:	f06f 0302 	mvn.w	r3, #2
 8000322:	e000      	b.n	8000326 <CANSPI_Initialize+0x15e>

  return 1;
 8000324:	2301      	movs	r3, #1
}
 8000326:	4618      	mov	r0, r3
 8000328:	3720      	adds	r7, #32
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <CANSPI_Transmit>:

/* CAN ・肥亨・ ・・・ */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 800033c:	4b36      	ldr	r3, [pc, #216]	; (8000418 <CANSPI_Transmit+0xe8>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000342:	4b35      	ldr	r3, [pc, #212]	; (8000418 <CANSPI_Transmit+0xe8>)
 8000344:	2200      	movs	r2, #0
 8000346:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000348:	4b33      	ldr	r3, [pc, #204]	; (8000418 <CANSPI_Transmit+0xe8>)
 800034a:	2200      	movs	r2, #0
 800034c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800034e:	4b32      	ldr	r3, [pc, #200]	; (8000418 <CANSPI_Transmit+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000354:	f000 facb 	bl	80008ee <MCP2515_ReadStatus>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4b2f      	ldr	r3, [pc, #188]	; (800041c <CANSPI_Transmit+0xec>)
 800035e:	701a      	strb	r2, [r3, #0]

  /* 嶸・椪 Transmission ・ｴ Pending ・們ｧ ・喜捩 ・・詐・ｼ ・ｾ・・・ ・・・﨑罹共. */
  if (ctrlStatus.TXB0REQ != 1)
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <CANSPI_Transmit+0xec>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d115      	bne.n	800039a <CANSPI_Transmit+0x6a>
  {
    /* ID Type・・・樓ｲ・・嶹・*/
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6858      	ldr	r0, [r3, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4a28      	ldr	r2, [pc, #160]	; (8000418 <CANSPI_Transmit+0xe8>)
 8000378:	4619      	mov	r1, r3
 800037a:	f000 f928 	bl	80005ce <convertCANid2Reg>

    /* Tx Buffer・・・・・﨑 ・ｰ・ｴ奓ｰ Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	7a1a      	ldrb	r2, [r3, #8]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3309      	adds	r3, #9
 8000386:	4924      	ldr	r1, [pc, #144]	; (8000418 <CANSPI_Transmit+0xe8>)
 8000388:	2040      	movs	r0, #64	; 0x40
 800038a:	f000 fa69 	bl	8000860 <MCP2515_LoadTxSequence>

    /* Tx Buffer・・・ｰ・ｴ奓ｰ ・・・・肥ｲｭ */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800038e:	2081      	movs	r0, #129	; 0x81
 8000390:	f000 fa92 	bl	80008b8 <MCP2515_RequestToSend>

    returnValue = 1;
 8000394:	2301      	movs	r3, #1
 8000396:	73fb      	strb	r3, [r7, #15]
 8000398:	e038      	b.n	800040c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <CANSPI_Transmit+0xec>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d115      	bne.n	80003d4 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6858      	ldr	r0, [r3, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <CANSPI_Transmit+0xe8>)
 80003b2:	4619      	mov	r1, r3
 80003b4:	f000 f90b 	bl	80005ce <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7a1a      	ldrb	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3309      	adds	r3, #9
 80003c0:	4915      	ldr	r1, [pc, #84]	; (8000418 <CANSPI_Transmit+0xe8>)
 80003c2:	2042      	movs	r0, #66	; 0x42
 80003c4:	f000 fa4c 	bl	8000860 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80003c8:	2082      	movs	r0, #130	; 0x82
 80003ca:	f000 fa75 	bl	80008b8 <MCP2515_RequestToSend>

    returnValue = 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	e01b      	b.n	800040c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <CANSPI_Transmit+0xec>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d114      	bne.n	800040c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6858      	ldr	r0, [r3, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <CANSPI_Transmit+0xe8>)
 80003ec:	4619      	mov	r1, r3
 80003ee:	f000 f8ee 	bl	80005ce <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7a1a      	ldrb	r2, [r3, #8]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3309      	adds	r3, #9
 80003fa:	4907      	ldr	r1, [pc, #28]	; (8000418 <CANSPI_Transmit+0xe8>)
 80003fc:	2044      	movs	r0, #68	; 0x44
 80003fe:	f000 fa2f 	bl	8000860 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000402:	2084      	movs	r0, #132	; 0x84
 8000404:	f000 fa58 	bl	80008b8 <MCP2515_RequestToSend>

    returnValue = 1;
 8000408:	2301      	movs	r3, #1
 800040a:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000002c 	.word	0x2000002c
 800041c:	20000028 	.word	0x20000028

08000420 <CANSPI_Receive>:

/* CAN ・肥亨・ ・們侠 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800042c:	f000 fa7c 	bl	8000928 <MCP2515_GetRxStatus>
 8000430:	4603      	mov	r3, r0
 8000432:	733b      	strb	r3, [r7, #12]

  /* ・・詐・・・們侠・・・肥亨・・ ・壱株・ 嶹菩攤 */
  if (rxStatus.rxBuffer != 0)
 8000434:	7b3b      	ldrb	r3, [r7, #12]
 8000436:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	d066      	beq.n	800050e <CANSPI_Receive+0xee>
  {
    /* ・ｴ・､ ・・詐・・・肥亨・・ ・壱株・ 嶹菩攤 弡・・俯ｦｬ */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000440:	7b3b      	ldrb	r3, [r7, #12]
 8000442:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b40      	cmp	r3, #64	; 0x40
 800044a:	bf0c      	ite	eq
 800044c:	2301      	moveq	r3, #1
 800044e:	2300      	movne	r3, #0
 8000450:	b2da      	uxtb	r2, r3
 8000452:	7b3b      	ldrb	r3, [r7, #12]
 8000454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2bc0      	cmp	r3, #192	; 0xc0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d007      	beq.n	800047c <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	220d      	movs	r2, #13
 8000472:	4619      	mov	r1, r3
 8000474:	2090      	movs	r0, #144	; 0x90
 8000476:	f000 f980 	bl	800077a <MCP2515_ReadRxSequence>
 800047a:	e00c      	b.n	8000496 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800047c:	7b3b      	ldrb	r3, [r7, #12]
 800047e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b80      	cmp	r3, #128	; 0x80
 8000486:	d106      	bne.n	8000496 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	220d      	movs	r2, #13
 800048e:	4619      	mov	r1, r3
 8000490:	2094      	movs	r0, #148	; 0x94
 8000492:	f000 f972 	bl	800077a <MCP2515_ReadRxSequence>
    }

    /* Extended 夋・・*/
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000496:	7b3b      	ldrb	r3, [r7, #12]
 8000498:	f003 0318 	and.w	r3, r3, #24
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b10      	cmp	r3, #16
 80004a0:	d10c      	bne.n	80004bc <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004a8:	7cb8      	ldrb	r0, [r7, #18]
 80004aa:	7cf9      	ldrb	r1, [r7, #19]
 80004ac:	7c3a      	ldrb	r2, [r7, #16]
 80004ae:	7c7b      	ldrb	r3, [r7, #17]
 80004b0:	f000 f832 	bl	8000518 <convertReg2ExtendedCANid>
 80004b4:	4602      	mov	r2, r0
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	e00b      	b.n	80004d4 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 夋・・*/
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2201      	movs	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004c2:	7c3b      	ldrb	r3, [r7, #16]
 80004c4:	7c7a      	ldrb	r2, [r7, #17]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 f863 	bl	8000594 <convertReg2StandardCANid>
 80004ce:	4602      	mov	r2, r0
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80004d4:	7d3a      	ldrb	r2, [r7, #20]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80004da:	7d7a      	ldrb	r2, [r7, #21]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80004e0:	7dba      	ldrb	r2, [r7, #22]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80004e6:	7dfa      	ldrb	r2, [r7, #23]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80004ec:	7e3a      	ldrb	r2, [r7, #24]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80004f2:	7e7a      	ldrb	r2, [r7, #25]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80004f8:	7eba      	ldrb	r2, [r7, #26]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80004fe:	7efa      	ldrb	r2, [r7, #27]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000504:	7f3a      	ldrb	r2, [r7, #28]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800050e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register ・・･・廷揆 Extended ID 夋・・愍・・・嶹倆葺・ｰ ・・復 﨑ｨ・・*/
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4608      	mov	r0, r1
 8000522:	4611      	mov	r1, r2
 8000524:	461a      	mov	r2, r3
 8000526:	4623      	mov	r3, r4
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	4603      	mov	r3, r0
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	460b      	mov	r3, r1
 8000530:	717b      	strb	r3, [r7, #5]
 8000532:	4613      	mov	r3, r2
 8000534:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800053e:	793b      	ldrb	r3, [r7, #4]
 8000540:	f003 0303 	and.w	r3, r3, #3
 8000544:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000546:	793b      	ldrb	r3, [r7, #4]
 8000548:	095b      	lsrs	r3, r3, #5
 800054a:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4413      	add	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4413      	add	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4413      	add	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	4413      	add	r3, r2
 8000582:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000588:	697b      	ldr	r3, [r7, #20]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bc90      	pop	{r4, r7}
 8000592:	4770      	bx	lr

08000594 <convertReg2StandardCANid>:

/* Register ・・･・廷揆 Standard ID 夋・・愍・・・嶹倆葺・ｰ ・・復 﨑ｨ・・*/
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	095b      	lsrs	r3, r3, #5
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4413      	add	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80005c0:	68fb      	ldr	r3, [r7, #12]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <convertCANid2Reg>:

/* CAN ID・ｼ Register・・・・･﨑俾ｸｰ ・・復 ・嶹・﨑ｨ・・*/
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b087      	sub	sp, #28
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	460b      	mov	r3, r1
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d12e      	bne.n	8000644 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0303 	and.w	r3, r3, #3
 800060a:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f023 031f 	bic.w	r3, r3, #31
 800061a:	b2da      	uxtb	r2, r3
 800061c:	7dfb      	ldrb	r3, [r7, #23]
 800061e:	4413      	add	r3, r2
 8000620:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	3308      	adds	r3, #8
 8000626:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	f023 0314 	bic.w	r3, r3, #20
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000642:	e013      	b.n	800066c <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	015b      	lsls	r3, r3, #5
 8000654:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	701a      	strb	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	371c      	adds	r7, #28
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 ・一ｸｰ嶹・*/
bool MCP2515_Initialize(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fede 	bl	8001448 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 800068c:	230a      	movs	r3, #10
 800068e:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 嶹菩攤 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MCP2515_Initialize+0x40>)
 8000692:	f002 fe8e 	bl	80033b2 <HAL_SPI_GetState>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <MCP2515_Initialize+0x28>
      return true;
 800069c:	2301      	movs	r3, #1
 800069e:	e006      	b.n	80006ae <MCP2515_Initialize+0x36>

    loop--;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f1      	bne.n	8000690 <MCP2515_Initialize+0x18>

  return false;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000030 	.word	0x20000030

080006bc <MCP2515_SetConfigMode>:

/* MCP2515 ・ｼ ・､・簿ｪｨ・罹｡・・・劍 */
bool MCP2515_SetConfigMode(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration ・ｨ・・・､・・*/
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	200f      	movs	r0, #15
 80006c6:	f000 f87b 	bl	80007c0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	71fb      	strb	r3, [r7, #7]

  do {
    /* ・ｨ・懍・劍 嶹菩攤 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80006ce:	200e      	movs	r0, #14
 80006d0:	f000 f830 	bl	8000734 <MCP2515_ReadByte>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80006da:	2b80      	cmp	r3, #128	; 0x80
 80006dc:	d101      	bne.n	80006e2 <MCP2515_SetConfigMode+0x26>
      return true;
 80006de:	2301      	movs	r3, #1
 80006e0:	e006      	b.n	80006f0 <MCP2515_SetConfigMode+0x34>

    loop--;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1ef      	bne.n	80006ce <MCP2515_SetConfigMode+0x12>

  return false;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MCP2515_SetNormalMode>:

/* MCP2515 ・ｼ Normal・ｨ・罹｡・・・劍 */
bool MCP2515_SetNormalMode(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal ・ｨ・・・､・・*/
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80006fe:	2100      	movs	r1, #0
 8000700:	200f      	movs	r0, #15
 8000702:	f000 f85d 	bl	80007c0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	71fb      	strb	r3, [r7, #7]

  do {
    /* ・ｨ・懍・劍 嶹菩攤 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800070a:	200e      	movs	r0, #14
 800070c:	f000 f812 	bl	8000734 <MCP2515_ReadByte>
 8000710:	4603      	mov	r3, r0
 8000712:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <MCP2515_SetNormalMode+0x26>
      return true;
 800071a:	2301      	movs	r3, #1
 800071c:	e006      	b.n	800072c <MCP2515_SetNormalMode+0x34>

    loop--;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3b01      	subs	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1ef      	bne.n	800070a <MCP2515_SetNormalMode+0x12>

  return false;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1・肥擽孖ｸ ・ｽ・ｰ */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 fe7e 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f909 	bl	8000964 <SPI_Tx>
  SPI_Tx(address);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f905 	bl	8000964 <SPI_Tx>
  retVal = SPI_Rx();
 800075a:	f000 f929 	bl	80009b0 <SPI_Rx>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f000 fe6c 	bl	8001448 <HAL_GPIO_WritePin>

  return retVal;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <MCP2515_ReadRxSequence>:

/* Sequential Bytes ・ｽ・ｰ */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	6039      	str	r1, [r7, #0]
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fe58 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f8e2 	bl	8000964 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	4619      	mov	r1, r3
 80007a4:	6838      	ldr	r0, [r7, #0]
 80007a6:	f000 f913 	bl	80009d0 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 fe48 	bl	8001448 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MCP2515_WriteByte>:

/* 1・肥擽孖ｸ ・ｰ・ｰ */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f000 fe35 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 f8c0 	bl	8000964 <SPI_Tx>
  SPI_Tx(address);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f8bc 	bl	8000964 <SPI_Tx>
  SPI_Tx(data);
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f8b8 	bl	8000964 <SPI_Tx>

  MCP2515_CS_HIGH();
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 fe23 	bl	8001448 <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <MCP2515_WriteByteSequence>:

/* Sequential Bytes ・ｰ・ｰ */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	603a      	str	r2, [r7, #0]
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	460b      	mov	r3, r1
 8000818:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 fe10 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000828:	2002      	movs	r0, #2
 800082a:	f000 f89b 	bl	8000964 <SPI_Tx>
  SPI_Tx(startAddress);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f897 	bl	8000964 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000836:	79ba      	ldrb	r2, [r7, #6]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f000 f89f 	bl	8000988 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 fdf8 	bl	8001448 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MCP2515_LoadTxSequence>:

/* TxBuffer・・Sequential Bytes ・ｰ・ｰ */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4603      	mov	r3, r0
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	4613      	mov	r3, r2
 8000870:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fde4 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f86e 	bl	8000964 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000888:	2104      	movs	r1, #4
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f000 f87c 	bl	8000988 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f866 	bl	8000964 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f873 	bl	8000988 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fdcc 	bl	8001448 <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS ・・ｹ・・奝ｵ﨑ｴ・・TxBuffer ・・・ */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 fdbc 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f846 	bl	8000964 <SPI_Tx>

  MCP2515_CS_HIGH();
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 fdb1 	bl	8001448 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <MCP2515_ReadStatus>:

/* MCP2515 Status 嶹菩攤 */
uint8_t MCP2515_ReadStatus(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 fda3 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000902:	20a0      	movs	r0, #160	; 0xa0
 8000904:	f000 f82e 	bl	8000964 <SPI_Tx>
  retVal = SPI_Rx();
 8000908:	f000 f852 	bl	80009b0 <SPI_Rx>
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fd95 	bl	8001448 <HAL_GPIO_WritePin>

  return retVal;
 800091e:	79fb      	ldrb	r3, [r7, #7]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus ・溢ｧ・､奓ｰ 嶹菩攤 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fd86 	bl	8001448 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 800093c:	20b0      	movs	r0, #176	; 0xb0
 800093e:	f000 f811 	bl	8000964 <SPI_Tx>
  retVal = SPI_Rx();
 8000942:	f000 f835 	bl	80009b0 <SPI_Rx>
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fd78 	bl	8001448 <HAL_GPIO_WritePin>

  return retVal;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 﨑ｨ・・*/
static void SPI_Tx(uint8_t data)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800096e:	1df9      	adds	r1, r7, #7
 8000970:	230a      	movs	r3, #10
 8000972:	2201      	movs	r2, #1
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <SPI_Tx+0x20>)
 8000976:	f002 f84e 	bl	8002a16 <HAL_SPI_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000030 	.word	0x20000030

08000988 <SPI_TxBuffer>:

/* SPI Tx Wrapper 﨑ｨ・・*/
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	b29a      	uxth	r2, r3
 8000998:	230a      	movs	r3, #10
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <SPI_TxBuffer+0x24>)
 800099e:	f002 f83a 	bl	8002a16 <HAL_SPI_Transmit>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000030 	.word	0x20000030

080009b0 <SPI_Rx>:

/* SPI Rx Wrapper 﨑ｨ・・*/
static uint8_t SPI_Rx(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80009b6:	1df9      	adds	r1, r7, #7
 80009b8:	230a      	movs	r3, #10
 80009ba:	2201      	movs	r2, #1
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <SPI_Rx+0x1c>)
 80009be:	f002 f99f 	bl	8002d00 <HAL_SPI_Receive>
  return retVal;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000030 	.word	0x20000030

080009d0 <SPI_RxBuffer>:

/* SPI Rx Wrapper 﨑ｨ・・*/
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	230a      	movs	r3, #10
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <SPI_RxBuffer+0x24>)
 80009e6:	f002 f98b 	bl	8002d00 <HAL_SPI_Receive>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000030 	.word	0x20000030

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fe:	f000 fa41 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f879 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 f8f7 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a0a:	f000 f8b7 	bl	8000b7c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fd16 	bl	8001448 <HAL_GPIO_WritePin>

  int ret;
  ret = CANSPI_Initialize();
 8000a1c:	f7ff fbd4 	bl	80001c8 <CANSPI_Initialize>
 8000a20:	6078      	str	r0, [r7, #4]
  if(ret<0){
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da1d      	bge.n	8000a64 <main+0x6c>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fd09 	bl	8001448 <HAL_GPIO_WritePin>
	  while(1){	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fd02 	bl	8001448 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f000 fa82 	bl	8000f50 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f000 fcf7 	bl	8001448 <HAL_GPIO_WritePin>
	  HAL_Delay(500);}
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 fa77 	bl	8000f50 <HAL_Delay>
	  while(1){	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a62:	e7e8      	b.n	8000a36 <main+0x3e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(CANSPI_Receive(&rxMessage)){
 8000a64:	4822      	ldr	r0, [pc, #136]	; (8000af0 <main+0xf8>)
 8000a66:	f7ff fcdb 	bl	8000420 <CANSPI_Receive>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d016      	beq.n	8000a9e <main+0xa6>
		if(rxMessage.frame.id == 0x36){
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <main+0xf8>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b36      	cmp	r3, #54	; 0x36
 8000a76:	d112      	bne.n	8000a9e <main+0xa6>
			if(rxMessage.frame.data0 == 1){
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <main+0xf8>)
 8000a7a:	7a5b      	ldrb	r3, [r3, #9]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <main+0x98>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f000 fcdd 	bl	8001448 <HAL_GPIO_WritePin>
 8000a8e:	e006      	b.n	8000a9e <main+0xa6>
			}else{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f000 fcd5 	bl	8001448 <HAL_GPIO_WritePin>
			}
		}
	}

		HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f000 fa56 	bl	8000f50 <HAL_Delay>
		txMessage.frame.idType = rxMessage.frame.idType;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <main+0xf8>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <main+0xfc>)
 8000aaa:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = 0x0A;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <main+0xfc>)
 8000aae:	220a      	movs	r2, #10
 8000ab0:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <main+0xfc>)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 0;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <main+0xfc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 1;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <main+0xfc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 2;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <main+0xfc>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 3;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <main+0xfc>)
 8000acc:	2203      	movs	r2, #3
 8000ace:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 4;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <main+0xfc>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 5;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <main+0xfc>)
 8000ad8:	2205      	movs	r2, #5
 8000ada:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 6;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <main+0xfc>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 7;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <main+0xfc>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <main+0xfc>)
 8000aea:	f7ff fc21 	bl	8000330 <CANSPI_Transmit>
	if(CANSPI_Receive(&rxMessage)){
 8000aee:	e7b9      	b.n	8000a64 <main+0x6c>
 8000af0:	200000a8 	.word	0x200000a8
 8000af4:	20000094 	.word	0x20000094

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fe1e 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	2310      	movs	r3, #16
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b2e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fc9d 	bl	8001478 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b44:	f000 f8ca 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fcc6 	bl	80024f4 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b6e:	f000 f8b5 	bl	8000cdc <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3740      	adds	r7, #64	; 0x40
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_SPI2_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bdc:	f001 fe70 	bl	80028c0 <HAL_SPI_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000be6:	f000 f879 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000030 	.word	0x20000030
 8000bf4:	40003800 	.word	0x40003800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xdc>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 fbe6 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 fbdf 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_GPIO_Init+0xe0>)
 8000ca8:	f000 fa5c 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_Pin;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fa4c 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000800 	.word	0x48000800

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x44>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x44>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0x7c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d128      	bne.n	8000da4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_SPI_MspInit+0x80>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d94:	2305      	movs	r3, #5
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_SPI_MspInit+0x84>)
 8000da0:	f000 f9e0 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40003800 	.word	0x40003800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000400 	.word	0x48000400

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f884 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fc7b 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fdc9 	bl	80009f8 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e74:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e7c:	200000c0 	.word	0x200000c0

08000e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f931 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff ff22 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f93b 	bl	800114a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f911 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200000bc 	.word	0x200000bc

08000f38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200000bc 	.word	0x200000bc

08000f50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e14e      	b.n	8001412 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8140 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 809a 	beq.w	800140c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1e0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2d4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1dc>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x2d8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1d8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a44      	ldr	r2, [pc, #272]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1d4>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001338:	2305      	movs	r3, #5
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1e2>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001388:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_GPIO_Init+0x2e0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f aea9 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800147e:	af00      	add	r7, sp, #0
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001488:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f001 b823 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 817d 	beq.w	80017ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b4:	4bbc      	ldr	r3, [pc, #752]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00c      	beq.n	80014da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c0:	4bb9      	ldr	r3, [pc, #740]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d15c      	bne.n	8001586 <HAL_RCC_OscConfig+0x10e>
 80014cc:	4bb6      	ldr	r3, [pc, #728]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d155      	bne.n	8001586 <HAL_RCC_OscConfig+0x10e>
 80014da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	095b      	lsrs	r3, r3, #5
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <HAL_RCC_OscConfig+0x94>
 8001506:	4ba8      	ldr	r3, [pc, #672]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	e015      	b.n	8001538 <HAL_RCC_OscConfig+0xc0>
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001528:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001534:	4b9c      	ldr	r3, [pc, #624]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001540:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001544:	fa92 f2a2 	rbit	r2, r2
 8001548:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800154c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f002 021f 	and.w	r2, r2, #31
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 811f 	beq.w	80017ac <HAL_RCC_OscConfig+0x334>
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 8116 	bne.w	80017ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	f000 bfaf 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12e>
 8001598:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a82      	ldr	r2, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e036      	b.n	8001614 <HAL_RCC_OscConfig+0x19c>
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x158>
 80015b6:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7b      	ldr	r2, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a78      	ldr	r2, [pc, #480]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e021      	b.n	8001614 <HAL_RCC_OscConfig+0x19c>
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x184>
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6d      	ldr	r2, [pc, #436]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x19c>
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a66      	ldr	r2, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	f023 020f 	bic.w	r2, r3, #15
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	495f      	ldr	r1, [pc, #380]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800162a:	4313      	orrs	r3, r2
 800162c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d059      	beq.n	80016f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fc7b 	bl	8000f38 <HAL_GetTick>
 8001642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fc76 	bl	8000f38 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d902      	bls.n	800165e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	f000 bf43 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001672:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	095b      	lsrs	r3, r3, #5
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0x218>
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e015      	b.n	80016bc <HAL_RCC_OscConfig+0x244>
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016c8:	fa92 f2a2 	rbit	r2, r2
 80016cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016d4:	fab2 f282 	clz	r2, r2
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f002 021f 	and.w	r2, r2, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ab      	beq.n	8001648 <HAL_RCC_OscConfig+0x1d0>
 80016f0:	e05d      	b.n	80017ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fc21 	bl	8000f38 <HAL_GetTick>
 80016f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fc1c 	bl	8000f38 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d902      	bls.n	8001712 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	f000 bee9 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001726:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0x2cc>
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e015      	b.n	8001770 <HAL_RCC_OscConfig+0x2f8>
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001748:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001760:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001774:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001778:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800177c:	fa92 f2a2 	rbit	r2, r2
 8001780:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001784:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001788:	fab2 f282 	clz	r2, r2
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f002 021f 	and.w	r2, r2, #31
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f202 	lsl.w	r2, r1, r2
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ab      	bne.n	80016fc <HAL_RCC_OscConfig+0x284>
 80017a4:	e003      	b.n	80017ae <HAL_RCC_OscConfig+0x336>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 817d 	beq.w	8001abe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017c4:	4ba6      	ldr	r3, [pc, #664]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017d0:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d172      	bne.n	80018c2 <HAL_RCC_OscConfig+0x44a>
 80017dc:	4ba0      	ldr	r3, [pc, #640]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d16c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x44a>
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0x3a0>
 8001812:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x3c8>
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001830:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2202      	movs	r2, #2
 8001842:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001846:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001852:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 021f 	and.w	r2, r2, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00a      	beq.n	8001888 <HAL_RCC_OscConfig+0x410>
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	f000 be2e 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	21f8      	movs	r1, #248	; 0xf8
 800189e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018a6:	fa91 f1a1 	rbit	r1, r1
 80018aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018b2:	fab1 f181 	clz	r1, r1
 80018b6:	b2c9      	uxtb	r1, r1
 80018b8:	408b      	lsls	r3, r1
 80018ba:	4969      	ldr	r1, [pc, #420]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c0:	e0fd      	b.n	8001abe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8088 	beq.w	80019e4 <HAL_RCC_OscConfig+0x56c>
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	461a      	mov	r2, r3
 80018fc:	2301      	movs	r3, #1
 80018fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb1a 	bl	8000f38 <HAL_GetTick>
 8001904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fb15 	bl	8000f38 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d902      	bls.n	8001920 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	f000 bde2 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001932:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	095b      	lsrs	r3, r3, #5
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x4d8>
 800194a:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	e013      	b.n	8001978 <HAL_RCC_OscConfig+0x500>
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001968:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2202      	movs	r2, #2
 800197a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800197e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001982:	fa92 f2a2 	rbit	r2, r2
 8001986:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800198a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800198e:	fab2 f282 	clz	r2, r2
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f042 0220 	orr.w	r2, r2, #32
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f002 021f 	and.w	r2, r2, #31
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0af      	beq.n	800190a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	21f8      	movs	r1, #248	; 0xf8
 80019c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019c8:	fa91 f1a1 	rbit	r1, r1
 80019cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019d4:	fab1 f181 	clz	r1, r1
 80019d8:	b2c9      	uxtb	r1, r1
 80019da:	408b      	lsls	r3, r1
 80019dc:	4920      	ldr	r1, [pc, #128]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
 80019e2:	e06c      	b.n	8001abe <HAL_RCC_OscConfig+0x646>
 80019e4:	2301      	movs	r3, #1
 80019e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fa92 	bl	8000f38 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fa8d 	bl	8000f38 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d902      	bls.n	8001a30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f000 bd5a 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001a30:	2302      	movs	r3, #2
 8001a32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d104      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5ec>
 8001a5a:	4b01      	ldr	r3, [pc, #4]	; (8001a60 <HAL_RCC_OscConfig+0x5e8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	e015      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a88:	4bc8      	ldr	r3, [pc, #800]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a96:	fa92 f2a2 	rbit	r2, r2
 8001a9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001aa2:	fab2 f282 	clz	r2, r2
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f042 0220 	orr.w	r2, r2, #32
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f002 021f 	and.w	r2, r2, #31
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ad      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8110 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d079      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x760>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4bab      	ldr	r3, [pc, #684]	; (8001db0 <HAL_RCC_OscConfig+0x938>)
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fa13 	bl	8000f38 <HAL_GetTick>
 8001b12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa0e 	bl	8000f38 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d902      	bls.n	8001b2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f000 bcdb 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b88:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b94:	2102      	movs	r1, #2
 8001b96:	6019      	str	r1, [r3, #0]
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f1a3 	rbit	r1, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bae:	6019      	str	r1, [r3, #0]
  return result;
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0a0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x6a0>
 8001bd6:	e08d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x87c>
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x938>)
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	461a      	mov	r2, r3
 8001c16:	2300      	movs	r3, #0
 8001c18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f98d 	bl	8000f38 <HAL_GetTick>
 8001c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff f988 	bl	8000f38 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d902      	bls.n	8001c3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f000 bc55 	b.w	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ca4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	6019      	str	r1, [r3, #0]
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f1a3 	rbit	r1, r3
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ccc:	6019      	str	r1, [r3, #0]
  return result;
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d197      	bne.n	8001c24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 81a1 	beq.w	800204c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d116      	bne.n	8001d4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_RCC_OscConfig+0x93c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d11a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x93c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_RCC_OscConfig+0x93c>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff f8e9 	bl	8000f38 <HAL_GetTick>
 8001d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	e009      	b.n	8001d80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7ff f8e4 	bl	8000f38 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e3b1      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_RCC_OscConfig+0x93c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_OscConfig+0x940>
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a02      	ldr	r2, [pc, #8]	; (8001dac <HAL_RCC_OscConfig+0x934>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e03c      	b.n	8001e24 <HAL_RCC_OscConfig+0x9ac>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	10908120 	.word	0x10908120
 8001db4:	40007000 	.word	0x40007000
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x96a>
 8001dc8:	4bc1      	ldr	r3, [pc, #772]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4ac0      	ldr	r2, [pc, #768]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	4bbe      	ldr	r3, [pc, #760]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4abd      	ldr	r2, [pc, #756]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e020      	b.n	8001e24 <HAL_RCC_OscConfig+0x9ac>
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x994>
 8001df2:	4bb7      	ldr	r3, [pc, #732]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4ab6      	ldr	r2, [pc, #728]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4bb4      	ldr	r3, [pc, #720]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4ab3      	ldr	r2, [pc, #716]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x9ac>
 8001e0c:	4bb0      	ldr	r3, [pc, #704]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4aaf      	ldr	r2, [pc, #700]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	4bad      	ldr	r3, [pc, #692]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4aac      	ldr	r2, [pc, #688]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8081 	beq.w	8001f38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f87f 	bl	8000f38 <HAL_GetTick>
 8001e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff f87a 	bl	8000f38 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e345      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e84:	2202      	movs	r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ea8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xa4c>
 8001ebe:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	e013      	b.n	8001eec <HAL_RCC_OscConfig+0xa74>
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ecc:	2202      	movs	r2, #2
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b79      	ldr	r3, [pc, #484]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	6011      	str	r1, [r2, #0]
 8001ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001efc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	fa92 f1a2 	rbit	r1, r2
 8001f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f0e:	6011      	str	r1, [r2, #0]
  return result;
 8001f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d084      	beq.n	8001e40 <HAL_RCC_OscConfig+0x9c8>
 8001f36:	e07f      	b.n	8002038 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe fffe 	bl	8000f38 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fff9 	bl	8000f38 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e2c4      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f2a3 	rbit	r2, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fa0:	601a      	str	r2, [r3, #0]
  return result;
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001faa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_OscConfig+0xb4e>
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	e013      	b.n	8001fee <HAL_RCC_OscConfig+0xb76>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fce:	2202      	movs	r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	6011      	str	r1, [r2, #0]
 8001ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ffe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fa92 f1a2 	rbit	r1, r2
 8002008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800200c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002010:	6011      	str	r1, [r2, #0]
  return result;
 8002012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002016:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f002 021f 	and.w	r2, r2, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d184      	bne.n	8001f42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002038:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8242 	beq.w	80024e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_RCC_OscConfig+0xc58>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	f000 8213 	beq.w	8002492 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	f040 8162 	bne.w	8002342 <HAL_RCC_OscConfig+0xeca>
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002086:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800208a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020a2:	601a      	str	r2, [r3, #0]
  return result;
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	461a      	mov	r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe ff38 	bl	8000f38 <HAL_GetTick>
 80020c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_OscConfig+0xc70>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe ff30 	bl	8000f38 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1fd      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800210c:	601a      	str	r2, [r3, #0]
  return result;
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002116:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d102      	bne.n	8002132 <HAL_RCC_OscConfig+0xcba>
 800212c:	4bb0      	ldr	r3, [pc, #704]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e027      	b.n	8002182 <HAL_RCC_OscConfig+0xd0a>
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800213a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800213e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	4b9c      	ldr	r3, [pc, #624]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002186:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800218a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800218e:	6011      	str	r1, [r2, #0]
 8002190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002194:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	fa92 f1a2 	rbit	r1, r2
 800219e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021a6:	6011      	str	r1, [r2, #0]
  return result;
 80021a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f042 0220 	orr.w	r2, r2, #32
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d182      	bne.n	80020d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	497f      	ldr	r1, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800221a:	601a      	str	r2, [r3, #0]
  return result;
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002224:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	461a      	mov	r2, r3
 8002238:	2301      	movs	r3, #1
 800223a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fe7c 	bl	8000f38 <HAL_GetTick>
 8002240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	e009      	b.n	800225a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe fe77 	bl	8000f38 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e144      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800227e:	601a      	str	r2, [r3, #0]
  return result;
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002288:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe2c>
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_OscConfig+0xe7c>
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002306:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fa92 f1a2 	rbit	r1, r2
 8002310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002314:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002318:	6011      	str	r1, [r2, #0]
  return result;
 800231a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d082      	beq.n	8002246 <HAL_RCC_OscConfig+0xdce>
 8002340:	e0cf      	b.n	80024e2 <HAL_RCC_OscConfig+0x106a>
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800234a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002366:	601a      	str	r2, [r3, #0]
  return result;
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002370:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800237c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	461a      	mov	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe fdd6 	bl	8000f38 <HAL_GetTick>
 800238c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fdd1 	bl	8000f38 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e09e      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d104      	bne.n	80023f4 <HAL_RCC_OscConfig+0xf7c>
 80023ea:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <HAL_RCC_OscConfig+0xf78>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	e029      	b.n	8002444 <HAL_RCC_OscConfig+0xfcc>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x1078>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002448:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800244c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002456:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	fa92 f1a2 	rbit	r1, r2
 8002460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002464:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002468:	6011      	str	r1, [r2, #0]
  return result;
 800246a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800246e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d180      	bne.n	8002392 <HAL_RCC_OscConfig+0xf1a>
 8002490:	e027      	b.n	80024e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01e      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_OscConfig+0x1078>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b09e      	sub	sp, #120	; 0x78
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e162      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b90      	ldr	r3, [pc, #576]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d910      	bls.n	800253c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	498b      	ldr	r1, [pc, #556]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b89      	ldr	r3, [pc, #548]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e14a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	497f      	ldr	r1, [pc, #508]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80dc 	beq.w	8002720 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d13c      	bne.n	80025ea <HAL_RCC_ClockConfig+0xf6>
 8002570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002574:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d102      	bne.n	800259a <HAL_RCC_ClockConfig+0xa6>
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	e00f      	b.n	80025ba <HAL_RCC_ClockConfig+0xc6>
 800259a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	667b      	str	r3, [r7, #100]	; 0x64
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	663b      	str	r3, [r7, #96]	; 0x60
 80025ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025be:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c2:	fa92 f2a2 	rbit	r2, r2
 80025c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d17b      	bne.n	80026de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0f3      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d13c      	bne.n	800266c <HAL_RCC_ClockConfig+0x178>
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_ClockConfig+0x128>
 8002616:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e00f      	b.n	800263c <HAL_RCC_ClockConfig+0x148>
 800261c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	647b      	str	r3, [r7, #68]	; 0x44
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002640:	63ba      	str	r2, [r7, #56]	; 0x38
 8002642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002644:	fa92 f2a2 	rbit	r2, r2
 8002648:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800264a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d13a      	bne.n	80026de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b2      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
 800266c:	2302      	movs	r3, #2
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_RCC_ClockConfig+0x1a0>
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	e00d      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1bc>
 8002694:	2302      	movs	r3, #2
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	2302      	movs	r3, #2
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2202      	movs	r2, #2
 80026b2:	61ba      	str	r2, [r7, #24]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	fa92 f2a2 	rbit	r2, r2
 80026ba:	617a      	str	r2, [r7, #20]
  return result;
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e079      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	491a      	ldr	r1, [pc, #104]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fc22 	bl	8000f38 <HAL_GetTick>
 80026f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fc1e 	bl	8000f38 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e061      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_ClockConfig+0x260>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d214      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4906      	ldr	r1, [pc, #24]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e040      	b.n	80027d2 <HAL_RCC_ClockConfig+0x2de>
 8002750:	40022000 	.word	0x40022000
 8002754:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_ClockConfig+0x2e8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	491a      	ldr	r1, [pc, #104]	; (80027dc <HAL_RCC_ClockConfig+0x2e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x2e8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4912      	ldr	r1, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x2e8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002796:	f000 f829 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 800279a:	4601      	mov	r1, r0
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_RCC_ClockConfig+0x2e8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a4:	22f0      	movs	r2, #240	; 0xf0
 80027a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	60fa      	str	r2, [r7, #12]
  return result;
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	40d3      	lsrs	r3, r2
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x2ec>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	fa21 f303 	lsr.w	r3, r1, r3
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_RCC_ClockConfig+0x2f0>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x2f4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fb70 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3778      	adds	r7, #120	; 0x78
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	080037b8 	.word	0x080037b8
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b08b      	sub	sp, #44	; 0x2c
 80027f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e03c      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	e03c      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002828:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800282c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	607a      	str	r2, [r7, #4]
  return result;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	40d3      	lsrs	r3, r2
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	220f      	movs	r2, #15
 8002850:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	fa92 f2a2 	rbit	r2, r2
 8002858:	60fa      	str	r2, [r7, #12]
  return result;
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	40d3      	lsrs	r3, r2
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	fbb2 f2f3 	udiv	r2, r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	e004      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	623b      	str	r3, [r7, #32]
      break;
 8002894:	e002      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002898:	623b      	str	r3, [r7, #32]
      break;
 800289a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289c:	6a3b      	ldr	r3, [r7, #32]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	372c      	adds	r7, #44	; 0x2c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	007a1200 	.word	0x007a1200
 80028b4:	080037c8 	.word	0x080037c8
 80028b8:	080037d8 	.word	0x080037d8
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e09d      	b.n	8002a0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e2:	d009      	beq.n	80028f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
 80028ea:	e005      	b.n	80028f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fa0c 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002938:	d902      	bls.n	8002940 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e002      	b.n	8002946 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002944:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800294e:	d007      	beq.n	8002960 <HAL_SPI_Init+0xa0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	ea42 0103 	orr.w	r1, r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	0c1b      	lsrs	r3, r3, #16
 80029bc:	f003 0204 	and.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029dc:	ea42 0103 	orr.w	r1, r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b088      	sub	sp, #32
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_SPI_Transmit+0x22>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e15f      	b.n	8002cf8 <HAL_SPI_Transmit+0x2e2>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a40:	f7fe fa7a 	bl	8000f38 <HAL_GetTick>
 8002a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a56:	2302      	movs	r3, #2
 8002a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a5a:	e148      	b.n	8002cee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_Transmit+0x52>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a6c:	e13f      	b.n	8002cee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d10f      	bne.n	8002ada <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d007      	beq.n	8002af8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b00:	d94f      	bls.n	8002ba2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0xfa>
 8002b0a:	8afb      	ldrh	r3, [r7, #22]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d142      	bne.n	8002b96 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b34:	e02f      	b.n	8002b96 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d112      	bne.n	8002b6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b68:	e015      	b.n	8002b96 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b6a:	f7fe f9e5 	bl	8000f38 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d803      	bhi.n	8002b82 <HAL_SPI_Transmit+0x16c>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d102      	bne.n	8002b88 <HAL_SPI_Transmit+0x172>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002b94:	e0ab      	b.n	8002cee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ca      	bne.n	8002b36 <HAL_SPI_Transmit+0x120>
 8002ba0:	e080      	b.n	8002ca4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x19a>
 8002baa:	8afb      	ldrh	r3, [r7, #22]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d174      	bne.n	8002c9a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d912      	bls.n	8002be0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b02      	subs	r3, #2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bde:	e05c      	b.n	8002c9a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c06:	e048      	b.n	8002c9a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d12b      	bne.n	8002c6e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d912      	bls.n	8002c46 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	1c9a      	adds	r2, r3, #2
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b02      	subs	r3, #2
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c44:	e029      	b.n	8002c9a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c6c:	e015      	b.n	8002c9a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c6e:	f7fe f963 	bl	8000f38 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d803      	bhi.n	8002c86 <HAL_SPI_Transmit+0x270>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_Transmit+0x276>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d106      	bne.n	8002c9a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002c98:	e029      	b.n	8002cee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1b1      	bne.n	8002c08 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	6839      	ldr	r1, [r7, #0]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fd07 	bl	80036bc <SPI_EndRxTxTransaction>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e003      	b.n	8002cee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
 8002d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d24:	e11a      	b.n	8002f5c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d112      	bne.n	8002d56 <HAL_SPI_Receive+0x56>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f90e 	bl	8002f6e <HAL_SPI_TransmitReceive>
 8002d52:	4603      	mov	r3, r0
 8002d54:	e107      	b.n	8002f66 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_SPI_Receive+0x64>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e100      	b.n	8002f66 <HAL_SPI_Receive+0x266>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d6c:	f7fe f8e4 	bl	8000f38 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Receive+0x7e>
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d82:	e0eb      	b.n	8002f5c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2204      	movs	r2, #4
 8002d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dce:	d908      	bls.n	8002de2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	e007      	b.n	8002df2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002df0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfa:	d10f      	bne.n	8002e1c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d007      	beq.n	8002e3a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e42:	d86f      	bhi.n	8002f24 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e44:	e034      	b.n	8002eb0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d117      	bne.n	8002e84 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f103 020c 	add.w	r2, r3, #12
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e82:	e015      	b.n	8002eb0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e84:	f7fe f858 	bl	8000f38 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d803      	bhi.n	8002e9c <HAL_SPI_Receive+0x19c>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d102      	bne.n	8002ea2 <HAL_SPI_Receive+0x1a2>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002eae:	e055      	b.n	8002f5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1c4      	bne.n	8002e46 <HAL_SPI_Receive+0x146>
 8002ebc:	e038      	b.n	8002f30 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d115      	bne.n	8002ef8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ef6:	e015      	b.n	8002f24 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef8:	f7fe f81e 	bl	8000f38 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d803      	bhi.n	8002f10 <HAL_SPI_Receive+0x210>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d102      	bne.n	8002f16 <HAL_SPI_Receive+0x216>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f22:	e01b      	b.n	8002f5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1c6      	bne.n	8002ebe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fb69 	bl	800360c <SPI_EndRxTransaction>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
 8002f52:	e003      	b.n	8002f5c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b08a      	sub	sp, #40	; 0x28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x26>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e20a      	b.n	80033aa <HAL_SPI_TransmitReceive+0x43c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9c:	f7fd ffcc 	bl	8000f38 <HAL_GetTick>
 8002fa0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fa8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fb8:	7efb      	ldrb	r3, [r7, #27]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d00e      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x6e>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc4:	d106      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x66>
 8002fce:	7efb      	ldrb	r3, [r7, #27]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fda:	e1e0      	b.n	800339e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_SPI_TransmitReceive+0x80>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_TransmitReceive+0x80>
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ff4:	e1d3      	b.n	800339e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d003      	beq.n	800300a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2205      	movs	r2, #5
 8003006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	887a      	ldrh	r2, [r7, #2]
 800301a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	887a      	ldrh	r2, [r7, #2]
 8003036:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800304c:	d802      	bhi.n	8003054 <HAL_SPI_TransmitReceive+0xe6>
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d908      	bls.n	8003066 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e007      	b.n	8003076 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003074:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d007      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309c:	f240 8081 	bls.w	80031a2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x140>
 80030a8:	8a7b      	ldrh	r3, [r7, #18]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d16d      	bne.n	800318a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d2:	e05a      	b.n	800318a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d11b      	bne.n	800311a <HAL_SPI_TransmitReceive+0x1ac>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_SPI_TransmitReceive+0x1ac>
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d113      	bne.n	800311a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	1c9a      	adds	r2, r3, #2
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11c      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x1f4>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	b292      	uxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800315e:	2301      	movs	r3, #1
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003162:	f7fd fee9 	bl	8000f38 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316e:	429a      	cmp	r2, r3
 8003170:	d80b      	bhi.n	800318a <HAL_SPI_TransmitReceive+0x21c>
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d007      	beq.n	800318a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003188:	e109      	b.n	800339e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d19f      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x166>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d199      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x166>
 80031a0:	e0e3      	b.n	800336a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x244>
 80031aa:	8a7b      	ldrh	r3, [r7, #18]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 80cf 	bne.w	8003350 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d912      	bls.n	80031e2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b02      	subs	r3, #2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031e0:	e0b6      	b.n	8003350 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003208:	e0a2      	b.n	8003350 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d134      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x314>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02f      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x314>
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	d12c      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d912      	bls.n	8003258 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c9a      	adds	r2, r3, #2
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b02      	subs	r3, #2
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003256:	e012      	b.n	800327e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d148      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x3b4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d042      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d923      	bls.n	80032f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	b292      	uxth	r2, r2
 80032b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b02      	subs	r3, #2
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d81f      	bhi.n	800331e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e016      	b.n	800331e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f103 020c 	add.w	r2, r3, #12
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800331e:	2301      	movs	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003322:	f7fd fe09 	bl	8000f38 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	429a      	cmp	r2, r3
 8003330:	d803      	bhi.n	800333a <HAL_SPI_TransmitReceive+0x3cc>
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x3d2>
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800334e:	e026      	b.n	800339e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f47f af57 	bne.w	800320a <HAL_SPI_TransmitReceive+0x29c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af50 	bne.w	800320a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f9a4 	bl	80036bc <SPI_EndRxTxTransaction>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003394:	e003      	b.n	800339e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033c0:	b2db      	uxtb	r3, r3
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033e0:	f7fd fdaa 	bl	8000f38 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033f0:	f7fd fda2 	bl	8000f38 <HAL_GetTick>
 80033f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	015b      	lsls	r3, r3, #5
 80033fc:	0d1b      	lsrs	r3, r3, #20
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003406:	e054      	b.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d050      	beq.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003410:	f7fd fd92 	bl	8000f38 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	429a      	cmp	r2, r3
 800341e:	d902      	bls.n	8003426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d13d      	bne.n	80034a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343e:	d111      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003448:	d004      	beq.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d107      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346c:	d10f      	bne.n	800348e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800348c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e017      	b.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d19b      	bne.n	8003408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034f2:	f7fd fd21 	bl	8000f38 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003502:	f7fd fd19 	bl	8000f38 <HAL_GetTick>
 8003506:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003510:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00da      	lsls	r2, r3, #3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	0d1b      	lsrs	r3, r3, #20
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003528:	e060      	b.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003530:	d107      	bne.n	8003542 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003540:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d050      	beq.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800354a:	f7fd fcf5 	bl	8000f38 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	429a      	cmp	r2, r3
 8003558:	d902      	bls.n	8003560 <SPI_WaitFifoStateUntilTimeout+0x80>
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d13d      	bne.n	80035dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800356e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003578:	d111      	bne.n	800359e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003582:	d004      	beq.n	800358e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358c:	d107      	bne.n	800359e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	d10f      	bne.n	80035c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e010      	b.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d196      	bne.n	800352a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003620:	d111      	bne.n	8003646 <SPI_EndRxTransaction+0x3a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362a:	d004      	beq.n	8003636 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003634:	d107      	bne.n	8003646 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff febd 	bl	80033d0 <SPI_WaitFlagStateUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e023      	b.n	80036b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003674:	d11d      	bne.n	80036b2 <SPI_EndRxTransaction+0xa6>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367e:	d004      	beq.n	800368a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003688:	d113      	bne.n	80036b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff22 	bl	80034e0 <SPI_WaitFifoStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e000      	b.n	80036b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff03 	bl	80034e0 <SPI_WaitFifoStateUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e027      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fe68 	bl	80033d0 <SPI_WaitFlagStateUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e014      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fedc 	bl	80034e0 <SPI_WaitFifoStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e000      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x44>)
 800376c:	f000 f818 	bl	80037a0 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	080037e8 	.word	0x080037e8
 8003794:	080037e8 	.word	0x080037e8
 8003798:	080037e8 	.word	0x080037e8
 800379c:	080037ec 	.word	0x080037ec

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr


STM32_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080072f8  080072f8  000172f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080076c4  080076c4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076c4  080076c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080076cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001e4  080078b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080078b0  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2ae  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f53  00000000  00000000  0002a4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e7  00000000  00000000  0002d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186d6  00000000  00000000  0002d8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d592  00000000  00000000  00045fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008757a  00000000  00000000  00053567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000411c  00000000  00000000  000daae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000dec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080072e0 	.word	0x080072e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080072e0 	.word	0x080072e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
int CANSPI_Initialize(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000e7e:	2300      	movs	r3, #0
 8000e80:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000e82:	2300      	movs	r3, #0
 8000e84:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000e92:	2308      	movs	r3, #8
 8000e94:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000ede:	f000 fa0d 	bl	80012fc <MCP2515_Initialize>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <CANSPI_Initialize+0x9a>
  {
    return false;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e05e      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000ef2:	f000 fa25 	bl	8001340 <MCP2515_SetConfigMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f083 0301 	eor.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <CANSPI_Initialize+0xae>
  {
    return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e054      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2123      	movs	r1, #35	; 0x23
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 fabb 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000f12:	463b      	mov	r3, r7
 8000f14:	461a      	mov	r2, r3
 8000f16:	2127      	movs	r1, #39	; 0x27
 8000f18:	2024      	movs	r0, #36	; 0x24
 8000f1a:	f000 fab5 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	461a      	mov	r2, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 faae 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	461a      	mov	r2, r3
 8000f32:	2107      	movs	r1, #7
 8000f34:	2004      	movs	r0, #4
 8000f36:	f000 faa7 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	461a      	mov	r2, r3
 8000f40:	210b      	movs	r1, #11
 8000f42:	2008      	movs	r0, #8
 8000f44:	f000 faa0 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2113      	movs	r1, #19
 8000f50:	2010      	movs	r0, #16
 8000f52:	f000 fa99 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2117      	movs	r1, #23
 8000f5e:	2014      	movs	r0, #20
 8000f60:	f000 fa92 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	461a      	mov	r2, r3
 8000f6a:	211b      	movs	r1, #27
 8000f6c:	2018      	movs	r0, #24
 8000f6e:	f000 fa8b 	bl	8001488 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000f72:	2104      	movs	r1, #4
 8000f74:	2060      	movs	r0, #96	; 0x60
 8000f76:	f000 fa63 	bl	8001440 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2070      	movs	r0, #112	; 0x70
 8000f7e:	f000 fa5f 	bl	8001440 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000f82:	2100      	movs	r1, #0
 8000f84:	202a      	movs	r0, #42	; 0x2a
 8000f86:	f000 fa5b 	bl	8001440 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000f8a:	21e5      	movs	r1, #229	; 0xe5
 8000f8c:	2029      	movs	r0, #41	; 0x29
 8000f8e:	f000 fa57 	bl	8001440 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000f92:	2183      	movs	r1, #131	; 0x83
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f000 fa53 	bl	8001440 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000f9a:	f000 f9ef 	bl	800137c <MCP2515_SetNormalMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <CANSPI_Initialize+0x156>
    return false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  
  return true;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000fdc:	f000 fac2 	bl	8001564 <MCP2515_ReadStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <CANSPI_Transmit+0xec>)
 8000fe6:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <CANSPI_Transmit+0xec>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d115      	bne.n	8001022 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6858      	ldr	r0, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001000:	4619      	mov	r1, r3
 8001002:	f000 f927 	bl	8001254 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7a1a      	ldrb	r2, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3309      	adds	r3, #9
 800100e:	4924      	ldr	r1, [pc, #144]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001010:	2040      	movs	r0, #64	; 0x40
 8001012:	f000 fa63 	bl	80014dc <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8001016:	2081      	movs	r0, #129	; 0x81
 8001018:	f000 fa8a 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e038      	b.n	8001094 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <CANSPI_Transmit+0xec>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d115      	bne.n	800105c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6858      	ldr	r0, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <CANSPI_Transmit+0xe8>)
 800103a:	4619      	mov	r1, r3
 800103c:	f000 f90a 	bl	8001254 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a1a      	ldrb	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3309      	adds	r3, #9
 8001048:	4915      	ldr	r1, [pc, #84]	; (80010a0 <CANSPI_Transmit+0xe8>)
 800104a:	2042      	movs	r0, #66	; 0x42
 800104c:	f000 fa46 	bl	80014dc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001050:	2082      	movs	r0, #130	; 0x82
 8001052:	f000 fa6d 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e01b      	b.n	8001094 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <CANSPI_Transmit+0xec>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001074:	4619      	mov	r1, r3
 8001076:	f000 f8ed 	bl	8001254 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1a      	ldrb	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3309      	adds	r3, #9
 8001082:	4907      	ldr	r1, [pc, #28]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001084:	2044      	movs	r0, #68	; 0x44
 8001086:	f000 fa29 	bl	80014dc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800108a:	2084      	movs	r0, #132	; 0x84
 800108c:	f000 fa50 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000204 	.word	0x20000204
 80010a4:	20000200 	.word	0x20000200

080010a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80010b4:	f000 fa72 	bl	800159c <MCP2515_GetRxStatus>
 80010b8:	4603      	mov	r3, r0
 80010ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d066      	beq.n	8001196 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b40      	cmp	r3, #64	; 0x40
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2bc0      	cmp	r3, #192	; 0xc0
 80010e4:	bf0c      	ite	eq
 80010e6:	2301      	moveq	r3, #1
 80010e8:	2300      	movne	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	220d      	movs	r2, #13
 80010fa:	4619      	mov	r1, r3
 80010fc:	2090      	movs	r0, #144	; 0x90
 80010fe:	f000 f97d 	bl	80013fc <MCP2515_ReadRxSequence>
 8001102:	e00c      	b.n	800111e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b80      	cmp	r3, #128	; 0x80
 800110e:	d106      	bne.n	800111e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	220d      	movs	r2, #13
 8001116:	4619      	mov	r1, r3
 8001118:	2094      	movs	r0, #148	; 0x94
 800111a:	f000 f96f 	bl	80013fc <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	f003 0318 	and.w	r3, r3, #24
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b10      	cmp	r3, #16
 8001128:	d10c      	bne.n	8001144 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001130:	7cb8      	ldrb	r0, [r7, #18]
 8001132:	7cf9      	ldrb	r1, [r7, #19]
 8001134:	7c3a      	ldrb	r2, [r7, #16]
 8001136:	7c7b      	ldrb	r3, [r7, #17]
 8001138:	f000 f832 	bl	80011a0 <convertReg2ExtendedCANid>
 800113c:	4602      	mov	r2, r0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	e00b      	b.n	800115c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800114a:	7c3b      	ldrb	r3, [r7, #16]
 800114c:	7c7a      	ldrb	r2, [r7, #17]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f863 	bl	800121c <convertReg2StandardCANid>
 8001156:	4602      	mov	r2, r0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800115c:	7d3a      	ldrb	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001162:	7d7a      	ldrb	r2, [r7, #21]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001168:	7dba      	ldrb	r2, [r7, #22]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800116e:	7dfa      	ldrb	r2, [r7, #23]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001174:	7e3a      	ldrb	r2, [r7, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800117a:	7e7a      	ldrb	r2, [r7, #25]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001180:	7eba      	ldrb	r2, [r7, #26]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001186:	7efa      	ldrb	r2, [r7, #27]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800118c:	7f3a      	ldrb	r2, [r7, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8001196:	7ffb      	ldrb	r3, [r7, #31]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80011a0:	b490      	push	{r4, r7}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	4603      	mov	r3, r0
 80011b4:	71bb      	strb	r3, [r7, #6]
 80011b6:	460b      	mov	r3, r1
 80011b8:	717b      	strb	r3, [r7, #5]
 80011ba:	4613      	mov	r3, r2
 80011bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80011c6:	793b      	ldrb	r3, [r7, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4413      	add	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4413      	add	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4413      	add	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bc90      	pop	{r4, r7}
 800121a:	4770      	bx	lr

0800121c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d12e      	bne.n	80012ca <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f023 031f 	bic.w	r3, r3, #31
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	4413      	add	r3, r2
 80012a6:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	3308      	adds	r3, #8
 80012ac:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	f023 0314 	bic.w	r3, r3, #20
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80012c8:	e013      	b.n	80012f2 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <MCP2515_Initialize>:
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length);
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	MCP2515_CS_HIGH();
 8001302:	2201      	movs	r2, #1
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <MCP2515_Initialize+0x3c>)
 8001308:	f001 fac9 	bl	800289e <HAL_GPIO_WritePin>

	uint8_t loop = 10;
 800130c:	230a      	movs	r3, #10
 800130e:	71fb      	strb	r3, [r7, #7]

	do {
		/* check SPI Ready */
		if (HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <MCP2515_Initialize+0x40>)
 8001312:	f003 f804 	bl	800431e <HAL_SPI_GetState>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <MCP2515_Initialize+0x24>
			return true;
 800131c:	2301      	movs	r3, #1
 800131e:	e006      	b.n	800132e <MCP2515_Initialize+0x32>

		loop--;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3b01      	subs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f1      	bne.n	8001310 <MCP2515_Initialize+0x14>

	return false;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010c00 	.word	0x40010c00
 800133c:	20000264 	.word	0x20000264

08001340 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	/* configure CANCTRL Register */
	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	200f      	movs	r0, #15
 800134a:	f000 f879 	bl	8001440 <MCP2515_WriteByte>

	uint8_t loop = 10;
 800134e:	230a      	movs	r3, #10
 8001350:	71fb      	strb	r3, [r7, #7]

	do {
		/* confirm mode configuration */
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001352:	200e      	movs	r0, #14
 8001354:	f000 f830 	bl	80013b8 <MCP2515_ReadByte>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800135e:	2b80      	cmp	r3, #128	; 0x80
 8001360:	d101      	bne.n	8001366 <MCP2515_SetConfigMode+0x26>
			return true;
 8001362:	2301      	movs	r3, #1
 8001364:	e006      	b.n	8001374 <MCP2515_SetConfigMode+0x34>

		loop--;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b01      	subs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ef      	bne.n	8001352 <MCP2515_SetConfigMode+0x12>

	return false;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	/* configure CANCTRL Register */
	MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001382:	2100      	movs	r1, #0
 8001384:	200f      	movs	r0, #15
 8001386:	f000 f85b 	bl	8001440 <MCP2515_WriteByte>

	uint8_t loop = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	71fb      	strb	r3, [r7, #7]

	do {
		/* confirm mode configuration */
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800138e:	200e      	movs	r0, #14
 8001390:	f000 f812 	bl	80013b8 <MCP2515_ReadByte>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <MCP2515_SetNormalMode+0x26>
			return true;
 800139e:	2301      	movs	r3, #1
 80013a0:	e006      	b.n	80013b0 <MCP2515_SetNormalMode+0x34>

		loop--;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ef      	bne.n	800138e <MCP2515_SetNormalMode+0x12>

	return false;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <MCP2515_ReadByte>:

	MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte(uint8_t address) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal;

	MCP2515_CS_LOW();
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MCP2515_ReadByte+0x40>)
 80013c8:	f001 fa69 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_READ);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f901 	bl	80015d4 <SPI_Tx>
	SPI_Tx(address);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8fd 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 80013da:	f000 f921 	bl	8001620 <SPI_Rx>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]

	MCP2515_CS_HIGH();
 80013e2:	2201      	movs	r2, #1
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MCP2515_ReadByte+0x40>)
 80013e8:	f001 fa59 	bl	800289e <HAL_GPIO_WritePin>

	return retVal;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010c00 	.word	0x40010c00

080013fc <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <MCP2515_ReadRxSequence+0x40>)
 8001412:	f001 fa44 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8db 	bl	80015d4 <SPI_Tx>
	SPI_RxBuffer(data, length);
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4619      	mov	r1, r3
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f000 f90c 	bl	8001640 <SPI_RxBuffer>

	MCP2515_CS_HIGH();
 8001428:	2201      	movs	r2, #1
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <MCP2515_ReadRxSequence+0x40>)
 800142e:	f001 fa36 	bl	800289e <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010c00 	.word	0x40010c00

08001440 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 8001450:	2200      	movs	r2, #0
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <MCP2515_WriteByte+0x44>)
 8001456:	f001 fa22 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_WRITE);
 800145a:	2002      	movs	r0, #2
 800145c:	f000 f8ba 	bl	80015d4 <SPI_Tx>
	SPI_Tx(address);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f8b6 	bl	80015d4 <SPI_Tx>
	SPI_Tx(data);
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f8b2 	bl	80015d4 <SPI_Tx>

	MCP2515_CS_HIGH();
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MCP2515_WriteByte+0x44>)
 8001476:	f001 fa12 	bl	800289e <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010c00 	.word	0x40010c00

08001488 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress,
		uint8_t *data) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	603a      	str	r2, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	460b      	mov	r3, r1
 8001496:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 8001498:	2200      	movs	r2, #0
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MCP2515_WriteByteSequence+0x50>)
 800149e:	f001 f9fe 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_WRITE);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f896 	bl	80015d4 <SPI_Tx>
	SPI_Tx(startAddress);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f892 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f000 f89a 	bl	80015f8 <SPI_TxBuffer>

	MCP2515_CS_HIGH();
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MCP2515_WriteByteSequence+0x50>)
 80014ca:	f001 f9e8 	bl	800289e <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010c00 	.word	0x40010c00

080014dc <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc,
		uint8_t *data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	4613      	mov	r3, r2
 80014ec:	73bb      	strb	r3, [r7, #14]
	MCP2515_CS_LOW();
 80014ee:	2200      	movs	r2, #0
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MCP2515_LoadTxSequence+0x50>)
 80014f4:	f001 f9d3 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f86a 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(idReg, 4);
 8001500:	2104      	movs	r1, #4
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f000 f878 	bl	80015f8 <SPI_TxBuffer>
	SPI_Tx(dlc);
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f862 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(data, dlc);
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f86f 	bl	80015f8 <SPI_TxBuffer>

	MCP2515_CS_HIGH();
 800151a:	2201      	movs	r2, #1
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MCP2515_LoadTxSequence+0x50>)
 8001520:	f001 f9bd 	bl	800289e <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010c00 	.word	0x40010c00

08001530 <MCP2515_RequestToSend>:

	MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	MCP2515_CS_LOW();
 800153a:	2200      	movs	r2, #0
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <MCP2515_RequestToSend+0x30>)
 8001540:	f001 f9ad 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f844 	bl	80015d4 <SPI_Tx>

	MCP2515_CS_HIGH();
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MCP2515_RequestToSend+0x30>)
 8001552:	f001 f9a4 	bl	800289e <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00

08001564 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint8_t retVal;

	MCP2515_CS_LOW();
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <MCP2515_ReadStatus+0x34>)
 8001570:	f001 f995 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_READ_STATUS);
 8001574:	20a0      	movs	r0, #160	; 0xa0
 8001576:	f000 f82d 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 800157a:	f000 f851 	bl	8001620 <SPI_Rx>
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]

	MCP2515_CS_HIGH();
 8001582:	2201      	movs	r2, #1
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <MCP2515_ReadStatus+0x34>)
 8001588:	f001 f989 	bl	800289e <HAL_GPIO_WritePin>

	return retVal;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010c00 	.word	0x40010c00

0800159c <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	uint8_t retVal;

	MCP2515_CS_LOW();
 80015a2:	2200      	movs	r2, #0
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <MCP2515_GetRxStatus+0x34>)
 80015a8:	f001 f979 	bl	800289e <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_RX_STATUS);
 80015ac:	20b0      	movs	r0, #176	; 0xb0
 80015ae:	f000 f811 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 80015b2:	f000 f835 	bl	8001620 <SPI_Rx>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]

	MCP2515_CS_HIGH();
 80015ba:	2201      	movs	r2, #1
 80015bc:	2140      	movs	r1, #64	; 0x40
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MCP2515_GetRxStatus+0x34>)
 80015c0:	f001 f96d 	bl	800289e <HAL_GPIO_WritePin>

	return retVal;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010c00 	.word	0x40010c00

080015d4 <SPI_Tx>:

	MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80015de:	1df9      	adds	r1, r7, #7
 80015e0:	230a      	movs	r3, #10
 80015e2:	2201      	movs	r2, #1
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <SPI_Tx+0x20>)
 80015e6:	f002 fa8f 	bl	8003b08 <HAL_SPI_Transmit>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000264 	.word	0x20000264

080015f8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	b29a      	uxth	r2, r3
 8001608:	230a      	movs	r3, #10
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <SPI_TxBuffer+0x24>)
 800160e:	f002 fa7b 	bl	8003b08 <HAL_SPI_Transmit>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000264 	.word	0x20000264

08001620 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001626:	1df9      	adds	r1, r7, #7
 8001628:	230a      	movs	r3, #10
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <SPI_Rx+0x1c>)
 800162e:	f002 fbae 	bl	8003d8e <HAL_SPI_Receive>
	return retVal;
 8001632:	79fb      	ldrb	r3, [r7, #7]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000264 	.word	0x20000264

08001640 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <SPI_RxBuffer+0x24>)
 8001656:	f002 fb9a 	bl	8003d8e <HAL_SPI_Receive>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000264 	.word	0x20000264

08001668 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HD44780_Init+0xec>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HD44780_Init+0xf0>)
 800167a:	2208      	movs	r2, #8
 800167c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HD44780_Init+0xf4>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HD44780_Init+0xec>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d907      	bls.n	800169c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HD44780_Init+0xf4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HD44780_Init+0xf4>)
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e006      	b.n	80016aa <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HD44780_Init+0xf4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HD44780_Init+0xf4>)
 80016a8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80016aa:	f000 f97f 	bl	80019ac <DelayInit>
  HAL_Delay(50);
 80016ae:	2032      	movs	r0, #50	; 0x32
 80016b0:	f000 fe52 	bl	8002358 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HD44780_Init+0xf0>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f93d 	bl	8001938 <ExpanderWrite>
  HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c2:	f000 fe49 	bl	8002358 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80016c6:	2030      	movs	r0, #48	; 0x30
 80016c8:	f000 f925 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80016d0:	f000 f994 	bl	80019fc <DelayUS>

  Write4Bits(0x03 << 4);
 80016d4:	2030      	movs	r0, #48	; 0x30
 80016d6:	f000 f91e 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016da:	f241 1094 	movw	r0, #4500	; 0x1194
 80016de:	f000 f98d 	bl	80019fc <DelayUS>

  Write4Bits(0x03 << 4);
 80016e2:	2030      	movs	r0, #48	; 0x30
 80016e4:	f000 f917 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80016ec:	f000 f986 	bl	80019fc <DelayUS>

  Write4Bits(0x02 << 4);
 80016f0:	2020      	movs	r0, #32
 80016f2:	f000 f910 	bl	8001916 <Write4Bits>
  DelayUS(100);
 80016f6:	2064      	movs	r0, #100	; 0x64
 80016f8:	f000 f980 	bl	80019fc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HD44780_Init+0xf4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f8c8 	bl	800189c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HD44780_Init+0xf8>)
 800170e:	2204      	movs	r2, #4
 8001710:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001712:	f000 f843 	bl	800179c <HD44780_Display>
  HD44780_Clear();
 8001716:	f000 f82b 	bl	8001770 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HD44780_Init+0xfc>)
 800171c:	2202      	movs	r2, #2
 800171e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HD44780_Init+0xfc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f8b6 	bl	800189c <SendCommand>
  DelayUS(4500);
 8001730:	f241 1094 	movw	r0, #4500	; 0x1194
 8001734:	f000 f962 	bl	80019fc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001738:	490b      	ldr	r1, [pc, #44]	; (8001768 <HD44780_Init+0x100>)
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f870 	bl	8001820 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001740:	490a      	ldr	r1, [pc, #40]	; (800176c <HD44780_Init+0x104>)
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f86c 	bl	8001820 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001748:	f000 f81d 	bl	8001786 <HD44780_Home>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000020b 	.word	0x2000020b
 8001758:	2000020c 	.word	0x2000020c
 800175c:	20000208 	.word	0x20000208
 8001760:	20000209 	.word	0x20000209
 8001764:	2000020a 	.word	0x2000020a
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008

08001770 <HD44780_Clear>:

void HD44780_Clear()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001774:	2001      	movs	r0, #1
 8001776:	f000 f891 	bl	800189c <SendCommand>
  DelayUS(2000);
 800177a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800177e:	f000 f93d 	bl	80019fc <DelayUS>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <HD44780_Home>:

void HD44780_Home()
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800178a:	2002      	movs	r0, #2
 800178c:	f000 f886 	bl	800189c <SendCommand>
  DelayUS(2000);
 8001790:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001794:	f000 f932 	bl	80019fc <DelayUS>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HD44780_Display+0x28>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HD44780_Display+0x28>)
 80017ac:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HD44780_Display+0x28>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f86f 	bl	800189c <SendCommand>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000209 	.word	0x20000209

080017c8 <HD44780_LeftToRight>:
{
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void HD44780_LeftToRight(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  dpMode |= LCD_ENTRYLEFT;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f859 	bl	800189c <SendCommand>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000020a 	.word	0x2000020a

080017f4 <HD44780_RightToLeft>:

void HD44780_RightToLeft(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  dpMode &= ~LCD_ENTRYLEFT;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HD44780_RightToLeft+0x28>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HD44780_RightToLeft+0x28>)
 8001804:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HD44780_RightToLeft+0x28>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f843 	bl	800189c <SendCommand>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000020a 	.word	0x2000020a

08001820 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183e:	b25b      	sxtb	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f82a 	bl	800189c <SendCommand>
  for (int i=0; i<8; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e009      	b.n	8001862 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f82e 	bl	80018b8 <SendChar>
  for (int i=0; i<8; i++)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b07      	cmp	r3, #7
 8001866:	ddf2      	ble.n	800184e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800187a:	e006      	b.n	800188a <HD44780_PrintStr+0x18>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f817 	bl	80018b8 <SendChar>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f4      	bne.n	800187c <HD44780_PrintStr+0xa>
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f812 	bl	80018d4 <Send>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f804 	bl	80018d4 <Send>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f023 030f 	bic.w	r3, r3, #15
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f80b 	bl	8001916 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001900:	7bba      	ldrb	r2, [r7, #14]
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f804 	bl	8001916 <Write4Bits>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f808 	bl	8001938 <ExpanderWrite>
  PulseEnable(value);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f820 	bl	8001970 <PulseEnable>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <ExpanderWrite+0x30>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4313      	orrs	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800194e:	f107 020f 	add.w	r2, r7, #15
 8001952:	230a      	movs	r3, #10
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	214e      	movs	r1, #78	; 0x4e
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <ExpanderWrite+0x34>)
 800195c:	f001 f8fc 	bl	8002b58 <HAL_I2C_Master_Transmit>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000020c 	.word	0x2000020c
 800196c:	20000210 	.word	0x20000210

08001970 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffd8 	bl	8001938 <ExpanderWrite>
  DelayUS(20);
 8001988:	2014      	movs	r0, #20
 800198a:	f000 f837 	bl	80019fc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffce 	bl	8001938 <ExpanderWrite>
  DelayUS(20);
 800199c:	2014      	movs	r0, #20
 800199e:	f000 f82d 	bl	80019fc <DelayUS>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <DelayInit>:

static void DelayInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <DelayInit+0x48>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <DelayInit+0x48>)
 80019b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <DelayInit+0x48>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <DelayInit+0x48>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <DelayInit+0x4c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <DelayInit+0x4c>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <DelayInit+0x4c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <DelayInit+0x4c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <DelayInit+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80019e6:	bf00      	nop
  __ASM volatile ("NOP");
 80019e8:	bf00      	nop
  __ASM volatile ("NOP");
 80019ea:	bf00      	nop
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	e000edf0 	.word	0xe000edf0
 80019f8:	e0001000 	.word	0xe0001000

080019fc <DelayUS>:

static void DelayUS(uint32_t us) {
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <DelayUS+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <DelayUS+0x44>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9a      	lsrs	r2, r3, #18
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <DelayUS+0x48>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <DelayUS+0x48>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f6      	bhi.n	8001a1e <DelayUS+0x22>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	e0001000 	.word	0xe0001000

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b096      	sub	sp, #88	; 0x58
 8001a4e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a50:	f000 fc20 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a54:	f000 f8e0 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a58:	f000 f988 	bl	8001d6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a5c:	f000 f922 	bl	8001ca4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a60:	f000 f94e 	bl	8001d00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	CANSPI_Initialize();
 8001a64:	f7ff f9f8 	bl	8000e58 <CANSPI_Initialize>
	HD44780_Init(2);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7ff fdfd 	bl	8001668 <HD44780_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
			if (CANSPI_Receive(&rxMessage)) {
 8001a6e:	4865      	ldr	r0, [pc, #404]	; (8001c04 <main+0x1bc>)
 8001a70:	f7ff fb1a 	bl	80010a8 <CANSPI_Receive>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d07d      	beq.n	8001b76 <main+0x12e>
				// Process received message
				float receivedTemperature = convertRawToTemperature(
						rxMessage.frame.data0, rxMessage.frame.data1);
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <main+0x1bc>)
 8001a7c:	7a5b      	ldrb	r3, [r3, #9]
				float receivedTemperature = convertRawToTemperature(
 8001a7e:	461a      	mov	r2, r3
						rxMessage.frame.data0, rxMessage.frame.data1);
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <main+0x1bc>)
 8001a82:	7a9b      	ldrb	r3, [r3, #10]
				float receivedTemperature = convertRawToTemperature(
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 fb80 	bl	800218c <convertRawToTemperature>
 8001a8c:	6438      	str	r0, [r7, #64]	; 0x40
				float receivedSpeed = convertRawToSpeed(rxMessage.frame.data2,
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <main+0x1bc>)
 8001a90:	7adb      	ldrb	r3, [r3, #11]
 8001a92:	461a      	mov	r2, r3
						rxMessage.frame.data3);
 8001a94:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <main+0x1bc>)
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
				float receivedSpeed = convertRawToSpeed(rxMessage.frame.data2,
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 fb82 	bl	80021a4 <convertRawToSpeed>
 8001aa0:	63f8      	str	r0, [r7, #60]	; 0x3c
				float receivedFuel = convertRawToFuel(rxMessage.frame.data4,
 8001aa2:	4b58      	ldr	r3, [pc, #352]	; (8001c04 <main+0x1bc>)
 8001aa4:	7b5b      	ldrb	r3, [r3, #13]
 8001aa6:	461a      	mov	r2, r3
						rxMessage.frame.data5);
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <main+0x1bc>)
 8001aaa:	7b9b      	ldrb	r3, [r3, #14]
				float receivedFuel = convertRawToFuel(rxMessage.frame.data4,
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f000 fb84 	bl	80021bc <convertRawToFuel>
 8001ab4:	63b8      	str	r0, [r7, #56]	; 0x38

				// Chuyển hướng hiển thị từ trái sang phải
				HD44780_LeftToRight();
 8001ab6:	f7ff fe87 	bl	80017c8 <HD44780_LeftToRight>

				// In dữ liệu nhận được lên màn hình LCD
				char receivedData[50]; // Đảm bảo đủ kích thước cho chuỗi
				sprintf(receivedData, "Temp: %.2f C, Speed: %.2f km/h, Fuel: %.2f",
 8001aba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001abc:	f7fe fd68 	bl	8000590 <__aeabi_f2d>
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4689      	mov	r9, r1
 8001ac4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ac6:	f7fe fd63 	bl	8000590 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ad0:	f7fe fd5e 	bl	8000590 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4638      	mov	r0, r7
 8001ada:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ade:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae2:	4642      	mov	r2, r8
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	4948      	ldr	r1, [pc, #288]	; (8001c08 <main+0x1c0>)
 8001ae8:	f003 fa2c 	bl	8004f44 <siprintf>
						receivedTemperature, receivedSpeed, receivedFuel);
				HD44780_Clear();
 8001aec:	f7ff fe40 	bl	8001770 <HD44780_Clear>
				HD44780_PrintStr(receivedData);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff febd 	bl	8001872 <HD44780_PrintStr>

				// Modify and transmit the received message
				txMessage.frame.idType = rxMessage.frame.idType;
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <main+0x1bc>)
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <main+0x1c4>)
 8001afe:	701a      	strb	r2, [r3, #0]
				txMessage.frame.id = rxMessage.frame.id;
 8001b00:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <main+0x1bc>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <main+0x1c4>)
 8001b06:	6053      	str	r3, [r2, #4]
				txMessage.frame.dlc = 0;
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <main+0x1c4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	721a      	strb	r2, [r3, #8]
				txMessage.frame.data0 = extractIntegerPart(receivedTemperature);
 8001b0e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b10:	f000 fb60 	bl	80021d4 <extractIntegerPart>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <main+0x1c4>)
 8001b1a:	725a      	strb	r2, [r3, #9]
				txMessage.frame.data1 = extractDecimalPart(receivedTemperature);
 8001b1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b1e:	f000 fb71 	bl	8002204 <extractDecimalPart>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <main+0x1c4>)
 8001b28:	729a      	strb	r2, [r3, #10]
				txMessage.frame.data2 = extractIntegerPart(receivedSpeed);
 8001b2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b2c:	f000 fb52 	bl	80021d4 <extractIntegerPart>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <main+0x1c4>)
 8001b36:	72da      	strb	r2, [r3, #11]
				txMessage.frame.data3 = extractDecimalPart(receivedSpeed);
 8001b38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b3a:	f000 fb63 	bl	8002204 <extractDecimalPart>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <main+0x1c4>)
 8001b44:	731a      	strb	r2, [r3, #12]
				txMessage.frame.data4 = extractIntegerPart(receivedFuel);
 8001b46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b48:	f000 fb44 	bl	80021d4 <extractIntegerPart>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <main+0x1c4>)
 8001b52:	735a      	strb	r2, [r3, #13]
				txMessage.frame.data5 = extractDecimalPart(receivedFuel);
 8001b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b56:	f000 fb55 	bl	8002204 <extractDecimalPart>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <main+0x1c4>)
 8001b60:	739a      	strb	r2, [r3, #14]
				txMessage.frame.data6 = 0;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <main+0x1c4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	73da      	strb	r2, [r3, #15]
				txMessage.frame.data7 = 0;
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <main+0x1c4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	741a      	strb	r2, [r3, #16]

				CANSPI_Transmit(&txMessage);
 8001b6e:	4827      	ldr	r0, [pc, #156]	; (8001c0c <main+0x1c4>)
 8001b70:	f7ff fa22 	bl	8000fb8 <CANSPI_Transmit>
 8001b74:	e041      	b.n	8001bfa <main+0x1b2>
			} else {
				// Chuyển hướng hiển thị từ phải sang trái
				HD44780_RightToLeft();
 8001b76:	f7ff fe3d 	bl	80017f4 <HD44780_RightToLeft>
				 sprintf(transmittedData, "T: %f, %f", extractIntegerPart(temperature), temperature);
				 HD44780_Clear();
				 HD44780_PrintStr(transmittedData);*/

				// Prepare and transmit a new message with static data
				txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <main+0x1c4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
				txMessage.frame.id = 0x0A;
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <main+0x1c4>)
 8001b82:	220a      	movs	r2, #10
 8001b84:	605a      	str	r2, [r3, #4]
				txMessage.frame.dlc = 8;
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <main+0x1c4>)
 8001b88:	2208      	movs	r2, #8
 8001b8a:	721a      	strb	r2, [r3, #8]
				txMessage.frame.data0 = 0;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <main+0x1c4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	725a      	strb	r2, [r3, #9]
				txMessage.frame.data1 = 0;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <main+0x1c4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	729a      	strb	r2, [r3, #10]
				txMessage.frame.data2 = 0;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <main+0x1c4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	72da      	strb	r2, [r3, #11]
				txMessage.frame.data3 = 0;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <main+0x1c4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	731a      	strb	r2, [r3, #12]
				txMessage.frame.data4 = 0;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <main+0x1c4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	735a      	strb	r2, [r3, #13]
				txMessage.frame.data5 = 0;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <main+0x1c4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	739a      	strb	r2, [r3, #14]
				txMessage.frame.data6 = 0;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <main+0x1c4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	73da      	strb	r2, [r3, #15]
				txMessage.frame.data7 = 0;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <main+0x1c4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	741a      	strb	r2, [r3, #16]

				CANSPI_Transmit(&txMessage);
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <main+0x1c4>)
 8001bbe:	f7ff f9fb 	bl	8000fb8 <CANSPI_Transmit>
				GPIO_PinState canCsState = HAL_GPIO_ReadPin(CAN_CS_GPIO_Port, CAN_CS_Pin);
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <main+0x1c8>)
 8001bc6:	f000 fe53 	bl	8002870 <HAL_GPIO_ReadPin>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				ctrl_status_t ctrlStatus;
				ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8001bd0:	f7ff fcc8 	bl	8001564 <MCP2515_ReadStatus>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				char lcdMessage[50]; // Đảm bảo đủ kích thước cho chuỗi
				sprintf(lcdMessage, "ID: %lu", CANSPI_Transmit(&txMessage));
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <main+0x1c4>)
 8001bdc:	f7ff f9ec 	bl	8000fb8 <CANSPI_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	463b      	mov	r3, r7
 8001be6:	490b      	ldr	r1, [pc, #44]	; (8001c14 <main+0x1cc>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f9ab 	bl	8004f44 <siprintf>
				HD44780_Clear();
 8001bee:	f7ff fdbf 	bl	8001770 <HD44780_Clear>
				HD44780_PrintStr(lcdMessage);
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fe3c 	bl	8001872 <HD44780_PrintStr>
			}

			HAL_Delay(1000);
 8001bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfe:	f000 fbab 	bl	8002358 <HAL_Delay>
			if (CANSPI_Receive(&rxMessage)) {
 8001c02:	e734      	b.n	8001a6e <main+0x26>
 8001c04:	200002d0 	.word	0x200002d0
 8001c08:	080072f8 	.word	0x080072f8
 8001c0c:	200002bc 	.word	0x200002bc
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	08007324 	.word	0x08007324

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b090      	sub	sp, #64	; 0x40
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	2228      	movs	r2, #40	; 0x28
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f9ef 	bl	800500a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fad1 	bl	8003208 <HAL_RCC_OscConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c6c:	f000 f8de 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c70:	230f      	movs	r3, #15
 8001c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	2302      	movs	r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fd3e 	bl	800370c <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c96:	f000 f8c9 	bl	8001e2c <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3740      	adds	r7, #64	; 0x40
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <MX_I2C1_Init+0x54>)
 8001cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cb0:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x58>)
 8001cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <MX_I2C1_Init+0x50>)
 8001ce2:	f000 fdf5 	bl	80028d0 <HAL_I2C_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cec:	f000 f89e 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000210 	.word	0x20000210
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	000186a0 	.word	0x000186a0

08001d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <MX_SPI1_Init+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d34:	2230      	movs	r2, #48	; 0x30
 8001d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d4c:	220a      	movs	r2, #10
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_SPI1_Init+0x64>)
 8001d52:	f001 fe55 	bl	8003a00 <HAL_SPI_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d5c:	f000 f866 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000264 	.word	0x20000264
 8001d68:	40013000 	.word	0x40013000

08001d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_GPIO_Init+0xb4>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001dce:	4815      	ldr	r0, [pc, #84]	; (8001e24 <MX_GPIO_Init+0xb8>)
 8001dd0:	f000 fd65 	bl	800289e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <MX_GPIO_Init+0xbc>)
 8001dda:	f000 fd60 	bl	800289e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	480b      	ldr	r0, [pc, #44]	; (8001e24 <MX_GPIO_Init+0xb8>)
 8001df8:	f000 fbb6 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_GPIO_Init+0xbc>)
 8001e14:	f000 fba8 	bl	8002568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_MspInit+0x40>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_MspInit+0x40>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6193      	str	r3, [r2, #24]
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_MspInit+0x40>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_MspInit+0x40>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_MspInit+0x40>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_MspInit+0x40>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_I2C_MspInit+0x90>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d132      	bne.n	8001f02 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <HAL_I2C_MspInit+0x98>)
 8001eca:	f000 fb4d 	bl	8002568 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_I2C_MspInit+0x9c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_I2C_MspInit+0x9c>)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_I2C_MspInit+0x94>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40005400 	.word	0x40005400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40010000 	.word	0x40010000

08001f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_SPI_MspInit+0x88>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12f      	bne.n	8001f9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_SPI_MspInit+0x8c>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f6c:	23a0      	movs	r3, #160	; 0xa0
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480b      	ldr	r0, [pc, #44]	; (8001fac <HAL_SPI_MspInit+0x90>)
 8001f80:	f000 faf2 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4619      	mov	r1, r3
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_SPI_MspInit+0x90>)
 8001f98:	f000 fae6 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40013000 	.word	0x40013000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010800 	.word	0x40010800

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff6:	f000 f993 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_kill>:

int _kill(int pid, int sig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002016:	f003 f84b 	bl	80050b0 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2216      	movs	r2, #22
 800201e:	601a      	str	r2, [r3, #0]
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe7 	bl	800200c <_kill>
  while (1) {}    /* Make sure we hang here */
 800203e:	e7fe      	b.n	800203e <_exit+0x12>

08002040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
  }

  return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e009      	b.n	80020a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf1      	blt.n	800208c <_write+0x12>
  }
  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_close>:

int _close(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d8:	605a      	str	r2, [r3, #4]
  return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <_isatty>:

int _isatty(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f002 ffb4 	bl	80050b0 <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20005000 	.word	0x20005000
 8002174:	00000400 	.word	0x00000400
 8002178:	200002e4 	.word	0x200002e4
 800217c:	20000438 	.word	0x20000438

08002180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <convertRawToTemperature>:

#include "utils.h"
#include <stdint.h>
#include <math.h>

float convertRawToTemperature(int raw1, int raw2) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 8002196:	f04f 0300 	mov.w	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <convertRawToSpeed>:

float convertRawToSpeed(int raw1, int raw2) {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 80021ae:	f04f 0300 	mov.w	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <convertRawToFuel>:

float convertRawToFuel(int raw1, int raw2) {
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 80021c6:	f04f 0300 	mov.w	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <extractIntegerPart>:

int extractIntegerPart(float value) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    return (int)floor(value);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe f9d7 	bl	8000590 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f004 fff9 	bl	80071e0 <floor>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcd3 	bl	8000ba0 <__aeabi_d2iz>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <extractDecimalPart>:
int extractIntegerPart2(float value) {
    // Implementation
	return (uint8_t)value;
}

int extractDecimalPart(float value) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    // Trừ đi phần nguyên để giữ lại phần thập phân
    float decimalPart = value - (int)value;
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fdfd 	bl	8000e0c <__aeabi_f2iz>
 8002212:	4603      	mov	r3, r0
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fda5 	bl	8000d64 <__aeabi_i2f>
 800221a:	4603      	mov	r3, r0
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fcea 	bl	8000bf8 <__aeabi_fsub>
 8002224:	4603      	mov	r3, r0
 8002226:	60fb      	str	r3, [r7, #12]

    // Nhân với 100 hoặc 1000 để tăng độ chính xác, tùy thuộc vào số lượng chữ số thập phân bạn muốn giữ lại
    decimalPart *= 100;
 8002228:	4906      	ldr	r1, [pc, #24]	; (8002244 <extractDecimalPart+0x40>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7fd ff98 	bl	8000160 <__aeabi_fmul>
 8002230:	4603      	mov	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]

    // Ép kiểu về int và trả về kết quả
    return (int)decimalPart;
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7fe fde9 	bl	8000e0c <__aeabi_f2iz>
 800223a:	4603      	mov	r3, r0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	42c80000 	.word	0x42c80000

08002248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff ff9a 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480b      	ldr	r0, [pc, #44]	; (800227c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800224e:	490c      	ldr	r1, [pc, #48]	; (8002280 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002264:	4c09      	ldr	r4, [pc, #36]	; (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f002 ff23 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002276:	f7ff fbe7 	bl	8001a48 <main>
  bx lr
 800227a:	4770      	bx	lr
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002284:	080076cc 	.word	0x080076cc
  ldr r2, =_sbss
 8002288:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800228c:	20000438 	.word	0x20000438

08002290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_2_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x28>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x28>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f92b 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fdc2 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f935 	bl	800254e <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f90b 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000010 	.word	0x20000010
 8002318:	20000018 	.word	0x20000018
 800231c:	20000014 	.word	0x20000014

08002320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_IncTick+0x1c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_IncTick+0x20>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a03      	ldr	r2, [pc, #12]	; (8002340 <HAL_IncTick+0x20>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000018 	.word	0x20000018
 8002340:	200002e8 	.word	0x200002e8

08002344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b02      	ldr	r3, [pc, #8]	; (8002354 <HAL_GetTick+0x10>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	200002e8 	.word	0x200002e8

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff0 	bl	8002344 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffe0 	bl	8002344 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000018 	.word	0x20000018

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff90 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff49 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff5e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffb0 	bl	80024bc <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b08b      	sub	sp, #44	; 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	e169      	b.n	8002850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800257c:	2201      	movs	r2, #1
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8158 	bne.w	800284a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a9a      	ldr	r2, [pc, #616]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d05e      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025a4:	4a98      	ldr	r2, [pc, #608]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d875      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025aa:	4a98      	ldr	r2, [pc, #608]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d058      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025b0:	4a96      	ldr	r2, [pc, #600]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d86f      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025b6:	4a96      	ldr	r2, [pc, #600]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d052      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025bc:	4a94      	ldr	r2, [pc, #592]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d869      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025c2:	4a94      	ldr	r2, [pc, #592]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d04c      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025c8:	4a92      	ldr	r2, [pc, #584]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d863      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025ce:	4a92      	ldr	r2, [pc, #584]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d046      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025d4:	4a90      	ldr	r2, [pc, #576]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d85d      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d82a      	bhi.n	8002634 <HAL_GPIO_Init+0xcc>
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d859      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_GPIO_Init+0x80>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	08002663 	.word	0x08002663
 80025ec:	0800263d 	.word	0x0800263d
 80025f0:	0800264f 	.word	0x0800264f
 80025f4:	08002691 	.word	0x08002691
 80025f8:	08002697 	.word	0x08002697
 80025fc:	08002697 	.word	0x08002697
 8002600:	08002697 	.word	0x08002697
 8002604:	08002697 	.word	0x08002697
 8002608:	08002697 	.word	0x08002697
 800260c:	08002697 	.word	0x08002697
 8002610:	08002697 	.word	0x08002697
 8002614:	08002697 	.word	0x08002697
 8002618:	08002697 	.word	0x08002697
 800261c:	08002697 	.word	0x08002697
 8002620:	08002697 	.word	0x08002697
 8002624:	08002697 	.word	0x08002697
 8002628:	08002697 	.word	0x08002697
 800262c:	08002645 	.word	0x08002645
 8002630:	08002659 	.word	0x08002659
 8002634:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_GPIO_Init+0x2b4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800263a:	e02c      	b.n	8002696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	623b      	str	r3, [r7, #32]
          break;
 8002642:	e029      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	3304      	adds	r3, #4
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e024      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	3308      	adds	r3, #8
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e01f      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	330c      	adds	r3, #12
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e01a      	b.n	8002698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800266a:	2304      	movs	r3, #4
 800266c:	623b      	str	r3, [r7, #32]
          break;
 800266e:	e013      	b.n	8002698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	611a      	str	r2, [r3, #16]
          break;
 8002682:	e009      	b.n	8002698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002684:	2308      	movs	r3, #8
 8002686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	615a      	str	r2, [r3, #20]
          break;
 800268e:	e003      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x130>
          break;
 8002696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d801      	bhi.n	80026a2 <HAL_GPIO_Init+0x13a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_Init+0x13e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d802      	bhi.n	80026b4 <HAL_GPIO_Init+0x14c>
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x152>
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3b08      	subs	r3, #8
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	210f      	movs	r1, #15
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b1 	beq.w	800284a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e8:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_GPIO_Init+0x1ec>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3f      	ldr	r2, [pc, #252]	; (800282c <HAL_GPIO_Init+0x2c4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_GPIO_Init+0x1e8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3e      	ldr	r2, [pc, #248]	; (8002830 <HAL_GPIO_Init+0x2c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <HAL_GPIO_Init+0x1e4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_GPIO_Init+0x2cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_GPIO_Init+0x1e0>
 8002744:	2303      	movs	r3, #3
 8002746:	e006      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002748:	2304      	movs	r3, #4
 800274a:	e004      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 800274c:	2302      	movs	r3, #2
 800274e:	e002      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002754:	2300      	movs	r3, #0
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	f002 0203 	and.w	r2, r2, #3
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	4093      	lsls	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002766:	492f      	ldr	r1, [pc, #188]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	492c      	ldr	r1, [pc, #176]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	4928      	ldr	r1, [pc, #160]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	491e      	ldr	r1, [pc, #120]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4918      	ldr	r1, [pc, #96]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4914      	ldr	r1, [pc, #80]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d021      	beq.n	800283c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e021      	b.n	800284a <HAL_GPIO_Init+0x2e2>
 8002806:	bf00      	nop
 8002808:	10320000 	.word	0x10320000
 800280c:	10310000 	.word	0x10310000
 8002810:	10220000 	.word	0x10220000
 8002814:	10210000 	.word	0x10210000
 8002818:	10120000 	.word	0x10120000
 800281c:	10110000 	.word	0x10110000
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	40010800 	.word	0x40010800
 800282c:	40010c00 	.word	0x40010c00
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400
 8002838:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_GPIO_Init+0x304>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	4909      	ldr	r1, [pc, #36]	; (800286c <HAL_GPIO_Init+0x304>)
 8002846:	4013      	ands	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f ae8e 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	372c      	adds	r7, #44	; 0x2c
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	807b      	strh	r3, [r7, #2]
 80028aa:	4613      	mov	r3, r2
 80028ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ae:	787b      	ldrb	r3, [r7, #1]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e12b      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fac0 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f001 f832 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a81      	ldr	r2, [pc, #516]	; (8002b44 <HAL_I2C_Init+0x274>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <HAL_I2C_Init+0x278>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a7d      	ldr	r2, [pc, #500]	; (8002b4c <HAL_I2C_Init+0x27c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0e7      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <HAL_I2C_Init+0x280>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <HAL_I2C_Init+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a69      	ldr	r2, [pc, #420]	; (8002b54 <HAL_I2C_Init+0x284>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	495c      	ldr	r1, [pc, #368]	; (8002b44 <HAL_I2C_Init+0x274>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d819      	bhi.n	8002a0c <HAL_I2C_Init+0x13c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	1c59      	adds	r1, r3, #1
 80029e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029ec:	400b      	ands	r3, r1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_I2C_Init+0x138>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e59      	subs	r1, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	e051      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e04f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d111      	bne.n	8002a38 <HAL_I2C_Init+0x168>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e012      	b.n	8002a5e <HAL_I2C_Init+0x18e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x196>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e022      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <HAL_I2C_Init+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e58      	subs	r0, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	440b      	add	r3, r1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6911      	ldr	r1, [r2, #16]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	000186a0 	.word	0x000186a0
 8002b48:	001e847f 	.word	0x001e847f
 8002b4c:	003d08ff 	.word	0x003d08ff
 8002b50:	431bde83 	.word	0x431bde83
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fbea 	bl	8002344 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	f040 80e0 	bne.w	8002d40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2319      	movs	r3, #25
 8002b86:	2201      	movs	r2, #1
 8002b88:	4970      	ldr	r1, [pc, #448]	; (8002d4c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f964 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0d3      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2C_Master_Transmit+0x50>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0cc      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d007      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2221      	movs	r2, #33	; 0x21
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2210      	movs	r2, #16
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	893a      	ldrh	r2, [r7, #8]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c10:	8979      	ldrh	r1, [r7, #10]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f89c 	bl	8002d54 <I2C_MasterRequestWrite>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e08d      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c3c:	e066      	b.n	8002d0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa22 	bl	800308c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06b      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_I2C_Master_Transmit+0x188>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6a39      	ldr	r1, [r7, #32]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa19 	bl	800311c <I2C_WaitOnBTFFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e01a      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d194      	bne.n	8002c3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d006      	beq.n	8002d7e <I2C_MasterRequestWrite+0x2a>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d003      	beq.n	8002d7e <I2C_MasterRequestWrite+0x2a>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d7c:	d108      	bne.n	8002d90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e00b      	b.n	8002da8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	d107      	bne.n	8002da8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f84f 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dce:	d103      	bne.n	8002dd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e035      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de4:	d108      	bne.n	8002df8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	e01b      	b.n	8002e30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002df8:	897b      	ldrh	r3, [r7, #10]
 8002dfa:	11db      	asrs	r3, r3, #7
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0306 	and.w	r3, r3, #6
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f063 030f 	orn	r3, r3, #15
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	490e      	ldr	r1, [pc, #56]	; (8002e50 <I2C_MasterRequestWrite+0xfc>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f898 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e010      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4907      	ldr	r1, [pc, #28]	; (8002e54 <I2C_MasterRequestWrite+0x100>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f888 	bl	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	00010008 	.word	0x00010008
 8002e54:	00010002 	.word	0x00010002

08002e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e68:	e048      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d044      	beq.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff fa67 	bl	8002344 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d139      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	e00c      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d116      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e023      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10d      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	e00c      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d093      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5a:	e071      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d123      	bne.n	8002fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e067      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d041      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7ff f9c2 	bl	8002344 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d136      	bne.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e00b      	b.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e021      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10c      	bne.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e00b      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f af6d 	bne.w	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003098:	e034      	b.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f886 	bl	80031ac <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e034      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d028      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7ff f947 	bl	8002344 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11d      	bne.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d016      	beq.n	8003104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d1c3      	bne.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003128:	e034      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f83e 	bl	80031ac <I2C_IsAcknowledgeFailed>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e034      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d028      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f8ff 	bl	8002344 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d1c3      	bne.n	800312a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d11b      	bne.n	80031fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e272      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8087 	beq.w	8003336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003228:	4b92      	ldr	r3, [pc, #584]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b04      	cmp	r3, #4
 8003232:	d00c      	beq.n	800324e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003234:	4b8f      	ldr	r3, [pc, #572]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d112      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
 8003240:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b89      	ldr	r3, [pc, #548]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <HAL_RCC_OscConfig+0x12c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d168      	bne.n	8003334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e24c      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x76>
 8003270:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7f      	ldr	r2, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xbc>
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a71      	ldr	r2, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6e      	ldr	r2, [pc, #440]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032c4:	4b6b      	ldr	r3, [pc, #428]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a67      	ldr	r2, [pc, #412]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff f82e 	bl	8002344 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff f82a 	bl	8002344 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e200      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe4>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7ff f81a 	bl	8002344 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff f816 	bl	8002344 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1ec      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x10c>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003342:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334e:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1c0      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4939      	ldr	r1, [pc, #228]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe ffcf 	bl	8002344 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe ffcb 	bl	8002344 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1a1      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4927      	ldr	r1, [pc, #156]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe ffae 	bl	8002344 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fe ffaa 	bl	8002344 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e180      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03a      	beq.n	800348c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_RCC_OscConfig+0x274>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe ff8e 	bl	8002344 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe ff8a 	bl	8002344 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e160      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_OscConfig+0x26c>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f000 faba 	bl	80039c4 <RCC_Delay>
 8003450:	e01c      	b.n	800348c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCC_OscConfig+0x274>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003458:	f7fe ff74 	bl	8002344 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345e:	e00f      	b.n	8003480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe ff70 	bl	8002344 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d908      	bls.n	8003480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e146      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	42420000 	.word	0x42420000
 800347c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a6 	beq.w	80035e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a87      	ldr	r2, [pc, #540]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]
 80034b6:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b82      	ldr	r3, [pc, #520]	; (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a7e      	ldr	r2, [pc, #504]	; (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe ff31 	bl	8002344 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe ff2d 	bl	8002344 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e103      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <HAL_RCC_OscConfig+0x4c8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x312>
 800350c:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e02d      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x334>
 8003522:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a69      	ldr	r2, [pc, #420]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a66      	ldr	r2, [pc, #408]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	e01c      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d10c      	bne.n	800355e <HAL_RCC_OscConfig+0x356>
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a60      	ldr	r2, [pc, #384]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	4b5e      	ldr	r3, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	e00b      	b.n	8003576 <HAL_RCC_OscConfig+0x36e>
 800355e:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a5a      	ldr	r2, [pc, #360]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	4b58      	ldr	r3, [pc, #352]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fe fee1 	bl	8002344 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fedd 	bl	8002344 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0b1      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <HAL_RCC_OscConfig+0x37e>
 80035a8:	e014      	b.n	80035d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fecb 	bl	8002344 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fec7 	bl	8002344 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e09b      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8087 	beq.w	80036fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d061      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d146      	bne.n	8003692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fe9b 	bl	8002344 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fe97 	bl	8002344 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e06d      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4921      	ldr	r1, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a19      	ldr	r1, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	430b      	orrs	r3, r1
 800365e:	491b      	ldr	r1, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fe6b 	bl	8002344 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fe67 	bl	8002344 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e03d      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x46a>
 8003690:	e035      	b.n	80036fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_OscConfig+0x4cc>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fe54 	bl	8002344 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fe50 	bl	8002344 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e026      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x498>
 80036be:	e01e      	b.n	80036fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e019      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_OscConfig+0x500>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d0      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003720:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d910      	bls.n	8003750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0207 	bic.w	r2, r3, #7
 8003736:	4965      	ldr	r1, [pc, #404]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800378a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d040      	beq.n	800382c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d115      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e073      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037da:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4936      	ldr	r1, [pc, #216]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fda2 	bl	8002344 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fe fd9e 	bl	8002344 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e053      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 020c 	and.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d1eb      	bne.n	8003804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800382c:	4b27      	ldr	r3, [pc, #156]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d210      	bcs.n	800385c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f821 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1cc>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fd00 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800732c 	.word	0x0800732c
 80038d8:	20000010 	.word	0x20000010
 80038dc:	20000014 	.word	0x20000014

080038e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <HAL_RCC_GetSysClockFreq+0x94>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b04      	cmp	r3, #4
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x30>
 800390a:	2b08      	cmp	r3, #8
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x36>
 800390e:	e027      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003912:	613b      	str	r3, [r7, #16]
      break;
 8003914:	e027      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0c9b      	lsrs	r3, r3, #18
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_GetSysClockFreq+0x94>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c5b      	lsrs	r3, r3, #17
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003942:	fb03 f202 	mul.w	r2, r3, r2
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e004      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	613b      	str	r3, [r7, #16]
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003962:	613b      	str	r3, [r7, #16]
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	693b      	ldr	r3, [r7, #16]
}
 8003968:	4618      	mov	r0, r3
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	007a1200 	.word	0x007a1200
 800397c:	08007344 	.word	0x08007344
 8003980:	08007354 	.word	0x08007354
 8003984:	003d0900 	.word	0x003d0900

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b02      	ldr	r3, [pc, #8]	; (8003998 <HAL_RCC_GetHCLKFreq+0x10>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	20000010 	.word	0x20000010

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff2 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800733c 	.word	0x0800733c

080039c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <RCC_Delay+0x34>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <RCC_Delay+0x38>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a5b      	lsrs	r3, r3, #9
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e0:	bf00      	nop
  }
  while (Delay --);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	60fa      	str	r2, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f9      	bne.n	80039e0 <RCC_Delay+0x1c>
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20000010 	.word	0x20000010
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e076      	b.n	8003b00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a22:	d009      	beq.n	8003a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fa62 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	ea42 0103 	orr.w	r1, r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	0c1a      	lsrs	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f002 0204 	and.w	r2, r2, #4
 8003ade:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Transmit+0x22>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e12d      	b.n	8003d86 <HAL_SPI_Transmit+0x27e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b32:	f7fe fc07 	bl	8002344 <HAL_GetTick>
 8003b36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b4c:	e116      	b.n	8003d7c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Transmit+0x52>
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b5e:	e10d      	b.n	8003d7c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d007      	beq.n	8003be6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d14f      	bne.n	8003c90 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit+0xf6>
 8003bf8:	8afb      	ldrh	r3, [r7, #22]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d142      	bne.n	8003c84 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c22:	e02f      	b.n	8003c84 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d112      	bne.n	8003c58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c56:	e015      	b.n	8003c84 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c58:	f7fe fb74 	bl	8002344 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d803      	bhi.n	8003c70 <HAL_SPI_Transmit+0x168>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d102      	bne.n	8003c76 <HAL_SPI_Transmit+0x16e>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c82:	e07b      	b.n	8003d7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ca      	bne.n	8003c24 <HAL_SPI_Transmit+0x11c>
 8003c8e:	e050      	b.n	8003d32 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_Transmit+0x196>
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d144      	bne.n	8003d28 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cc4:	e030      	b.n	8003d28 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d113      	bne.n	8003cfc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cfa:	e015      	b.n	8003d28 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfc:	f7fe fb22 	bl	8002344 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d803      	bhi.n	8003d14 <HAL_SPI_Transmit+0x20c>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d102      	bne.n	8003d1a <HAL_SPI_Transmit+0x212>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d26:	e029      	b.n	8003d7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1c9      	bne.n	8003cc6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fbd8 	bl	80044ec <SPI_EndRxTxTransaction>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e003      	b.n	8003d7c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
 8003db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003db2:	e0fb      	b.n	8003fac <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbc:	d112      	bne.n	8003de4 <HAL_SPI_Receive+0x56>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10e      	bne.n	8003de4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f8ef 	bl	8003fbe <HAL_SPI_TransmitReceive>
 8003de0:	4603      	mov	r3, r0
 8003de2:	e0e8      	b.n	8003fb6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Receive+0x64>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0e1      	b.n	8003fb6 <HAL_SPI_Receive+0x228>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dfa:	f7fe faa3 	bl	8002344 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Receive+0x7e>
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e10:	e0cc      	b.n	8003fac <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2204      	movs	r2, #4
 8003e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d10f      	bne.n	8003e7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d007      	beq.n	8003e98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d16a      	bne.n	8003f76 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ea0:	e032      	b.n	8003f08 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d115      	bne.n	8003edc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f103 020c 	add.w	r2, r3, #12
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eda:	e015      	b.n	8003f08 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003edc:	f7fe fa32 	bl	8002344 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d803      	bhi.n	8003ef4 <HAL_SPI_Receive+0x166>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Receive+0x16c>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f06:	e051      	b.n	8003fac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1c7      	bne.n	8003ea2 <HAL_SPI_Receive+0x114>
 8003f12:	e035      	b.n	8003f80 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d113      	bne.n	8003f4a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	1c9a      	adds	r2, r3, #2
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f48:	e015      	b.n	8003f76 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4a:	f7fe f9fb 	bl	8002344 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d803      	bhi.n	8003f62 <HAL_SPI_Receive+0x1d4>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d102      	bne.n	8003f68 <HAL_SPI_Receive+0x1da>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f74:	e01a      	b.n	8003fac <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1c9      	bne.n	8003f14 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fa5f 	bl	8004448 <SPI_EndRxTransaction>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
 8003fa2:	e003      	b.n	8003fac <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08c      	sub	sp, #48	; 0x30
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x26>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e198      	b.n	8004316 <HAL_SPI_TransmitReceive+0x358>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fec:	f7fe f9aa 	bl	8002344 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800400a:	2b01      	cmp	r3, #1
 800400c:	d00f      	beq.n	800402e <HAL_SPI_TransmitReceive+0x70>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004014:	d107      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x68>
 800401e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004022:	2b04      	cmp	r3, #4
 8004024:	d003      	beq.n	800402e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800402c:	e16d      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x82>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x82>
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004046:	e160      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b04      	cmp	r3, #4
 8004052:	d003      	beq.n	800405c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	887a      	ldrh	r2, [r7, #2]
 8004072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d007      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b8:	d17c      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x10a>
 80040c2:	8b7b      	ldrh	r3, [r7, #26]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d16a      	bne.n	800419e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	881a      	ldrh	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	1c9a      	adds	r2, r3, #2
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ec:	e057      	b.n	800419e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11b      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x176>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x176>
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d113      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d119      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x1b8>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d014      	beq.n	8004176 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	b292      	uxth	r2, r2
 8004158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004172:	2301      	movs	r3, #1
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004176:	f7fe f8e5 	bl	8002344 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004182:	429a      	cmp	r2, r3
 8004184:	d80b      	bhi.n	800419e <HAL_SPI_TransmitReceive+0x1e0>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d007      	beq.n	800419e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800419c:	e0b5      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1a2      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x130>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d19d      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x130>
 80041b2:	e080      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x204>
 80041bc:	8b7b      	ldrh	r3, [r7, #26]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d16f      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e8:	e05b      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11c      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x274>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x274>
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d114      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x2b6>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004274:	f7fe f866 	bl	8002344 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004280:	429a      	cmp	r2, r3
 8004282:	d803      	bhi.n	800428c <HAL_SPI_TransmitReceive+0x2ce>
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d102      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x2d4>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042a0:	e033      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d19e      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x22c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d199      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f916 	bl	80044ec <SPI_EndRxTxTransaction>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042d2:	e01a      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004300:	e003      	b.n	800430a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432c:	b2db      	uxtb	r3, r3
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004348:	f7fd fffc 	bl	8002344 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4413      	add	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004358:	f7fd fff4 	bl	8002344 <HAL_GetTick>
 800435c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	015b      	lsls	r3, r3, #5
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	e054      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d050      	beq.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004378:	f7fd ffe4 	bl	8002344 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	429a      	cmp	r2, r3
 8004386:	d902      	bls.n	800438e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d13d      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800439c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d111      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d004      	beq.n	80043bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d107      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d4:	d10f      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e017      	b.n	800443a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d19b      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000010 	.word	0x20000010

08004448 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445c:	d111      	bne.n	8004482 <SPI_EndRxTransaction+0x3a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004466:	d004      	beq.n	8004472 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d107      	bne.n	8004482 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004480:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448a:	d117      	bne.n	80044bc <SPI_EndRxTransaction+0x74>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d112      	bne.n	80044bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	2101      	movs	r1, #1
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ff49 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e013      	b.n	80044e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff ff36 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e000      	b.n	80044e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff18 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e000      	b.n	8004520 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <__cvt>:
 8004528:	2b00      	cmp	r3, #0
 800452a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452e:	461f      	mov	r7, r3
 8004530:	bfbb      	ittet	lt
 8004532:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004536:	461f      	movlt	r7, r3
 8004538:	2300      	movge	r3, #0
 800453a:	232d      	movlt	r3, #45	; 0x2d
 800453c:	b088      	sub	sp, #32
 800453e:	4614      	mov	r4, r2
 8004540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004542:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004544:	7013      	strb	r3, [r2, #0]
 8004546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004548:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800454c:	f023 0820 	bic.w	r8, r3, #32
 8004550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004554:	d005      	beq.n	8004562 <__cvt+0x3a>
 8004556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800455a:	d100      	bne.n	800455e <__cvt+0x36>
 800455c:	3501      	adds	r5, #1
 800455e:	2302      	movs	r3, #2
 8004560:	e000      	b.n	8004564 <__cvt+0x3c>
 8004562:	2303      	movs	r3, #3
 8004564:	aa07      	add	r2, sp, #28
 8004566:	9204      	str	r2, [sp, #16]
 8004568:	aa06      	add	r2, sp, #24
 800456a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800456e:	e9cd 3500 	strd	r3, r5, [sp]
 8004572:	4622      	mov	r2, r4
 8004574:	463b      	mov	r3, r7
 8004576:	f000 fe5f 	bl	8005238 <_dtoa_r>
 800457a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800457e:	4606      	mov	r6, r0
 8004580:	d102      	bne.n	8004588 <__cvt+0x60>
 8004582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004584:	07db      	lsls	r3, r3, #31
 8004586:	d522      	bpl.n	80045ce <__cvt+0xa6>
 8004588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800458c:	eb06 0905 	add.w	r9, r6, r5
 8004590:	d110      	bne.n	80045b4 <__cvt+0x8c>
 8004592:	7833      	ldrb	r3, [r6, #0]
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d10a      	bne.n	80045ae <__cvt+0x86>
 8004598:	2200      	movs	r2, #0
 800459a:	2300      	movs	r3, #0
 800459c:	4620      	mov	r0, r4
 800459e:	4639      	mov	r1, r7
 80045a0:	f7fc fab6 	bl	8000b10 <__aeabi_dcmpeq>
 80045a4:	b918      	cbnz	r0, 80045ae <__cvt+0x86>
 80045a6:	f1c5 0501 	rsb	r5, r5, #1
 80045aa:	f8ca 5000 	str.w	r5, [sl]
 80045ae:	f8da 3000 	ldr.w	r3, [sl]
 80045b2:	4499      	add	r9, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	2300      	movs	r3, #0
 80045b8:	4620      	mov	r0, r4
 80045ba:	4639      	mov	r1, r7
 80045bc:	f7fc faa8 	bl	8000b10 <__aeabi_dcmpeq>
 80045c0:	b108      	cbz	r0, 80045c6 <__cvt+0x9e>
 80045c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80045c6:	2230      	movs	r2, #48	; 0x30
 80045c8:	9b07      	ldr	r3, [sp, #28]
 80045ca:	454b      	cmp	r3, r9
 80045cc:	d307      	bcc.n	80045de <__cvt+0xb6>
 80045ce:	4630      	mov	r0, r6
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045d4:	1b9b      	subs	r3, r3, r6
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	b008      	add	sp, #32
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	9107      	str	r1, [sp, #28]
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e7f0      	b.n	80045c8 <__cvt+0xa0>

080045e6 <__exponent>:
 80045e6:	4603      	mov	r3, r0
 80045e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ea:	2900      	cmp	r1, #0
 80045ec:	f803 2b02 	strb.w	r2, [r3], #2
 80045f0:	bfb6      	itet	lt
 80045f2:	222d      	movlt	r2, #45	; 0x2d
 80045f4:	222b      	movge	r2, #43	; 0x2b
 80045f6:	4249      	neglt	r1, r1
 80045f8:	2909      	cmp	r1, #9
 80045fa:	7042      	strb	r2, [r0, #1]
 80045fc:	dd2a      	ble.n	8004654 <__exponent+0x6e>
 80045fe:	f10d 0207 	add.w	r2, sp, #7
 8004602:	4617      	mov	r7, r2
 8004604:	260a      	movs	r6, #10
 8004606:	fb91 f5f6 	sdiv	r5, r1, r6
 800460a:	4694      	mov	ip, r2
 800460c:	fb06 1415 	mls	r4, r6, r5, r1
 8004610:	3430      	adds	r4, #48	; 0x30
 8004612:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004616:	460c      	mov	r4, r1
 8004618:	2c63      	cmp	r4, #99	; 0x63
 800461a:	4629      	mov	r1, r5
 800461c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004620:	dcf1      	bgt.n	8004606 <__exponent+0x20>
 8004622:	3130      	adds	r1, #48	; 0x30
 8004624:	f1ac 0402 	sub.w	r4, ip, #2
 8004628:	f802 1c01 	strb.w	r1, [r2, #-1]
 800462c:	4622      	mov	r2, r4
 800462e:	1c41      	adds	r1, r0, #1
 8004630:	42ba      	cmp	r2, r7
 8004632:	d30a      	bcc.n	800464a <__exponent+0x64>
 8004634:	f10d 0209 	add.w	r2, sp, #9
 8004638:	eba2 020c 	sub.w	r2, r2, ip
 800463c:	42bc      	cmp	r4, r7
 800463e:	bf88      	it	hi
 8004640:	2200      	movhi	r2, #0
 8004642:	4413      	add	r3, r2
 8004644:	1a18      	subs	r0, r3, r0
 8004646:	b003      	add	sp, #12
 8004648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800464e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004652:	e7ed      	b.n	8004630 <__exponent+0x4a>
 8004654:	2330      	movs	r3, #48	; 0x30
 8004656:	3130      	adds	r1, #48	; 0x30
 8004658:	7083      	strb	r3, [r0, #2]
 800465a:	70c1      	strb	r1, [r0, #3]
 800465c:	1d03      	adds	r3, r0, #4
 800465e:	e7f1      	b.n	8004644 <__exponent+0x5e>

08004660 <_printf_float>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	b091      	sub	sp, #68	; 0x44
 8004666:	460c      	mov	r4, r1
 8004668:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800466c:	4616      	mov	r6, r2
 800466e:	461f      	mov	r7, r3
 8004670:	4605      	mov	r5, r0
 8004672:	f000 fcd3 	bl	800501c <_localeconv_r>
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	9309      	str	r3, [sp, #36]	; 0x24
 800467c:	f7fb fd68 	bl	8000150 <strlen>
 8004680:	2300      	movs	r3, #0
 8004682:	930e      	str	r3, [sp, #56]	; 0x38
 8004684:	f8d8 3000 	ldr.w	r3, [r8]
 8004688:	900a      	str	r0, [sp, #40]	; 0x28
 800468a:	3307      	adds	r3, #7
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	f103 0208 	add.w	r2, r3, #8
 8004694:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004698:	f8d4 b000 	ldr.w	fp, [r4]
 800469c:	f8c8 2000 	str.w	r2, [r8]
 80046a0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80046a4:	4652      	mov	r2, sl
 80046a6:	4643      	mov	r3, r8
 80046a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046ac:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80046b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	4650      	mov	r0, sl
 80046b8:	4b9c      	ldr	r3, [pc, #624]	; (800492c <_printf_float+0x2cc>)
 80046ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046bc:	f7fc fa5a 	bl	8000b74 <__aeabi_dcmpun>
 80046c0:	bb70      	cbnz	r0, 8004720 <_printf_float+0xc0>
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	4650      	mov	r0, sl
 80046c8:	4b98      	ldr	r3, [pc, #608]	; (800492c <_printf_float+0x2cc>)
 80046ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046cc:	f7fc fa34 	bl	8000b38 <__aeabi_dcmple>
 80046d0:	bb30      	cbnz	r0, 8004720 <_printf_float+0xc0>
 80046d2:	2200      	movs	r2, #0
 80046d4:	2300      	movs	r3, #0
 80046d6:	4650      	mov	r0, sl
 80046d8:	4641      	mov	r1, r8
 80046da:	f7fc fa23 	bl	8000b24 <__aeabi_dcmplt>
 80046de:	b110      	cbz	r0, 80046e6 <_printf_float+0x86>
 80046e0:	232d      	movs	r3, #45	; 0x2d
 80046e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e6:	4a92      	ldr	r2, [pc, #584]	; (8004930 <_printf_float+0x2d0>)
 80046e8:	4b92      	ldr	r3, [pc, #584]	; (8004934 <_printf_float+0x2d4>)
 80046ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046ee:	bf94      	ite	ls
 80046f0:	4690      	movls	r8, r2
 80046f2:	4698      	movhi	r8, r3
 80046f4:	2303      	movs	r3, #3
 80046f6:	f04f 0a00 	mov.w	sl, #0
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	f02b 0304 	bic.w	r3, fp, #4
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	4633      	mov	r3, r6
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	9700      	str	r7, [sp, #0]
 800470a:	aa0f      	add	r2, sp, #60	; 0x3c
 800470c:	f000 f9d6 	bl	8004abc <_printf_common>
 8004710:	3001      	adds	r0, #1
 8004712:	f040 8090 	bne.w	8004836 <_printf_float+0x1d6>
 8004716:	f04f 30ff 	mov.w	r0, #4294967295
 800471a:	b011      	add	sp, #68	; 0x44
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004720:	4652      	mov	r2, sl
 8004722:	4643      	mov	r3, r8
 8004724:	4650      	mov	r0, sl
 8004726:	4641      	mov	r1, r8
 8004728:	f7fc fa24 	bl	8000b74 <__aeabi_dcmpun>
 800472c:	b148      	cbz	r0, 8004742 <_printf_float+0xe2>
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	bfb8      	it	lt
 8004734:	232d      	movlt	r3, #45	; 0x2d
 8004736:	4a80      	ldr	r2, [pc, #512]	; (8004938 <_printf_float+0x2d8>)
 8004738:	bfb8      	it	lt
 800473a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800473e:	4b7f      	ldr	r3, [pc, #508]	; (800493c <_printf_float+0x2dc>)
 8004740:	e7d3      	b.n	80046ea <_printf_float+0x8a>
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	d142      	bne.n	80047d2 <_printf_float+0x172>
 800474c:	2306      	movs	r3, #6
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	9206      	str	r2, [sp, #24]
 8004754:	aa0e      	add	r2, sp, #56	; 0x38
 8004756:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800475a:	aa0d      	add	r2, sp, #52	; 0x34
 800475c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004760:	9203      	str	r2, [sp, #12]
 8004762:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004766:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	4652      	mov	r2, sl
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	4643      	mov	r3, r8
 8004776:	910b      	str	r1, [sp, #44]	; 0x2c
 8004778:	f7ff fed6 	bl	8004528 <__cvt>
 800477c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800477e:	4680      	mov	r8, r0
 8004780:	2947      	cmp	r1, #71	; 0x47
 8004782:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004784:	d108      	bne.n	8004798 <_printf_float+0x138>
 8004786:	1cc8      	adds	r0, r1, #3
 8004788:	db02      	blt.n	8004790 <_printf_float+0x130>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	4299      	cmp	r1, r3
 800478e:	dd40      	ble.n	8004812 <_printf_float+0x1b2>
 8004790:	f1a9 0902 	sub.w	r9, r9, #2
 8004794:	fa5f f989 	uxtb.w	r9, r9
 8004798:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800479c:	d81f      	bhi.n	80047de <_printf_float+0x17e>
 800479e:	464a      	mov	r2, r9
 80047a0:	3901      	subs	r1, #1
 80047a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047a6:	910d      	str	r1, [sp, #52]	; 0x34
 80047a8:	f7ff ff1d 	bl	80045e6 <__exponent>
 80047ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047ae:	4682      	mov	sl, r0
 80047b0:	1813      	adds	r3, r2, r0
 80047b2:	2a01      	cmp	r2, #1
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	dc02      	bgt.n	80047be <_printf_float+0x15e>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	07d2      	lsls	r2, r2, #31
 80047bc:	d501      	bpl.n	80047c2 <_printf_float+0x162>
 80047be:	3301      	adds	r3, #1
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d09b      	beq.n	8004702 <_printf_float+0xa2>
 80047ca:	232d      	movs	r3, #45	; 0x2d
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d0:	e797      	b.n	8004702 <_printf_float+0xa2>
 80047d2:	2947      	cmp	r1, #71	; 0x47
 80047d4:	d1bc      	bne.n	8004750 <_printf_float+0xf0>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ba      	bne.n	8004750 <_printf_float+0xf0>
 80047da:	2301      	movs	r3, #1
 80047dc:	e7b7      	b.n	800474e <_printf_float+0xee>
 80047de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047e2:	d118      	bne.n	8004816 <_printf_float+0x1b6>
 80047e4:	2900      	cmp	r1, #0
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	dd0b      	ble.n	8004802 <_printf_float+0x1a2>
 80047ea:	6121      	str	r1, [r4, #16]
 80047ec:	b913      	cbnz	r3, 80047f4 <_printf_float+0x194>
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	07d0      	lsls	r0, r2, #31
 80047f2:	d502      	bpl.n	80047fa <_printf_float+0x19a>
 80047f4:	3301      	adds	r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	f04f 0a00 	mov.w	sl, #0
 80047fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004800:	e7df      	b.n	80047c2 <_printf_float+0x162>
 8004802:	b913      	cbnz	r3, 800480a <_printf_float+0x1aa>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	07d2      	lsls	r2, r2, #31
 8004808:	d501      	bpl.n	800480e <_printf_float+0x1ae>
 800480a:	3302      	adds	r3, #2
 800480c:	e7f4      	b.n	80047f8 <_printf_float+0x198>
 800480e:	2301      	movs	r3, #1
 8004810:	e7f2      	b.n	80047f8 <_printf_float+0x198>
 8004812:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004818:	4299      	cmp	r1, r3
 800481a:	db05      	blt.n	8004828 <_printf_float+0x1c8>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	6121      	str	r1, [r4, #16]
 8004820:	07d8      	lsls	r0, r3, #31
 8004822:	d5ea      	bpl.n	80047fa <_printf_float+0x19a>
 8004824:	1c4b      	adds	r3, r1, #1
 8004826:	e7e7      	b.n	80047f8 <_printf_float+0x198>
 8004828:	2900      	cmp	r1, #0
 800482a:	bfcc      	ite	gt
 800482c:	2201      	movgt	r2, #1
 800482e:	f1c1 0202 	rsble	r2, r1, #2
 8004832:	4413      	add	r3, r2
 8004834:	e7e0      	b.n	80047f8 <_printf_float+0x198>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	055a      	lsls	r2, r3, #21
 800483a:	d407      	bmi.n	800484c <_printf_float+0x1ec>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	4642      	mov	r2, r8
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	d12b      	bne.n	80048a2 <_printf_float+0x242>
 800484a:	e764      	b.n	8004716 <_printf_float+0xb6>
 800484c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004850:	f240 80dd 	bls.w	8004a0e <_printf_float+0x3ae>
 8004854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	f7fc f958 	bl	8000b10 <__aeabi_dcmpeq>
 8004860:	2800      	cmp	r0, #0
 8004862:	d033      	beq.n	80048cc <_printf_float+0x26c>
 8004864:	2301      	movs	r3, #1
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	4a35      	ldr	r2, [pc, #212]	; (8004940 <_printf_float+0x2e0>)
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af51 	beq.w	8004716 <_printf_float+0xb6>
 8004874:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004878:	429a      	cmp	r2, r3
 800487a:	db02      	blt.n	8004882 <_printf_float+0x222>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07d8      	lsls	r0, r3, #31
 8004880:	d50f      	bpl.n	80048a2 <_printf_float+0x242>
 8004882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f af42 	beq.w	8004716 <_printf_float+0xb6>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	f104 091a 	add.w	r9, r4, #26
 800489a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489c:	3b01      	subs	r3, #1
 800489e:	4543      	cmp	r3, r8
 80048a0:	dc09      	bgt.n	80048b6 <_printf_float+0x256>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	f100 8104 	bmi.w	8004ab2 <_printf_float+0x452>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e731      	b.n	800471a <_printf_float+0xba>
 80048b6:	2301      	movs	r3, #1
 80048b8:	464a      	mov	r2, r9
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af28 	beq.w	8004716 <_printf_float+0xb6>
 80048c6:	f108 0801 	add.w	r8, r8, #1
 80048ca:	e7e6      	b.n	800489a <_printf_float+0x23a>
 80048cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc38      	bgt.n	8004944 <_printf_float+0x2e4>
 80048d2:	2301      	movs	r3, #1
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <_printf_float+0x2e0>)
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	f43f af1a 	beq.w	8004716 <_printf_float+0xb6>
 80048e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d102      	bne.n	80048f0 <_printf_float+0x290>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	07d9      	lsls	r1, r3, #31
 80048ee:	d5d8      	bpl.n	80048a2 <_printf_float+0x242>
 80048f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f af0b 	beq.w	8004716 <_printf_float+0xb6>
 8004900:	f04f 0900 	mov.w	r9, #0
 8004904:	f104 0a1a 	add.w	sl, r4, #26
 8004908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800490a:	425b      	negs	r3, r3
 800490c:	454b      	cmp	r3, r9
 800490e:	dc01      	bgt.n	8004914 <_printf_float+0x2b4>
 8004910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004912:	e794      	b.n	800483e <_printf_float+0x1de>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4631      	mov	r1, r6
 800491a:	4628      	mov	r0, r5
 800491c:	47b8      	blx	r7
 800491e:	3001      	adds	r0, #1
 8004920:	f43f aef9 	beq.w	8004716 <_printf_float+0xb6>
 8004924:	f109 0901 	add.w	r9, r9, #1
 8004928:	e7ee      	b.n	8004908 <_printf_float+0x2a8>
 800492a:	bf00      	nop
 800492c:	7fefffff 	.word	0x7fefffff
 8004930:	08007356 	.word	0x08007356
 8004934:	0800735a 	.word	0x0800735a
 8004938:	0800735e 	.word	0x0800735e
 800493c:	08007362 	.word	0x08007362
 8004940:	08007366 	.word	0x08007366
 8004944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004948:	429a      	cmp	r2, r3
 800494a:	bfa8      	it	ge
 800494c:	461a      	movge	r2, r3
 800494e:	2a00      	cmp	r2, #0
 8004950:	4691      	mov	r9, r2
 8004952:	dc37      	bgt.n	80049c4 <_printf_float+0x364>
 8004954:	f04f 0b00 	mov.w	fp, #0
 8004958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800495c:	f104 021a 	add.w	r2, r4, #26
 8004960:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004964:	ebaa 0309 	sub.w	r3, sl, r9
 8004968:	455b      	cmp	r3, fp
 800496a:	dc33      	bgt.n	80049d4 <_printf_float+0x374>
 800496c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004970:	429a      	cmp	r2, r3
 8004972:	db3b      	blt.n	80049ec <_printf_float+0x38c>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	07da      	lsls	r2, r3, #31
 8004978:	d438      	bmi.n	80049ec <_printf_float+0x38c>
 800497a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800497e:	eba2 0903 	sub.w	r9, r2, r3
 8004982:	eba2 020a 	sub.w	r2, r2, sl
 8004986:	4591      	cmp	r9, r2
 8004988:	bfa8      	it	ge
 800498a:	4691      	movge	r9, r2
 800498c:	f1b9 0f00 	cmp.w	r9, #0
 8004990:	dc34      	bgt.n	80049fc <_printf_float+0x39c>
 8004992:	f04f 0800 	mov.w	r8, #0
 8004996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800499a:	f104 0a1a 	add.w	sl, r4, #26
 800499e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	eba3 0309 	sub.w	r3, r3, r9
 80049a8:	4543      	cmp	r3, r8
 80049aa:	f77f af7a 	ble.w	80048a2 <_printf_float+0x242>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4652      	mov	r2, sl
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f aeac 	beq.w	8004716 <_printf_float+0xb6>
 80049be:	f108 0801 	add.w	r8, r8, #1
 80049c2:	e7ec      	b.n	800499e <_printf_float+0x33e>
 80049c4:	4613      	mov	r3, r2
 80049c6:	4631      	mov	r1, r6
 80049c8:	4642      	mov	r2, r8
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	d1c0      	bne.n	8004954 <_printf_float+0x2f4>
 80049d2:	e6a0      	b.n	8004716 <_printf_float+0xb6>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	920b      	str	r2, [sp, #44]	; 0x2c
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f ae99 	beq.w	8004716 <_printf_float+0xb6>
 80049e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049e6:	f10b 0b01 	add.w	fp, fp, #1
 80049ea:	e7b9      	b.n	8004960 <_printf_float+0x300>
 80049ec:	4631      	mov	r1, r6
 80049ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	d1bf      	bne.n	800497a <_printf_float+0x31a>
 80049fa:	e68c      	b.n	8004716 <_printf_float+0xb6>
 80049fc:	464b      	mov	r3, r9
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	eb08 020a 	add.w	r2, r8, sl
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1c2      	bne.n	8004992 <_printf_float+0x332>
 8004a0c:	e683      	b.n	8004716 <_printf_float+0xb6>
 8004a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a10:	2a01      	cmp	r2, #1
 8004a12:	dc01      	bgt.n	8004a18 <_printf_float+0x3b8>
 8004a14:	07db      	lsls	r3, r3, #31
 8004a16:	d539      	bpl.n	8004a8c <_printf_float+0x42c>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	f43f ae77 	beq.w	8004716 <_printf_float+0xb6>
 8004a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f ae6f 	beq.w	8004716 <_printf_float+0xb6>
 8004a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004a44:	f7fc f864 	bl	8000b10 <__aeabi_dcmpeq>
 8004a48:	b9d8      	cbnz	r0, 8004a82 <_printf_float+0x422>
 8004a4a:	f109 33ff 	add.w	r3, r9, #4294967295
 8004a4e:	f108 0201 	add.w	r2, r8, #1
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d10e      	bne.n	8004a7a <_printf_float+0x41a>
 8004a5c:	e65b      	b.n	8004716 <_printf_float+0xb6>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	464a      	mov	r2, r9
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f ae54 	beq.w	8004716 <_printf_float+0xb6>
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a74:	3b01      	subs	r3, #1
 8004a76:	4543      	cmp	r3, r8
 8004a78:	dcf1      	bgt.n	8004a5e <_printf_float+0x3fe>
 8004a7a:	4653      	mov	r3, sl
 8004a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a80:	e6de      	b.n	8004840 <_printf_float+0x1e0>
 8004a82:	f04f 0800 	mov.w	r8, #0
 8004a86:	f104 091a 	add.w	r9, r4, #26
 8004a8a:	e7f2      	b.n	8004a72 <_printf_float+0x412>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4642      	mov	r2, r8
 8004a90:	e7df      	b.n	8004a52 <_printf_float+0x3f2>
 8004a92:	2301      	movs	r3, #1
 8004a94:	464a      	mov	r2, r9
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f ae3a 	beq.w	8004716 <_printf_float+0xb6>
 8004aa2:	f108 0801 	add.w	r8, r8, #1
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004aaa:	1a5b      	subs	r3, r3, r1
 8004aac:	4543      	cmp	r3, r8
 8004aae:	dcf0      	bgt.n	8004a92 <_printf_float+0x432>
 8004ab0:	e6fb      	b.n	80048aa <_printf_float+0x24a>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	f104 0919 	add.w	r9, r4, #25
 8004aba:	e7f4      	b.n	8004aa6 <_printf_float+0x446>

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfb8      	it	lt
 8004ace:	4613      	movlt	r3, r2
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc2b      	bgt.n	8004b5c <_printf_common+0xa0>
 8004b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b08:	1e13      	subs	r3, r2, #0
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d430      	bmi.n	8004b76 <_printf_common+0xba>
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d023      	beq.n	8004b6a <_printf_common+0xae>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf14      	ite	ne
 8004b2e:	2500      	movne	r5, #0
 8004b30:	6833      	ldreq	r3, [r6, #0]
 8004b32:	f04f 0600 	mov.w	r6, #0
 8004b36:	bf08      	it	eq
 8004b38:	68e5      	ldreq	r5, [r4, #12]
 8004b3a:	f104 041a 	add.w	r4, r4, #26
 8004b3e:	bf08      	it	eq
 8004b40:	1aed      	subeq	r5, r5, r3
 8004b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b46:	bf08      	it	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bfc4      	itt	gt
 8004b50:	1a9b      	subgt	r3, r3, r2
 8004b52:	18ed      	addgt	r5, r5, r3
 8004b54:	42b5      	cmp	r5, r6
 8004b56:	d11a      	bne.n	8004b8e <_printf_common+0xd2>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e008      	b.n	8004b6e <_printf_common+0xb2>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4652      	mov	r2, sl
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d103      	bne.n	8004b72 <_printf_common+0xb6>
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b72:	3501      	adds	r5, #1
 8004b74:	e7c1      	b.n	8004afa <_printf_common+0x3e>
 8004b76:	2030      	movs	r0, #48	; 0x30
 8004b78:	18e1      	adds	r1, r4, r3
 8004b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b84:	4422      	add	r2, r4
 8004b86:	3302      	adds	r3, #2
 8004b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b8c:	e7c2      	b.n	8004b14 <_printf_common+0x58>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4622      	mov	r2, r4
 8004b92:	4649      	mov	r1, r9
 8004b94:	4638      	mov	r0, r7
 8004b96:	47c0      	blx	r8
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d0e6      	beq.n	8004b6a <_printf_common+0xae>
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7d9      	b.n	8004b54 <_printf_common+0x98>

08004ba0 <_printf_i>:
 8004ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	7e0f      	ldrb	r7, [r1, #24]
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	2f78      	cmp	r7, #120	; 0x78
 8004baa:	4680      	mov	r8, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	469a      	mov	sl, r3
 8004bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb6:	d807      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bb8:	2f62      	cmp	r7, #98	; 0x62
 8004bba:	d80a      	bhi.n	8004bd2 <_printf_i+0x32>
 8004bbc:	2f00      	cmp	r7, #0
 8004bbe:	f000 80d5 	beq.w	8004d6c <_printf_i+0x1cc>
 8004bc2:	2f58      	cmp	r7, #88	; 0x58
 8004bc4:	f000 80c1 	beq.w	8004d4a <_printf_i+0x1aa>
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd0:	e03a      	b.n	8004c48 <_printf_i+0xa8>
 8004bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd6:	2b15      	cmp	r3, #21
 8004bd8:	d8f6      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bda:	a101      	add	r1, pc, #4	; (adr r1, 8004be0 <_printf_i+0x40>)
 8004bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004bc9 	.word	0x08004bc9
 8004bec:	08004bc9 	.word	0x08004bc9
 8004bf0:	08004bc9 	.word	0x08004bc9
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004bc9 	.word	0x08004bc9
 8004c00:	08004bc9 	.word	0x08004bc9
 8004c04:	08004bc9 	.word	0x08004bc9
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08004d53 	.word	0x08004d53
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004d0d 	.word	0x08004d0d
 8004c18:	08004bc9 	.word	0x08004bc9
 8004c1c:	08004bc9 	.word	0x08004bc9
 8004c20:	08004d75 	.word	0x08004d75
 8004c24:	08004bc9 	.word	0x08004bc9
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004bc9 	.word	0x08004bc9
 8004c30:	08004bc9 	.word	0x08004bc9
 8004c34:	08004d15 	.word	0x08004d15
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a0      	b.n	8004d8e <_printf_i+0x1ee>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	0607      	lsls	r7, r0, #24
 8004c52:	f103 0104 	add.w	r1, r3, #4
 8004c56:	6029      	str	r1, [r5, #0]
 8004c58:	d501      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c5a:	681e      	ldr	r6, [r3, #0]
 8004c5c:	e003      	b.n	8004c66 <_printf_i+0xc6>
 8004c5e:	0646      	lsls	r6, r0, #25
 8004c60:	d5fb      	bpl.n	8004c5a <_printf_i+0xba>
 8004c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c66:	2e00      	cmp	r6, #0
 8004c68:	da03      	bge.n	8004c72 <_printf_i+0xd2>
 8004c6a:	232d      	movs	r3, #45	; 0x2d
 8004c6c:	4276      	negs	r6, r6
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	230a      	movs	r3, #10
 8004c74:	4859      	ldr	r0, [pc, #356]	; (8004ddc <_printf_i+0x23c>)
 8004c76:	e012      	b.n	8004c9e <_printf_i+0xfe>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	0605      	lsls	r5, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xe8>
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <_printf_i+0xee>
 8004c88:	0641      	lsls	r1, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xe4>
 8004c8c:	881e      	ldrh	r6, [r3, #0]
 8004c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c90:	bf0c      	ite	eq
 8004c92:	2308      	moveq	r3, #8
 8004c94:	230a      	movne	r3, #10
 8004c96:	4851      	ldr	r0, [pc, #324]	; (8004ddc <_printf_i+0x23c>)
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9e:	6865      	ldr	r5, [r4, #4]
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	bfa8      	it	ge
 8004ca4:	6821      	ldrge	r1, [r4, #0]
 8004ca6:	60a5      	str	r5, [r4, #8]
 8004ca8:	bfa4      	itt	ge
 8004caa:	f021 0104 	bicge.w	r1, r1, #4
 8004cae:	6021      	strge	r1, [r4, #0]
 8004cb0:	b90e      	cbnz	r6, 8004cb6 <_printf_i+0x116>
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	d04b      	beq.n	8004d4e <_printf_i+0x1ae>
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc0:	5dc7      	ldrb	r7, [r0, r7]
 8004cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc6:	4637      	mov	r7, r6
 8004cc8:	42bb      	cmp	r3, r7
 8004cca:	460e      	mov	r6, r1
 8004ccc:	d9f4      	bls.n	8004cb8 <_printf_i+0x118>
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x14a>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07de      	lsls	r6, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x14a>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6861      	ldr	r1, [r4, #4]
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cea:	1b52      	subs	r2, r2, r5
 8004cec:	6122      	str	r2, [r4, #16]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f8cd a000 	str.w	sl, [sp]
 8004cf8:	aa03      	add	r2, sp, #12
 8004cfa:	f7ff fedf 	bl	8004abc <_printf_common>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d14a      	bne.n	8004d98 <_printf_i+0x1f8>
 8004d02:	f04f 30ff 	mov.w	r0, #4294967295
 8004d06:	b004      	add	sp, #16
 8004d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f043 0320 	orr.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2778      	movs	r7, #120	; 0x78
 8004d16:	4832      	ldr	r0, [pc, #200]	; (8004de0 <_printf_i+0x240>)
 8004d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	6829      	ldr	r1, [r5, #0]
 8004d20:	061f      	lsls	r7, r3, #24
 8004d22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d26:	d402      	bmi.n	8004d2e <_printf_i+0x18e>
 8004d28:	065f      	lsls	r7, r3, #25
 8004d2a:	bf48      	it	mi
 8004d2c:	b2b6      	uxthmi	r6, r6
 8004d2e:	07df      	lsls	r7, r3, #31
 8004d30:	bf48      	it	mi
 8004d32:	f043 0320 	orrmi.w	r3, r3, #32
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	bf48      	it	mi
 8004d3a:	6023      	strmi	r3, [r4, #0]
 8004d3c:	b91e      	cbnz	r6, 8004d46 <_printf_i+0x1a6>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f023 0320 	bic.w	r3, r3, #32
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	2310      	movs	r3, #16
 8004d48:	e7a6      	b.n	8004c98 <_printf_i+0xf8>
 8004d4a:	4824      	ldr	r0, [pc, #144]	; (8004ddc <_printf_i+0x23c>)
 8004d4c:	e7e4      	b.n	8004d18 <_printf_i+0x178>
 8004d4e:	4615      	mov	r5, r2
 8004d50:	e7bd      	b.n	8004cce <_printf_i+0x12e>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	6826      	ldr	r6, [r4, #0]
 8004d56:	1d18      	adds	r0, r3, #4
 8004d58:	6961      	ldr	r1, [r4, #20]
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	0635      	lsls	r5, r6, #24
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	d501      	bpl.n	8004d66 <_printf_i+0x1c6>
 8004d62:	6019      	str	r1, [r3, #0]
 8004d64:	e002      	b.n	8004d6c <_printf_i+0x1cc>
 8004d66:	0670      	lsls	r0, r6, #25
 8004d68:	d5fb      	bpl.n	8004d62 <_printf_i+0x1c2>
 8004d6a:	8019      	strh	r1, [r3, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4615      	mov	r5, r2
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	e7bc      	b.n	8004cee <_printf_i+0x14e>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	2100      	movs	r1, #0
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	602a      	str	r2, [r5, #0]
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f9c1 	bl	8005108 <memchr>
 8004d86:	b108      	cbz	r0, 8004d8c <_printf_i+0x1ec>
 8004d88:	1b40      	subs	r0, r0, r5
 8004d8a:	6060      	str	r0, [r4, #4]
 8004d8c:	6863      	ldr	r3, [r4, #4]
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	2300      	movs	r3, #0
 8004d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d96:	e7aa      	b.n	8004cee <_printf_i+0x14e>
 8004d98:	462a      	mov	r2, r5
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	47d0      	blx	sl
 8004da2:	3001      	adds	r0, #1
 8004da4:	d0ad      	beq.n	8004d02 <_printf_i+0x162>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	079b      	lsls	r3, r3, #30
 8004daa:	d413      	bmi.n	8004dd4 <_printf_i+0x234>
 8004dac:	68e0      	ldr	r0, [r4, #12]
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	4298      	cmp	r0, r3
 8004db2:	bfb8      	it	lt
 8004db4:	4618      	movlt	r0, r3
 8004db6:	e7a6      	b.n	8004d06 <_printf_i+0x166>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4632      	mov	r2, r6
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	47d0      	blx	sl
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d09d      	beq.n	8004d02 <_printf_i+0x162>
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	68e3      	ldr	r3, [r4, #12]
 8004dca:	9903      	ldr	r1, [sp, #12]
 8004dcc:	1a5b      	subs	r3, r3, r1
 8004dce:	42ab      	cmp	r3, r5
 8004dd0:	dcf2      	bgt.n	8004db8 <_printf_i+0x218>
 8004dd2:	e7eb      	b.n	8004dac <_printf_i+0x20c>
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	f104 0619 	add.w	r6, r4, #25
 8004dda:	e7f5      	b.n	8004dc8 <_printf_i+0x228>
 8004ddc:	08007368 	.word	0x08007368
 8004de0:	08007379 	.word	0x08007379

08004de4 <std>:
 8004de4:	2300      	movs	r3, #0
 8004de6:	b510      	push	{r4, lr}
 8004de8:	4604      	mov	r4, r0
 8004dea:	e9c0 3300 	strd	r3, r3, [r0]
 8004dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004df2:	6083      	str	r3, [r0, #8]
 8004df4:	8181      	strh	r1, [r0, #12]
 8004df6:	6643      	str	r3, [r0, #100]	; 0x64
 8004df8:	81c2      	strh	r2, [r0, #14]
 8004dfa:	6183      	str	r3, [r0, #24]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	2208      	movs	r2, #8
 8004e00:	305c      	adds	r0, #92	; 0x5c
 8004e02:	f000 f902 	bl	800500a <memset>
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <std+0x38>)
 8004e08:	6224      	str	r4, [r4, #32]
 8004e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <std+0x3c>)
 8004e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <std+0x40>)
 8004e12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e14:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <std+0x44>)
 8004e16:	6323      	str	r3, [r4, #48]	; 0x30
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08004f85 	.word	0x08004f85
 8004e20:	08004fa7 	.word	0x08004fa7
 8004e24:	08004fdf 	.word	0x08004fdf
 8004e28:	08005003 	.word	0x08005003

08004e2c <stdio_exit_handler>:
 8004e2c:	4a02      	ldr	r2, [pc, #8]	; (8004e38 <stdio_exit_handler+0xc>)
 8004e2e:	4903      	ldr	r1, [pc, #12]	; (8004e3c <stdio_exit_handler+0x10>)
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <stdio_exit_handler+0x14>)
 8004e32:	f000 b869 	b.w	8004f08 <_fwalk_sglue>
 8004e36:	bf00      	nop
 8004e38:	2000001c 	.word	0x2000001c
 8004e3c:	08006a9d 	.word	0x08006a9d
 8004e40:	20000028 	.word	0x20000028

08004e44 <cleanup_stdio>:
 8004e44:	6841      	ldr	r1, [r0, #4]
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <cleanup_stdio+0x34>)
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	d001      	beq.n	8004e54 <cleanup_stdio+0x10>
 8004e50:	f001 fe24 	bl	8006a9c <_fflush_r>
 8004e54:	68a1      	ldr	r1, [r4, #8]
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <cleanup_stdio+0x38>)
 8004e58:	4299      	cmp	r1, r3
 8004e5a:	d002      	beq.n	8004e62 <cleanup_stdio+0x1e>
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f001 fe1d 	bl	8006a9c <_fflush_r>
 8004e62:	68e1      	ldr	r1, [r4, #12]
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <cleanup_stdio+0x3c>)
 8004e66:	4299      	cmp	r1, r3
 8004e68:	d004      	beq.n	8004e74 <cleanup_stdio+0x30>
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e70:	f001 be14 	b.w	8006a9c <_fflush_r>
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	200002ec 	.word	0x200002ec
 8004e7c:	20000354 	.word	0x20000354
 8004e80:	200003bc 	.word	0x200003bc

08004e84 <global_stdio_init.part.0>:
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <global_stdio_init.part.0+0x30>)
 8004e88:	4c0b      	ldr	r4, [pc, #44]	; (8004eb8 <global_stdio_init.part.0+0x34>)
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <global_stdio_init.part.0+0x38>)
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	2104      	movs	r1, #4
 8004e92:	2200      	movs	r2, #0
 8004e94:	f7ff ffa6 	bl	8004de4 <std>
 8004e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2109      	movs	r1, #9
 8004ea0:	f7ff ffa0 	bl	8004de4 <std>
 8004ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eae:	2112      	movs	r1, #18
 8004eb0:	f7ff bf98 	b.w	8004de4 <std>
 8004eb4:	20000424 	.word	0x20000424
 8004eb8:	200002ec 	.word	0x200002ec
 8004ebc:	08004e2d 	.word	0x08004e2d

08004ec0 <__sfp_lock_acquire>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__sfp_lock_acquire+0x8>)
 8004ec2:	f000 b91f 	b.w	8005104 <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	2000042d 	.word	0x2000042d

08004ecc <__sfp_lock_release>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sfp_lock_release+0x8>)
 8004ece:	f000 b91a 	b.w	8005106 <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	2000042d 	.word	0x2000042d

08004ed8 <__sinit>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4604      	mov	r4, r0
 8004edc:	f7ff fff0 	bl	8004ec0 <__sfp_lock_acquire>
 8004ee0:	6a23      	ldr	r3, [r4, #32]
 8004ee2:	b11b      	cbz	r3, 8004eec <__sinit+0x14>
 8004ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee8:	f7ff bff0 	b.w	8004ecc <__sfp_lock_release>
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <__sinit+0x28>)
 8004eee:	6223      	str	r3, [r4, #32]
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <__sinit+0x2c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f5      	bne.n	8004ee4 <__sinit+0xc>
 8004ef8:	f7ff ffc4 	bl	8004e84 <global_stdio_init.part.0>
 8004efc:	e7f2      	b.n	8004ee4 <__sinit+0xc>
 8004efe:	bf00      	nop
 8004f00:	08004e45 	.word	0x08004e45
 8004f04:	20000424 	.word	0x20000424

08004f08 <_fwalk_sglue>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	4688      	mov	r8, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	2600      	movs	r6, #0
 8004f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f18:	f1b9 0901 	subs.w	r9, r9, #1
 8004f1c:	d505      	bpl.n	8004f2a <_fwalk_sglue+0x22>
 8004f1e:	6824      	ldr	r4, [r4, #0]
 8004f20:	2c00      	cmp	r4, #0
 8004f22:	d1f7      	bne.n	8004f14 <_fwalk_sglue+0xc>
 8004f24:	4630      	mov	r0, r6
 8004f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d907      	bls.n	8004f40 <_fwalk_sglue+0x38>
 8004f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f34:	3301      	adds	r3, #1
 8004f36:	d003      	beq.n	8004f40 <_fwalk_sglue+0x38>
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c0      	blx	r8
 8004f3e:	4306      	orrs	r6, r0
 8004f40:	3568      	adds	r5, #104	; 0x68
 8004f42:	e7e9      	b.n	8004f18 <_fwalk_sglue+0x10>

08004f44 <siprintf>:
 8004f44:	b40e      	push	{r1, r2, r3}
 8004f46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f4a:	b500      	push	{lr}
 8004f4c:	b09c      	sub	sp, #112	; 0x70
 8004f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f50:	9002      	str	r0, [sp, #8]
 8004f52:	9006      	str	r0, [sp, #24]
 8004f54:	9107      	str	r1, [sp, #28]
 8004f56:	9104      	str	r1, [sp, #16]
 8004f58:	4808      	ldr	r0, [pc, #32]	; (8004f7c <siprintf+0x38>)
 8004f5a:	4909      	ldr	r1, [pc, #36]	; (8004f80 <siprintf+0x3c>)
 8004f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	a902      	add	r1, sp, #8
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	f001 fc18 	bl	800679c <_svfiprintf_r>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	9b02      	ldr	r3, [sp, #8]
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	b01c      	add	sp, #112	; 0x70
 8004f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f78:	b003      	add	sp, #12
 8004f7a:	4770      	bx	lr
 8004f7c:	20000074 	.word	0x20000074
 8004f80:	ffff0208 	.word	0xffff0208

08004f84 <__sread>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	f000 f86c 	bl	8005068 <_read_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	bfab      	itete	ge
 8004f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f96:	89a3      	ldrhlt	r3, [r4, #12]
 8004f98:	181b      	addge	r3, r3, r0
 8004f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f9e:	bfac      	ite	ge
 8004fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fa2:	81a3      	strhlt	r3, [r4, #12]
 8004fa4:	bd10      	pop	{r4, pc}

08004fa6 <__swrite>:
 8004fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	461f      	mov	r7, r3
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	4605      	mov	r5, r0
 8004fb0:	05db      	lsls	r3, r3, #23
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	d505      	bpl.n	8004fc4 <__swrite+0x1e>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	f000 f840 	bl	8005044 <_lseek_r>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	f000 b857 	b.w	800508c <_write_r>

08004fde <__sseek>:
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 f82d 	bl	8005044 <_lseek_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	bf15      	itete	ne
 8004ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ffa:	81a3      	strheq	r3, [r4, #12]
 8004ffc:	bf18      	it	ne
 8004ffe:	81a3      	strhne	r3, [r4, #12]
 8005000:	bd10      	pop	{r4, pc}

08005002 <__sclose>:
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 b80d 	b.w	8005024 <_close_r>

0800500a <memset>:
 800500a:	4603      	mov	r3, r0
 800500c:	4402      	add	r2, r0
 800500e:	4293      	cmp	r3, r2
 8005010:	d100      	bne.n	8005014 <memset+0xa>
 8005012:	4770      	bx	lr
 8005014:	f803 1b01 	strb.w	r1, [r3], #1
 8005018:	e7f9      	b.n	800500e <memset+0x4>
	...

0800501c <_localeconv_r>:
 800501c:	4800      	ldr	r0, [pc, #0]	; (8005020 <_localeconv_r+0x4>)
 800501e:	4770      	bx	lr
 8005020:	20000168 	.word	0x20000168

08005024 <_close_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	2300      	movs	r3, #0
 8005028:	4d05      	ldr	r5, [pc, #20]	; (8005040 <_close_r+0x1c>)
 800502a:	4604      	mov	r4, r0
 800502c:	4608      	mov	r0, r1
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	f7fd f83f 	bl	80020b2 <_close>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_close_r+0x1a>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_close_r+0x1a>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	20000428 	.word	0x20000428

08005044 <_lseek_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	2200      	movs	r2, #0
 800504e:	4d05      	ldr	r5, [pc, #20]	; (8005064 <_lseek_r+0x20>)
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fd f851 	bl	80020fa <_lseek>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_lseek_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_lseek_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000428 	.word	0x20000428

08005068 <_read_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	4611      	mov	r1, r2
 8005070:	2200      	movs	r2, #0
 8005072:	4d05      	ldr	r5, [pc, #20]	; (8005088 <_read_r+0x20>)
 8005074:	602a      	str	r2, [r5, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	f7fc ffe2 	bl	8002040 <_read>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_read_r+0x1e>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_read_r+0x1e>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	20000428 	.word	0x20000428

0800508c <_write_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	2200      	movs	r2, #0
 8005096:	4d05      	ldr	r5, [pc, #20]	; (80050ac <_write_r+0x20>)
 8005098:	602a      	str	r2, [r5, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fc ffed 	bl	800207a <_write>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_write_r+0x1e>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_write_r+0x1e>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000428 	.word	0x20000428

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000074 	.word	0x20000074

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	2600      	movs	r6, #0
 80050c0:	4d0c      	ldr	r5, [pc, #48]	; (80050f4 <__libc_init_array+0x38>)
 80050c2:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	f002 f908 	bl	80072e0 <_init>
 80050d0:	2600      	movs	r6, #0
 80050d2:	4d0a      	ldr	r5, [pc, #40]	; (80050fc <__libc_init_array+0x40>)
 80050d4:	4c0a      	ldr	r4, [pc, #40]	; (8005100 <__libc_init_array+0x44>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	080076c4 	.word	0x080076c4
 80050f8:	080076c4 	.word	0x080076c4
 80050fc:	080076c4 	.word	0x080076c4
 8005100:	080076c8 	.word	0x080076c8

08005104 <__retarget_lock_acquire_recursive>:
 8005104:	4770      	bx	lr

08005106 <__retarget_lock_release_recursive>:
 8005106:	4770      	bx	lr

08005108 <memchr>:
 8005108:	4603      	mov	r3, r0
 800510a:	b510      	push	{r4, lr}
 800510c:	b2c9      	uxtb	r1, r1
 800510e:	4402      	add	r2, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	4618      	mov	r0, r3
 8005114:	d101      	bne.n	800511a <memchr+0x12>
 8005116:	2000      	movs	r0, #0
 8005118:	e003      	b.n	8005122 <memchr+0x1a>
 800511a:	7804      	ldrb	r4, [r0, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	428c      	cmp	r4, r1
 8005120:	d1f6      	bne.n	8005110 <memchr+0x8>
 8005122:	bd10      	pop	{r4, pc}

08005124 <quorem>:
 8005124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	6903      	ldr	r3, [r0, #16]
 800512a:	690c      	ldr	r4, [r1, #16]
 800512c:	4607      	mov	r7, r0
 800512e:	42a3      	cmp	r3, r4
 8005130:	db7f      	blt.n	8005232 <quorem+0x10e>
 8005132:	3c01      	subs	r4, #1
 8005134:	f100 0514 	add.w	r5, r0, #20
 8005138:	f101 0814 	add.w	r8, r1, #20
 800513c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005146:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800514a:	3301      	adds	r3, #1
 800514c:	429a      	cmp	r2, r3
 800514e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005152:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005156:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800515a:	d331      	bcc.n	80051c0 <quorem+0x9c>
 800515c:	f04f 0e00 	mov.w	lr, #0
 8005160:	4640      	mov	r0, r8
 8005162:	46ac      	mov	ip, r5
 8005164:	46f2      	mov	sl, lr
 8005166:	f850 2b04 	ldr.w	r2, [r0], #4
 800516a:	b293      	uxth	r3, r2
 800516c:	fb06 e303 	mla	r3, r6, r3, lr
 8005170:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005174:	0c1a      	lsrs	r2, r3, #16
 8005176:	b29b      	uxth	r3, r3
 8005178:	fb06 220e 	mla	r2, r6, lr, r2
 800517c:	ebaa 0303 	sub.w	r3, sl, r3
 8005180:	f8dc a000 	ldr.w	sl, [ip]
 8005184:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005188:	fa1f fa8a 	uxth.w	sl, sl
 800518c:	4453      	add	r3, sl
 800518e:	f8dc a000 	ldr.w	sl, [ip]
 8005192:	b292      	uxth	r2, r2
 8005194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051a2:	4581      	cmp	r9, r0
 80051a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051a8:	f84c 3b04 	str.w	r3, [ip], #4
 80051ac:	d2db      	bcs.n	8005166 <quorem+0x42>
 80051ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80051b2:	b92b      	cbnz	r3, 80051c0 <quorem+0x9c>
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	3b04      	subs	r3, #4
 80051b8:	429d      	cmp	r5, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	d32d      	bcc.n	800521a <quorem+0xf6>
 80051be:	613c      	str	r4, [r7, #16]
 80051c0:	4638      	mov	r0, r7
 80051c2:	f001 f993 	bl	80064ec <__mcmp>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	db23      	blt.n	8005212 <quorem+0xee>
 80051ca:	4629      	mov	r1, r5
 80051cc:	2000      	movs	r0, #0
 80051ce:	3601      	adds	r6, #1
 80051d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80051d4:	f8d1 c000 	ldr.w	ip, [r1]
 80051d8:	b293      	uxth	r3, r2
 80051da:	1ac3      	subs	r3, r0, r3
 80051dc:	0c12      	lsrs	r2, r2, #16
 80051de:	fa1f f08c 	uxth.w	r0, ip
 80051e2:	4403      	add	r3, r0
 80051e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80051e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051f2:	45c1      	cmp	r9, r8
 80051f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051f8:	f841 3b04 	str.w	r3, [r1], #4
 80051fc:	d2e8      	bcs.n	80051d0 <quorem+0xac>
 80051fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005206:	b922      	cbnz	r2, 8005212 <quorem+0xee>
 8005208:	3b04      	subs	r3, #4
 800520a:	429d      	cmp	r5, r3
 800520c:	461a      	mov	r2, r3
 800520e:	d30a      	bcc.n	8005226 <quorem+0x102>
 8005210:	613c      	str	r4, [r7, #16]
 8005212:	4630      	mov	r0, r6
 8005214:	b003      	add	sp, #12
 8005216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	3b04      	subs	r3, #4
 800521e:	2a00      	cmp	r2, #0
 8005220:	d1cd      	bne.n	80051be <quorem+0x9a>
 8005222:	3c01      	subs	r4, #1
 8005224:	e7c8      	b.n	80051b8 <quorem+0x94>
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	3b04      	subs	r3, #4
 800522a:	2a00      	cmp	r2, #0
 800522c:	d1f0      	bne.n	8005210 <quorem+0xec>
 800522e:	3c01      	subs	r4, #1
 8005230:	e7eb      	b.n	800520a <quorem+0xe6>
 8005232:	2000      	movs	r0, #0
 8005234:	e7ee      	b.n	8005214 <quorem+0xf0>
	...

08005238 <_dtoa_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	461f      	mov	r7, r3
 8005240:	69c4      	ldr	r4, [r0, #28]
 8005242:	b099      	sub	sp, #100	; 0x64
 8005244:	4605      	mov	r5, r0
 8005246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800524a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800524e:	b974      	cbnz	r4, 800526e <_dtoa_r+0x36>
 8005250:	2010      	movs	r0, #16
 8005252:	f000 fe1d 	bl	8005e90 <malloc>
 8005256:	4602      	mov	r2, r0
 8005258:	61e8      	str	r0, [r5, #28]
 800525a:	b920      	cbnz	r0, 8005266 <_dtoa_r+0x2e>
 800525c:	21ef      	movs	r1, #239	; 0xef
 800525e:	4bac      	ldr	r3, [pc, #688]	; (8005510 <_dtoa_r+0x2d8>)
 8005260:	48ac      	ldr	r0, [pc, #688]	; (8005514 <_dtoa_r+0x2dc>)
 8005262:	f001 fc7b 	bl	8006b5c <__assert_func>
 8005266:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800526a:	6004      	str	r4, [r0, #0]
 800526c:	60c4      	str	r4, [r0, #12]
 800526e:	69eb      	ldr	r3, [r5, #28]
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	b151      	cbz	r1, 800528a <_dtoa_r+0x52>
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	2301      	movs	r3, #1
 8005278:	4093      	lsls	r3, r2
 800527a:	604a      	str	r2, [r1, #4]
 800527c:	608b      	str	r3, [r1, #8]
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fefa 	bl	8006078 <_Bfree>
 8005284:	2200      	movs	r2, #0
 8005286:	69eb      	ldr	r3, [r5, #28]
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	1e3b      	subs	r3, r7, #0
 800528c:	bfaf      	iteee	ge
 800528e:	2300      	movge	r3, #0
 8005290:	2201      	movlt	r2, #1
 8005292:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005296:	9305      	strlt	r3, [sp, #20]
 8005298:	bfa8      	it	ge
 800529a:	f8c8 3000 	strge.w	r3, [r8]
 800529e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052a2:	4b9d      	ldr	r3, [pc, #628]	; (8005518 <_dtoa_r+0x2e0>)
 80052a4:	bfb8      	it	lt
 80052a6:	f8c8 2000 	strlt.w	r2, [r8]
 80052aa:	ea33 0309 	bics.w	r3, r3, r9
 80052ae:	d119      	bne.n	80052e4 <_dtoa_r+0xac>
 80052b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052bc:	4333      	orrs	r3, r6
 80052be:	f000 8589 	beq.w	8005dd4 <_dtoa_r+0xb9c>
 80052c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052c4:	b953      	cbnz	r3, 80052dc <_dtoa_r+0xa4>
 80052c6:	4b95      	ldr	r3, [pc, #596]	; (800551c <_dtoa_r+0x2e4>)
 80052c8:	e023      	b.n	8005312 <_dtoa_r+0xda>
 80052ca:	4b95      	ldr	r3, [pc, #596]	; (8005520 <_dtoa_r+0x2e8>)
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	3308      	adds	r3, #8
 80052d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	9803      	ldr	r0, [sp, #12]
 80052d6:	b019      	add	sp, #100	; 0x64
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	4b8f      	ldr	r3, [pc, #572]	; (800551c <_dtoa_r+0x2e4>)
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	3303      	adds	r3, #3
 80052e2:	e7f5      	b.n	80052d0 <_dtoa_r+0x98>
 80052e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80052ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f7fb fc0c 	bl	8000b10 <__aeabi_dcmpeq>
 80052f8:	4680      	mov	r8, r0
 80052fa:	b160      	cbz	r0, 8005316 <_dtoa_r+0xde>
 80052fc:	2301      	movs	r3, #1
 80052fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8562 	beq.w	8005dce <_dtoa_r+0xb96>
 800530a:	4b86      	ldr	r3, [pc, #536]	; (8005524 <_dtoa_r+0x2ec>)
 800530c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	3b01      	subs	r3, #1
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	e7de      	b.n	80052d4 <_dtoa_r+0x9c>
 8005316:	ab16      	add	r3, sp, #88	; 0x58
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	ab17      	add	r3, sp, #92	; 0x5c
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4628      	mov	r0, r5
 8005320:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005324:	f001 f98a 	bl	800663c <__d2b>
 8005328:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800532c:	4682      	mov	sl, r0
 800532e:	2c00      	cmp	r4, #0
 8005330:	d07e      	beq.n	8005430 <_dtoa_r+0x1f8>
 8005332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005338:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800533c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005340:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005344:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005348:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800534c:	4619      	mov	r1, r3
 800534e:	2200      	movs	r2, #0
 8005350:	4b75      	ldr	r3, [pc, #468]	; (8005528 <_dtoa_r+0x2f0>)
 8005352:	f7fa ffbd 	bl	80002d0 <__aeabi_dsub>
 8005356:	a368      	add	r3, pc, #416	; (adr r3, 80054f8 <_dtoa_r+0x2c0>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f970 	bl	8000640 <__aeabi_dmul>
 8005360:	a367      	add	r3, pc, #412	; (adr r3, 8005500 <_dtoa_r+0x2c8>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fa ffb5 	bl	80002d4 <__adddf3>
 800536a:	4606      	mov	r6, r0
 800536c:	4620      	mov	r0, r4
 800536e:	460f      	mov	r7, r1
 8005370:	f7fb f8fc 	bl	800056c <__aeabi_i2d>
 8005374:	a364      	add	r3, pc, #400	; (adr r3, 8005508 <_dtoa_r+0x2d0>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb f961 	bl	8000640 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fa ffa5 	bl	80002d4 <__adddf3>
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	f7fb fc07 	bl	8000ba0 <__aeabi_d2iz>
 8005392:	2200      	movs	r2, #0
 8005394:	4683      	mov	fp, r0
 8005396:	2300      	movs	r3, #0
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb fbc2 	bl	8000b24 <__aeabi_dcmplt>
 80053a0:	b148      	cbz	r0, 80053b6 <_dtoa_r+0x17e>
 80053a2:	4658      	mov	r0, fp
 80053a4:	f7fb f8e2 	bl	800056c <__aeabi_i2d>
 80053a8:	4632      	mov	r2, r6
 80053aa:	463b      	mov	r3, r7
 80053ac:	f7fb fbb0 	bl	8000b10 <__aeabi_dcmpeq>
 80053b0:	b908      	cbnz	r0, 80053b6 <_dtoa_r+0x17e>
 80053b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053b6:	f1bb 0f16 	cmp.w	fp, #22
 80053ba:	d857      	bhi.n	800546c <_dtoa_r+0x234>
 80053bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053c0:	4b5a      	ldr	r3, [pc, #360]	; (800552c <_dtoa_r+0x2f4>)
 80053c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fb fbab 	bl	8000b24 <__aeabi_dcmplt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d04e      	beq.n	8005470 <_dtoa_r+0x238>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80053da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053dc:	1b1b      	subs	r3, r3, r4
 80053de:	1e5a      	subs	r2, r3, #1
 80053e0:	bf46      	itte	mi
 80053e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80053e6:	2300      	movmi	r3, #0
 80053e8:	f04f 0900 	movpl.w	r9, #0
 80053ec:	9209      	str	r2, [sp, #36]	; 0x24
 80053ee:	bf48      	it	mi
 80053f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80053f2:	f1bb 0f00 	cmp.w	fp, #0
 80053f6:	db3d      	blt.n	8005474 <_dtoa_r+0x23c>
 80053f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80053fe:	445b      	add	r3, fp
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	2300      	movs	r3, #0
 8005404:	930a      	str	r3, [sp, #40]	; 0x28
 8005406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005408:	2b09      	cmp	r3, #9
 800540a:	d867      	bhi.n	80054dc <_dtoa_r+0x2a4>
 800540c:	2b05      	cmp	r3, #5
 800540e:	bfc4      	itt	gt
 8005410:	3b04      	subgt	r3, #4
 8005412:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005416:	bfc8      	it	gt
 8005418:	2400      	movgt	r4, #0
 800541a:	f1a3 0302 	sub.w	r3, r3, #2
 800541e:	bfd8      	it	le
 8005420:	2401      	movle	r4, #1
 8005422:	2b03      	cmp	r3, #3
 8005424:	f200 8086 	bhi.w	8005534 <_dtoa_r+0x2fc>
 8005428:	e8df f003 	tbb	[pc, r3]
 800542c:	5637392c 	.word	0x5637392c
 8005430:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005434:	441c      	add	r4, r3
 8005436:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800543a:	2b20      	cmp	r3, #32
 800543c:	bfc1      	itttt	gt
 800543e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005442:	fa09 f903 	lslgt.w	r9, r9, r3
 8005446:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800544a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800544e:	bfd6      	itet	le
 8005450:	f1c3 0320 	rsble	r3, r3, #32
 8005454:	ea49 0003 	orrgt.w	r0, r9, r3
 8005458:	fa06 f003 	lslle.w	r0, r6, r3
 800545c:	f7fb f876 	bl	800054c <__aeabi_ui2d>
 8005460:	2201      	movs	r2, #1
 8005462:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005466:	3c01      	subs	r4, #1
 8005468:	9213      	str	r2, [sp, #76]	; 0x4c
 800546a:	e76f      	b.n	800534c <_dtoa_r+0x114>
 800546c:	2301      	movs	r3, #1
 800546e:	e7b3      	b.n	80053d8 <_dtoa_r+0x1a0>
 8005470:	900f      	str	r0, [sp, #60]	; 0x3c
 8005472:	e7b2      	b.n	80053da <_dtoa_r+0x1a2>
 8005474:	f1cb 0300 	rsb	r3, fp, #0
 8005478:	930a      	str	r3, [sp, #40]	; 0x28
 800547a:	2300      	movs	r3, #0
 800547c:	eba9 090b 	sub.w	r9, r9, fp
 8005480:	930e      	str	r3, [sp, #56]	; 0x38
 8005482:	e7c0      	b.n	8005406 <_dtoa_r+0x1ce>
 8005484:	2300      	movs	r3, #0
 8005486:	930b      	str	r3, [sp, #44]	; 0x2c
 8005488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800548a:	2b00      	cmp	r3, #0
 800548c:	dc55      	bgt.n	800553a <_dtoa_r+0x302>
 800548e:	2301      	movs	r3, #1
 8005490:	461a      	mov	r2, r3
 8005492:	9306      	str	r3, [sp, #24]
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	9223      	str	r2, [sp, #140]	; 0x8c
 8005498:	e00b      	b.n	80054b2 <_dtoa_r+0x27a>
 800549a:	2301      	movs	r3, #1
 800549c:	e7f3      	b.n	8005486 <_dtoa_r+0x24e>
 800549e:	2300      	movs	r3, #0
 80054a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80054a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054a4:	445b      	add	r3, fp
 80054a6:	9306      	str	r3, [sp, #24]
 80054a8:	3301      	adds	r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	9308      	str	r3, [sp, #32]
 80054ae:	bfb8      	it	lt
 80054b0:	2301      	movlt	r3, #1
 80054b2:	2100      	movs	r1, #0
 80054b4:	2204      	movs	r2, #4
 80054b6:	69e8      	ldr	r0, [r5, #28]
 80054b8:	f102 0614 	add.w	r6, r2, #20
 80054bc:	429e      	cmp	r6, r3
 80054be:	d940      	bls.n	8005542 <_dtoa_r+0x30a>
 80054c0:	6041      	str	r1, [r0, #4]
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fd98 	bl	8005ff8 <_Balloc>
 80054c8:	9003      	str	r0, [sp, #12]
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d13c      	bne.n	8005548 <_dtoa_r+0x310>
 80054ce:	4602      	mov	r2, r0
 80054d0:	f240 11af 	movw	r1, #431	; 0x1af
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <_dtoa_r+0x2f8>)
 80054d6:	e6c3      	b.n	8005260 <_dtoa_r+0x28>
 80054d8:	2301      	movs	r3, #1
 80054da:	e7e1      	b.n	80054a0 <_dtoa_r+0x268>
 80054dc:	2401      	movs	r4, #1
 80054de:	2300      	movs	r3, #0
 80054e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80054e2:	9322      	str	r3, [sp, #136]	; 0x88
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	2200      	movs	r2, #0
 80054ea:	9306      	str	r3, [sp, #24]
 80054ec:	9308      	str	r3, [sp, #32]
 80054ee:	2312      	movs	r3, #18
 80054f0:	e7d1      	b.n	8005496 <_dtoa_r+0x25e>
 80054f2:	bf00      	nop
 80054f4:	f3af 8000 	nop.w
 80054f8:	636f4361 	.word	0x636f4361
 80054fc:	3fd287a7 	.word	0x3fd287a7
 8005500:	8b60c8b3 	.word	0x8b60c8b3
 8005504:	3fc68a28 	.word	0x3fc68a28
 8005508:	509f79fb 	.word	0x509f79fb
 800550c:	3fd34413 	.word	0x3fd34413
 8005510:	08007397 	.word	0x08007397
 8005514:	080073ae 	.word	0x080073ae
 8005518:	7ff00000 	.word	0x7ff00000
 800551c:	08007393 	.word	0x08007393
 8005520:	0800738a 	.word	0x0800738a
 8005524:	08007367 	.word	0x08007367
 8005528:	3ff80000 	.word	0x3ff80000
 800552c:	08007498 	.word	0x08007498
 8005530:	08007406 	.word	0x08007406
 8005534:	2301      	movs	r3, #1
 8005536:	930b      	str	r3, [sp, #44]	; 0x2c
 8005538:	e7d4      	b.n	80054e4 <_dtoa_r+0x2ac>
 800553a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800553c:	9306      	str	r3, [sp, #24]
 800553e:	9308      	str	r3, [sp, #32]
 8005540:	e7b7      	b.n	80054b2 <_dtoa_r+0x27a>
 8005542:	3101      	adds	r1, #1
 8005544:	0052      	lsls	r2, r2, #1
 8005546:	e7b7      	b.n	80054b8 <_dtoa_r+0x280>
 8005548:	69eb      	ldr	r3, [r5, #28]
 800554a:	9a03      	ldr	r2, [sp, #12]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	9b08      	ldr	r3, [sp, #32]
 8005550:	2b0e      	cmp	r3, #14
 8005552:	f200 80a8 	bhi.w	80056a6 <_dtoa_r+0x46e>
 8005556:	2c00      	cmp	r4, #0
 8005558:	f000 80a5 	beq.w	80056a6 <_dtoa_r+0x46e>
 800555c:	f1bb 0f00 	cmp.w	fp, #0
 8005560:	dd34      	ble.n	80055cc <_dtoa_r+0x394>
 8005562:	4b9a      	ldr	r3, [pc, #616]	; (80057cc <_dtoa_r+0x594>)
 8005564:	f00b 020f 	and.w	r2, fp, #15
 8005568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800556c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005570:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005574:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005578:	ea4f 142b 	mov.w	r4, fp, asr #4
 800557c:	d016      	beq.n	80055ac <_dtoa_r+0x374>
 800557e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005582:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <_dtoa_r+0x598>)
 8005584:	2703      	movs	r7, #3
 8005586:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800558a:	f7fb f983 	bl	8000894 <__aeabi_ddiv>
 800558e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005592:	f004 040f 	and.w	r4, r4, #15
 8005596:	4e8e      	ldr	r6, [pc, #568]	; (80057d0 <_dtoa_r+0x598>)
 8005598:	b954      	cbnz	r4, 80055b0 <_dtoa_r+0x378>
 800559a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800559e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a2:	f7fb f977 	bl	8000894 <__aeabi_ddiv>
 80055a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055aa:	e029      	b.n	8005600 <_dtoa_r+0x3c8>
 80055ac:	2702      	movs	r7, #2
 80055ae:	e7f2      	b.n	8005596 <_dtoa_r+0x35e>
 80055b0:	07e1      	lsls	r1, r4, #31
 80055b2:	d508      	bpl.n	80055c6 <_dtoa_r+0x38e>
 80055b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055bc:	f7fb f840 	bl	8000640 <__aeabi_dmul>
 80055c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055c4:	3701      	adds	r7, #1
 80055c6:	1064      	asrs	r4, r4, #1
 80055c8:	3608      	adds	r6, #8
 80055ca:	e7e5      	b.n	8005598 <_dtoa_r+0x360>
 80055cc:	f000 80a5 	beq.w	800571a <_dtoa_r+0x4e2>
 80055d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055d4:	f1cb 0400 	rsb	r4, fp, #0
 80055d8:	4b7c      	ldr	r3, [pc, #496]	; (80057cc <_dtoa_r+0x594>)
 80055da:	f004 020f 	and.w	r2, r4, #15
 80055de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fb f82b 	bl	8000640 <__aeabi_dmul>
 80055ea:	2702      	movs	r7, #2
 80055ec:	2300      	movs	r3, #0
 80055ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f2:	4e77      	ldr	r6, [pc, #476]	; (80057d0 <_dtoa_r+0x598>)
 80055f4:	1124      	asrs	r4, r4, #4
 80055f6:	2c00      	cmp	r4, #0
 80055f8:	f040 8084 	bne.w	8005704 <_dtoa_r+0x4cc>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1d2      	bne.n	80055a6 <_dtoa_r+0x36e>
 8005600:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005604:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8087 	beq.w	800571e <_dtoa_r+0x4e6>
 8005610:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005614:	2200      	movs	r2, #0
 8005616:	4b6f      	ldr	r3, [pc, #444]	; (80057d4 <_dtoa_r+0x59c>)
 8005618:	f7fb fa84 	bl	8000b24 <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	d07e      	beq.n	800571e <_dtoa_r+0x4e6>
 8005620:	9b08      	ldr	r3, [sp, #32]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d07b      	beq.n	800571e <_dtoa_r+0x4e6>
 8005626:	9b06      	ldr	r3, [sp, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	dd38      	ble.n	800569e <_dtoa_r+0x466>
 800562c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005630:	2200      	movs	r2, #0
 8005632:	4b69      	ldr	r3, [pc, #420]	; (80057d8 <_dtoa_r+0x5a0>)
 8005634:	f7fb f804 	bl	8000640 <__aeabi_dmul>
 8005638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563c:	9c06      	ldr	r4, [sp, #24]
 800563e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005642:	3701      	adds	r7, #1
 8005644:	4638      	mov	r0, r7
 8005646:	f7fa ff91 	bl	800056c <__aeabi_i2d>
 800564a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564e:	f7fa fff7 	bl	8000640 <__aeabi_dmul>
 8005652:	2200      	movs	r2, #0
 8005654:	4b61      	ldr	r3, [pc, #388]	; (80057dc <_dtoa_r+0x5a4>)
 8005656:	f7fa fe3d 	bl	80002d4 <__adddf3>
 800565a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800565e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005662:	9611      	str	r6, [sp, #68]	; 0x44
 8005664:	2c00      	cmp	r4, #0
 8005666:	d15d      	bne.n	8005724 <_dtoa_r+0x4ec>
 8005668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566c:	2200      	movs	r2, #0
 800566e:	4b5c      	ldr	r3, [pc, #368]	; (80057e0 <_dtoa_r+0x5a8>)
 8005670:	f7fa fe2e 	bl	80002d0 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800567c:	4633      	mov	r3, r6
 800567e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005680:	f7fb fa6e 	bl	8000b60 <__aeabi_dcmpgt>
 8005684:	2800      	cmp	r0, #0
 8005686:	f040 8295 	bne.w	8005bb4 <_dtoa_r+0x97c>
 800568a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005690:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005694:	f7fb fa46 	bl	8000b24 <__aeabi_dcmplt>
 8005698:	2800      	cmp	r0, #0
 800569a:	f040 8289 	bne.w	8005bb0 <_dtoa_r+0x978>
 800569e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f2c0 8151 	blt.w	8005950 <_dtoa_r+0x718>
 80056ae:	f1bb 0f0e 	cmp.w	fp, #14
 80056b2:	f300 814d 	bgt.w	8005950 <_dtoa_r+0x718>
 80056b6:	4b45      	ldr	r3, [pc, #276]	; (80057cc <_dtoa_r+0x594>)
 80056b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80056c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f280 80da 	bge.w	8005880 <_dtoa_r+0x648>
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f300 80d6 	bgt.w	8005880 <_dtoa_r+0x648>
 80056d4:	f040 826b 	bne.w	8005bae <_dtoa_r+0x976>
 80056d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056dc:	2200      	movs	r2, #0
 80056de:	4b40      	ldr	r3, [pc, #256]	; (80057e0 <_dtoa_r+0x5a8>)
 80056e0:	f7fa ffae 	bl	8000640 <__aeabi_dmul>
 80056e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e8:	f7fb fa30 	bl	8000b4c <__aeabi_dcmpge>
 80056ec:	9c08      	ldr	r4, [sp, #32]
 80056ee:	4626      	mov	r6, r4
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f040 8241 	bne.w	8005b78 <_dtoa_r+0x940>
 80056f6:	2331      	movs	r3, #49	; 0x31
 80056f8:	9f03      	ldr	r7, [sp, #12]
 80056fa:	f10b 0b01 	add.w	fp, fp, #1
 80056fe:	f807 3b01 	strb.w	r3, [r7], #1
 8005702:	e23d      	b.n	8005b80 <_dtoa_r+0x948>
 8005704:	07e2      	lsls	r2, r4, #31
 8005706:	d505      	bpl.n	8005714 <_dtoa_r+0x4dc>
 8005708:	e9d6 2300 	ldrd	r2, r3, [r6]
 800570c:	f7fa ff98 	bl	8000640 <__aeabi_dmul>
 8005710:	2301      	movs	r3, #1
 8005712:	3701      	adds	r7, #1
 8005714:	1064      	asrs	r4, r4, #1
 8005716:	3608      	adds	r6, #8
 8005718:	e76d      	b.n	80055f6 <_dtoa_r+0x3be>
 800571a:	2702      	movs	r7, #2
 800571c:	e770      	b.n	8005600 <_dtoa_r+0x3c8>
 800571e:	46d8      	mov	r8, fp
 8005720:	9c08      	ldr	r4, [sp, #32]
 8005722:	e78f      	b.n	8005644 <_dtoa_r+0x40c>
 8005724:	9903      	ldr	r1, [sp, #12]
 8005726:	4b29      	ldr	r3, [pc, #164]	; (80057cc <_dtoa_r+0x594>)
 8005728:	4421      	add	r1, r4
 800572a:	9112      	str	r1, [sp, #72]	; 0x48
 800572c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800572e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005732:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005736:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800573a:	2900      	cmp	r1, #0
 800573c:	d054      	beq.n	80057e8 <_dtoa_r+0x5b0>
 800573e:	2000      	movs	r0, #0
 8005740:	4928      	ldr	r1, [pc, #160]	; (80057e4 <_dtoa_r+0x5ac>)
 8005742:	f7fb f8a7 	bl	8000894 <__aeabi_ddiv>
 8005746:	463b      	mov	r3, r7
 8005748:	4632      	mov	r2, r6
 800574a:	f7fa fdc1 	bl	80002d0 <__aeabi_dsub>
 800574e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005752:	9f03      	ldr	r7, [sp, #12]
 8005754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005758:	f7fb fa22 	bl	8000ba0 <__aeabi_d2iz>
 800575c:	4604      	mov	r4, r0
 800575e:	f7fa ff05 	bl	800056c <__aeabi_i2d>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800576a:	f7fa fdb1 	bl	80002d0 <__aeabi_dsub>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	3430      	adds	r4, #48	; 0x30
 8005774:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800577c:	f807 4b01 	strb.w	r4, [r7], #1
 8005780:	f7fb f9d0 	bl	8000b24 <__aeabi_dcmplt>
 8005784:	2800      	cmp	r0, #0
 8005786:	d173      	bne.n	8005870 <_dtoa_r+0x638>
 8005788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578c:	2000      	movs	r0, #0
 800578e:	4911      	ldr	r1, [pc, #68]	; (80057d4 <_dtoa_r+0x59c>)
 8005790:	f7fa fd9e 	bl	80002d0 <__aeabi_dsub>
 8005794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005798:	f7fb f9c4 	bl	8000b24 <__aeabi_dcmplt>
 800579c:	2800      	cmp	r0, #0
 800579e:	f040 80b6 	bne.w	800590e <_dtoa_r+0x6d6>
 80057a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057a4:	429f      	cmp	r7, r3
 80057a6:	f43f af7a 	beq.w	800569e <_dtoa_r+0x466>
 80057aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ae:	2200      	movs	r2, #0
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <_dtoa_r+0x5a0>)
 80057b2:	f7fa ff45 	bl	8000640 <__aeabi_dmul>
 80057b6:	2200      	movs	r2, #0
 80057b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <_dtoa_r+0x5a0>)
 80057c2:	f7fa ff3d 	bl	8000640 <__aeabi_dmul>
 80057c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ca:	e7c3      	b.n	8005754 <_dtoa_r+0x51c>
 80057cc:	08007498 	.word	0x08007498
 80057d0:	08007470 	.word	0x08007470
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	40240000 	.word	0x40240000
 80057dc:	401c0000 	.word	0x401c0000
 80057e0:	40140000 	.word	0x40140000
 80057e4:	3fe00000 	.word	0x3fe00000
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fa ff28 	bl	8000640 <__aeabi_dmul>
 80057f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057f6:	9c03      	ldr	r4, [sp, #12]
 80057f8:	9314      	str	r3, [sp, #80]	; 0x50
 80057fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057fe:	f7fb f9cf 	bl	8000ba0 <__aeabi_d2iz>
 8005802:	9015      	str	r0, [sp, #84]	; 0x54
 8005804:	f7fa feb2 	bl	800056c <__aeabi_i2d>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005810:	f7fa fd5e 	bl	80002d0 <__aeabi_dsub>
 8005814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005816:	4606      	mov	r6, r0
 8005818:	3330      	adds	r3, #48	; 0x30
 800581a:	f804 3b01 	strb.w	r3, [r4], #1
 800581e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005820:	460f      	mov	r7, r1
 8005822:	429c      	cmp	r4, r3
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	d124      	bne.n	8005874 <_dtoa_r+0x63c>
 800582a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800582e:	4baf      	ldr	r3, [pc, #700]	; (8005aec <_dtoa_r+0x8b4>)
 8005830:	f7fa fd50 	bl	80002d4 <__adddf3>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fb f990 	bl	8000b60 <__aeabi_dcmpgt>
 8005840:	2800      	cmp	r0, #0
 8005842:	d163      	bne.n	800590c <_dtoa_r+0x6d4>
 8005844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005848:	2000      	movs	r0, #0
 800584a:	49a8      	ldr	r1, [pc, #672]	; (8005aec <_dtoa_r+0x8b4>)
 800584c:	f7fa fd40 	bl	80002d0 <__aeabi_dsub>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f964 	bl	8000b24 <__aeabi_dcmplt>
 800585c:	2800      	cmp	r0, #0
 800585e:	f43f af1e 	beq.w	800569e <_dtoa_r+0x466>
 8005862:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005864:	1e7b      	subs	r3, r7, #1
 8005866:	9314      	str	r3, [sp, #80]	; 0x50
 8005868:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d0f8      	beq.n	8005862 <_dtoa_r+0x62a>
 8005870:	46c3      	mov	fp, r8
 8005872:	e03b      	b.n	80058ec <_dtoa_r+0x6b4>
 8005874:	4b9e      	ldr	r3, [pc, #632]	; (8005af0 <_dtoa_r+0x8b8>)
 8005876:	f7fa fee3 	bl	8000640 <__aeabi_dmul>
 800587a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800587e:	e7bc      	b.n	80057fa <_dtoa_r+0x5c2>
 8005880:	9f03      	ldr	r7, [sp, #12]
 8005882:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fb f801 	bl	8000894 <__aeabi_ddiv>
 8005892:	f7fb f985 	bl	8000ba0 <__aeabi_d2iz>
 8005896:	4604      	mov	r4, r0
 8005898:	f7fa fe68 	bl	800056c <__aeabi_i2d>
 800589c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058a0:	f7fa fece 	bl	8000640 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fa fd10 	bl	80002d0 <__aeabi_dsub>
 80058b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058b4:	f807 6b01 	strb.w	r6, [r7], #1
 80058b8:	9e03      	ldr	r6, [sp, #12]
 80058ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80058be:	1bbe      	subs	r6, r7, r6
 80058c0:	45b4      	cmp	ip, r6
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	d136      	bne.n	8005936 <_dtoa_r+0x6fe>
 80058c8:	f7fa fd04 	bl	80002d4 <__adddf3>
 80058cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058d0:	4680      	mov	r8, r0
 80058d2:	4689      	mov	r9, r1
 80058d4:	f7fb f944 	bl	8000b60 <__aeabi_dcmpgt>
 80058d8:	bb58      	cbnz	r0, 8005932 <_dtoa_r+0x6fa>
 80058da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fb f915 	bl	8000b10 <__aeabi_dcmpeq>
 80058e6:	b108      	cbz	r0, 80058ec <_dtoa_r+0x6b4>
 80058e8:	07e3      	lsls	r3, r4, #31
 80058ea:	d422      	bmi.n	8005932 <_dtoa_r+0x6fa>
 80058ec:	4651      	mov	r1, sl
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 fbc2 	bl	8006078 <_Bfree>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058f8:	703b      	strb	r3, [r7, #0]
 80058fa:	f10b 0301 	add.w	r3, fp, #1
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005902:	2b00      	cmp	r3, #0
 8005904:	f43f ace6 	beq.w	80052d4 <_dtoa_r+0x9c>
 8005908:	601f      	str	r7, [r3, #0]
 800590a:	e4e3      	b.n	80052d4 <_dtoa_r+0x9c>
 800590c:	4627      	mov	r7, r4
 800590e:	463b      	mov	r3, r7
 8005910:	461f      	mov	r7, r3
 8005912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005916:	2a39      	cmp	r2, #57	; 0x39
 8005918:	d107      	bne.n	800592a <_dtoa_r+0x6f2>
 800591a:	9a03      	ldr	r2, [sp, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d1f7      	bne.n	8005910 <_dtoa_r+0x6d8>
 8005920:	2230      	movs	r2, #48	; 0x30
 8005922:	9903      	ldr	r1, [sp, #12]
 8005924:	f108 0801 	add.w	r8, r8, #1
 8005928:	700a      	strb	r2, [r1, #0]
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	3201      	adds	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e79e      	b.n	8005870 <_dtoa_r+0x638>
 8005932:	46d8      	mov	r8, fp
 8005934:	e7eb      	b.n	800590e <_dtoa_r+0x6d6>
 8005936:	2200      	movs	r2, #0
 8005938:	4b6d      	ldr	r3, [pc, #436]	; (8005af0 <_dtoa_r+0x8b8>)
 800593a:	f7fa fe81 	bl	8000640 <__aeabi_dmul>
 800593e:	2200      	movs	r2, #0
 8005940:	2300      	movs	r3, #0
 8005942:	4680      	mov	r8, r0
 8005944:	4689      	mov	r9, r1
 8005946:	f7fb f8e3 	bl	8000b10 <__aeabi_dcmpeq>
 800594a:	2800      	cmp	r0, #0
 800594c:	d09b      	beq.n	8005886 <_dtoa_r+0x64e>
 800594e:	e7cd      	b.n	80058ec <_dtoa_r+0x6b4>
 8005950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005952:	2a00      	cmp	r2, #0
 8005954:	f000 80c4 	beq.w	8005ae0 <_dtoa_r+0x8a8>
 8005958:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800595a:	2a01      	cmp	r2, #1
 800595c:	f300 80a8 	bgt.w	8005ab0 <_dtoa_r+0x878>
 8005960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005962:	2a00      	cmp	r2, #0
 8005964:	f000 80a0 	beq.w	8005aa8 <_dtoa_r+0x870>
 8005968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800596c:	464f      	mov	r7, r9
 800596e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005972:	2101      	movs	r1, #1
 8005974:	441a      	add	r2, r3
 8005976:	4628      	mov	r0, r5
 8005978:	4499      	add	r9, r3
 800597a:	9209      	str	r2, [sp, #36]	; 0x24
 800597c:	f000 fc32 	bl	80061e4 <__i2b>
 8005980:	4606      	mov	r6, r0
 8005982:	b15f      	cbz	r7, 800599c <_dtoa_r+0x764>
 8005984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	dd08      	ble.n	800599c <_dtoa_r+0x764>
 800598a:	42bb      	cmp	r3, r7
 800598c:	bfa8      	it	ge
 800598e:	463b      	movge	r3, r7
 8005990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005992:	eba9 0903 	sub.w	r9, r9, r3
 8005996:	1aff      	subs	r7, r7, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	9309      	str	r3, [sp, #36]	; 0x24
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	b1f3      	cbz	r3, 80059de <_dtoa_r+0x7a6>
 80059a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80a0 	beq.w	8005ae8 <_dtoa_r+0x8b0>
 80059a8:	2c00      	cmp	r4, #0
 80059aa:	dd10      	ble.n	80059ce <_dtoa_r+0x796>
 80059ac:	4631      	mov	r1, r6
 80059ae:	4622      	mov	r2, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fcd5 	bl	8006360 <__pow5mult>
 80059b6:	4652      	mov	r2, sl
 80059b8:	4601      	mov	r1, r0
 80059ba:	4606      	mov	r6, r0
 80059bc:	4628      	mov	r0, r5
 80059be:	f000 fc27 	bl	8006210 <__multiply>
 80059c2:	4680      	mov	r8, r0
 80059c4:	4651      	mov	r1, sl
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fb56 	bl	8006078 <_Bfree>
 80059cc:	46c2      	mov	sl, r8
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	1b1a      	subs	r2, r3, r4
 80059d2:	d004      	beq.n	80059de <_dtoa_r+0x7a6>
 80059d4:	4651      	mov	r1, sl
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 fcc2 	bl	8006360 <__pow5mult>
 80059dc:	4682      	mov	sl, r0
 80059de:	2101      	movs	r1, #1
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 fbff 	bl	80061e4 <__i2b>
 80059e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e8:	4604      	mov	r4, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f340 8082 	ble.w	8005af4 <_dtoa_r+0x8bc>
 80059f0:	461a      	mov	r2, r3
 80059f2:	4601      	mov	r1, r0
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fcb3 	bl	8006360 <__pow5mult>
 80059fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fc:	4604      	mov	r4, r0
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	dd7b      	ble.n	8005afa <_dtoa_r+0x8c2>
 8005a02:	f04f 0800 	mov.w	r8, #0
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a0c:	6918      	ldr	r0, [r3, #16]
 8005a0e:	f000 fb9b 	bl	8006148 <__hi0bits>
 8005a12:	f1c0 0020 	rsb	r0, r0, #32
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	4418      	add	r0, r3
 8005a1a:	f010 001f 	ands.w	r0, r0, #31
 8005a1e:	f000 8092 	beq.w	8005b46 <_dtoa_r+0x90e>
 8005a22:	f1c0 0320 	rsb	r3, r0, #32
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	f340 8085 	ble.w	8005b36 <_dtoa_r+0x8fe>
 8005a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2e:	f1c0 001c 	rsb	r0, r0, #28
 8005a32:	4403      	add	r3, r0
 8005a34:	4481      	add	r9, r0
 8005a36:	4407      	add	r7, r0
 8005a38:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3a:	f1b9 0f00 	cmp.w	r9, #0
 8005a3e:	dd05      	ble.n	8005a4c <_dtoa_r+0x814>
 8005a40:	4651      	mov	r1, sl
 8005a42:	464a      	mov	r2, r9
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 fce5 	bl	8006414 <__lshift>
 8005a4a:	4682      	mov	sl, r0
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd05      	ble.n	8005a5e <_dtoa_r+0x826>
 8005a52:	4621      	mov	r1, r4
 8005a54:	461a      	mov	r2, r3
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fcdc 	bl	8006414 <__lshift>
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d072      	beq.n	8005b4a <_dtoa_r+0x912>
 8005a64:	4621      	mov	r1, r4
 8005a66:	4650      	mov	r0, sl
 8005a68:	f000 fd40 	bl	80064ec <__mcmp>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	da6c      	bge.n	8005b4a <_dtoa_r+0x912>
 8005a70:	2300      	movs	r3, #0
 8005a72:	4651      	mov	r1, sl
 8005a74:	220a      	movs	r2, #10
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 fb20 	bl	80060bc <__multadd>
 8005a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a7e:	4682      	mov	sl, r0
 8005a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 81ac 	beq.w	8005de2 <_dtoa_r+0xbaa>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	220a      	movs	r2, #10
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 fb13 	bl	80060bc <__multadd>
 8005a96:	9b06      	ldr	r3, [sp, #24]
 8005a98:	4606      	mov	r6, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f300 8093 	bgt.w	8005bc6 <_dtoa_r+0x98e>
 8005aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	dc59      	bgt.n	8005b5a <_dtoa_r+0x922>
 8005aa6:	e08e      	b.n	8005bc6 <_dtoa_r+0x98e>
 8005aa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005aaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005aae:	e75d      	b.n	800596c <_dtoa_r+0x734>
 8005ab0:	9b08      	ldr	r3, [sp, #32]
 8005ab2:	1e5c      	subs	r4, r3, #1
 8005ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	bfbf      	itttt	lt
 8005aba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005abc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005abe:	1ae3      	sublt	r3, r4, r3
 8005ac0:	18d2      	addlt	r2, r2, r3
 8005ac2:	bfa8      	it	ge
 8005ac4:	1b1c      	subge	r4, r3, r4
 8005ac6:	9b08      	ldr	r3, [sp, #32]
 8005ac8:	bfbe      	ittt	lt
 8005aca:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005acc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005ace:	2400      	movlt	r4, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bfb5      	itete	lt
 8005ad4:	eba9 0703 	sublt.w	r7, r9, r3
 8005ad8:	464f      	movge	r7, r9
 8005ada:	2300      	movlt	r3, #0
 8005adc:	9b08      	ldrge	r3, [sp, #32]
 8005ade:	e747      	b.n	8005970 <_dtoa_r+0x738>
 8005ae0:	464f      	mov	r7, r9
 8005ae2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ae4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ae6:	e74c      	b.n	8005982 <_dtoa_r+0x74a>
 8005ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aea:	e773      	b.n	80059d4 <_dtoa_r+0x79c>
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	40240000 	.word	0x40240000
 8005af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	dc18      	bgt.n	8005b2c <_dtoa_r+0x8f4>
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	b9b3      	cbnz	r3, 8005b2c <_dtoa_r+0x8f4>
 8005afe:	9b05      	ldr	r3, [sp, #20]
 8005b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b04:	b993      	cbnz	r3, 8005b2c <_dtoa_r+0x8f4>
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	051b      	lsls	r3, r3, #20
 8005b10:	b17b      	cbz	r3, 8005b32 <_dtoa_r+0x8fa>
 8005b12:	f04f 0801 	mov.w	r8, #1
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	f109 0901 	add.w	r9, r9, #1
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f47f af6f 	bne.w	8005a06 <_dtoa_r+0x7ce>
 8005b28:	2001      	movs	r0, #1
 8005b2a:	e774      	b.n	8005a16 <_dtoa_r+0x7de>
 8005b2c:	f04f 0800 	mov.w	r8, #0
 8005b30:	e7f6      	b.n	8005b20 <_dtoa_r+0x8e8>
 8005b32:	4698      	mov	r8, r3
 8005b34:	e7f4      	b.n	8005b20 <_dtoa_r+0x8e8>
 8005b36:	d080      	beq.n	8005a3a <_dtoa_r+0x802>
 8005b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3a:	331c      	adds	r3, #28
 8005b3c:	441a      	add	r2, r3
 8005b3e:	4499      	add	r9, r3
 8005b40:	441f      	add	r7, r3
 8005b42:	9209      	str	r2, [sp, #36]	; 0x24
 8005b44:	e779      	b.n	8005a3a <_dtoa_r+0x802>
 8005b46:	4603      	mov	r3, r0
 8005b48:	e7f6      	b.n	8005b38 <_dtoa_r+0x900>
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dc34      	bgt.n	8005bba <_dtoa_r+0x982>
 8005b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	dd31      	ble.n	8005bba <_dtoa_r+0x982>
 8005b56:	9b08      	ldr	r3, [sp, #32]
 8005b58:	9306      	str	r3, [sp, #24]
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	b963      	cbnz	r3, 8005b78 <_dtoa_r+0x940>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	2205      	movs	r2, #5
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 faaa 	bl	80060bc <__multadd>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4650      	mov	r0, sl
 8005b6e:	f000 fcbd 	bl	80064ec <__mcmp>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f73f adbf 	bgt.w	80056f6 <_dtoa_r+0x4be>
 8005b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b7a:	9f03      	ldr	r7, [sp, #12]
 8005b7c:	ea6f 0b03 	mvn.w	fp, r3
 8005b80:	f04f 0800 	mov.w	r8, #0
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 fa76 	bl	8006078 <_Bfree>
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	f43f aead 	beq.w	80058ec <_dtoa_r+0x6b4>
 8005b92:	f1b8 0f00 	cmp.w	r8, #0
 8005b96:	d005      	beq.n	8005ba4 <_dtoa_r+0x96c>
 8005b98:	45b0      	cmp	r8, r6
 8005b9a:	d003      	beq.n	8005ba4 <_dtoa_r+0x96c>
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fa6a 	bl	8006078 <_Bfree>
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 fa66 	bl	8006078 <_Bfree>
 8005bac:	e69e      	b.n	80058ec <_dtoa_r+0x6b4>
 8005bae:	2400      	movs	r4, #0
 8005bb0:	4626      	mov	r6, r4
 8005bb2:	e7e1      	b.n	8005b78 <_dtoa_r+0x940>
 8005bb4:	46c3      	mov	fp, r8
 8005bb6:	4626      	mov	r6, r4
 8005bb8:	e59d      	b.n	80056f6 <_dtoa_r+0x4be>
 8005bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80c8 	beq.w	8005d52 <_dtoa_r+0xb1a>
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	2f00      	cmp	r7, #0
 8005bc8:	dd05      	ble.n	8005bd6 <_dtoa_r+0x99e>
 8005bca:	4631      	mov	r1, r6
 8005bcc:	463a      	mov	r2, r7
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 fc20 	bl	8006414 <__lshift>
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	f1b8 0f00 	cmp.w	r8, #0
 8005bda:	d05b      	beq.n	8005c94 <_dtoa_r+0xa5c>
 8005bdc:	4628      	mov	r0, r5
 8005bde:	6871      	ldr	r1, [r6, #4]
 8005be0:	f000 fa0a 	bl	8005ff8 <_Balloc>
 8005be4:	4607      	mov	r7, r0
 8005be6:	b928      	cbnz	r0, 8005bf4 <_dtoa_r+0x9bc>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005bee:	4b81      	ldr	r3, [pc, #516]	; (8005df4 <_dtoa_r+0xbbc>)
 8005bf0:	f7ff bb36 	b.w	8005260 <_dtoa_r+0x28>
 8005bf4:	6932      	ldr	r2, [r6, #16]
 8005bf6:	f106 010c 	add.w	r1, r6, #12
 8005bfa:	3202      	adds	r2, #2
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	300c      	adds	r0, #12
 8005c00:	f000 ff9e 	bl	8006b40 <memcpy>
 8005c04:	2201      	movs	r2, #1
 8005c06:	4639      	mov	r1, r7
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 fc03 	bl	8006414 <__lshift>
 8005c0e:	46b0      	mov	r8, r6
 8005c10:	4606      	mov	r6, r0
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	9a03      	ldr	r2, [sp, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	9308      	str	r3, [sp, #32]
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	930a      	str	r3, [sp, #40]	; 0x28
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4650      	mov	r0, sl
 8005c30:	9304      	str	r3, [sp, #16]
 8005c32:	f7ff fa77 	bl	8005124 <quorem>
 8005c36:	4641      	mov	r1, r8
 8005c38:	9006      	str	r0, [sp, #24]
 8005c3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c3e:	4650      	mov	r0, sl
 8005c40:	f000 fc54 	bl	80064ec <__mcmp>
 8005c44:	4632      	mov	r2, r6
 8005c46:	9009      	str	r0, [sp, #36]	; 0x24
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 fc6a 	bl	8006524 <__mdiff>
 8005c50:	68c2      	ldr	r2, [r0, #12]
 8005c52:	4607      	mov	r7, r0
 8005c54:	bb02      	cbnz	r2, 8005c98 <_dtoa_r+0xa60>
 8005c56:	4601      	mov	r1, r0
 8005c58:	4650      	mov	r0, sl
 8005c5a:	f000 fc47 	bl	80064ec <__mcmp>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4639      	mov	r1, r7
 8005c62:	4628      	mov	r0, r5
 8005c64:	920c      	str	r2, [sp, #48]	; 0x30
 8005c66:	f000 fa07 	bl	8006078 <_Bfree>
 8005c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c6e:	9f08      	ldr	r7, [sp, #32]
 8005c70:	ea43 0102 	orr.w	r1, r3, r2
 8005c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c76:	4319      	orrs	r1, r3
 8005c78:	d110      	bne.n	8005c9c <_dtoa_r+0xa64>
 8005c7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c7e:	d029      	beq.n	8005cd4 <_dtoa_r+0xa9c>
 8005c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd02      	ble.n	8005c8c <_dtoa_r+0xa54>
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	f883 9000 	strb.w	r9, [r3]
 8005c92:	e777      	b.n	8005b84 <_dtoa_r+0x94c>
 8005c94:	4630      	mov	r0, r6
 8005c96:	e7ba      	b.n	8005c0e <_dtoa_r+0x9d6>
 8005c98:	2201      	movs	r2, #1
 8005c9a:	e7e1      	b.n	8005c60 <_dtoa_r+0xa28>
 8005c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	db04      	blt.n	8005cac <_dtoa_r+0xa74>
 8005ca2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	d120      	bne.n	8005cee <_dtoa_r+0xab6>
 8005cac:	2a00      	cmp	r2, #0
 8005cae:	dded      	ble.n	8005c8c <_dtoa_r+0xa54>
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 fbad 	bl	8006414 <__lshift>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4682      	mov	sl, r0
 8005cbe:	f000 fc15 	bl	80064ec <__mcmp>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	dc03      	bgt.n	8005cce <_dtoa_r+0xa96>
 8005cc6:	d1e1      	bne.n	8005c8c <_dtoa_r+0xa54>
 8005cc8:	f019 0f01 	tst.w	r9, #1
 8005ccc:	d0de      	beq.n	8005c8c <_dtoa_r+0xa54>
 8005cce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cd2:	d1d8      	bne.n	8005c86 <_dtoa_r+0xa4e>
 8005cd4:	2339      	movs	r3, #57	; 0x39
 8005cd6:	9a04      	ldr	r2, [sp, #16]
 8005cd8:	7013      	strb	r3, [r2, #0]
 8005cda:	463b      	mov	r3, r7
 8005cdc:	461f      	mov	r7, r3
 8005cde:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	2a39      	cmp	r2, #57	; 0x39
 8005ce6:	d06b      	beq.n	8005dc0 <_dtoa_r+0xb88>
 8005ce8:	3201      	adds	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e74a      	b.n	8005b84 <_dtoa_r+0x94c>
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	dd07      	ble.n	8005d02 <_dtoa_r+0xaca>
 8005cf2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cf6:	d0ed      	beq.n	8005cd4 <_dtoa_r+0xa9c>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	f109 0301 	add.w	r3, r9, #1
 8005cfe:	7013      	strb	r3, [r2, #0]
 8005d00:	e740      	b.n	8005b84 <_dtoa_r+0x94c>
 8005d02:	9b08      	ldr	r3, [sp, #32]
 8005d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d06:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d042      	beq.n	8005d94 <_dtoa_r+0xb5c>
 8005d0e:	4651      	mov	r1, sl
 8005d10:	2300      	movs	r3, #0
 8005d12:	220a      	movs	r2, #10
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 f9d1 	bl	80060bc <__multadd>
 8005d1a:	45b0      	cmp	r8, r6
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	f04f 020a 	mov.w	r2, #10
 8005d26:	4641      	mov	r1, r8
 8005d28:	4628      	mov	r0, r5
 8005d2a:	d107      	bne.n	8005d3c <_dtoa_r+0xb04>
 8005d2c:	f000 f9c6 	bl	80060bc <__multadd>
 8005d30:	4680      	mov	r8, r0
 8005d32:	4606      	mov	r6, r0
 8005d34:	9b08      	ldr	r3, [sp, #32]
 8005d36:	3301      	adds	r3, #1
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	e775      	b.n	8005c28 <_dtoa_r+0x9f0>
 8005d3c:	f000 f9be 	bl	80060bc <__multadd>
 8005d40:	4631      	mov	r1, r6
 8005d42:	4680      	mov	r8, r0
 8005d44:	2300      	movs	r3, #0
 8005d46:	220a      	movs	r2, #10
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 f9b7 	bl	80060bc <__multadd>
 8005d4e:	4606      	mov	r6, r0
 8005d50:	e7f0      	b.n	8005d34 <_dtoa_r+0xafc>
 8005d52:	9b08      	ldr	r3, [sp, #32]
 8005d54:	9306      	str	r3, [sp, #24]
 8005d56:	9f03      	ldr	r7, [sp, #12]
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7ff f9e2 	bl	8005124 <quorem>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d66:	f807 9b01 	strb.w	r9, [r7], #1
 8005d6a:	1afa      	subs	r2, r7, r3
 8005d6c:	9b06      	ldr	r3, [sp, #24]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	dd07      	ble.n	8005d82 <_dtoa_r+0xb4a>
 8005d72:	4651      	mov	r1, sl
 8005d74:	2300      	movs	r3, #0
 8005d76:	220a      	movs	r2, #10
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f000 f99f 	bl	80060bc <__multadd>
 8005d7e:	4682      	mov	sl, r0
 8005d80:	e7ea      	b.n	8005d58 <_dtoa_r+0xb20>
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	f04f 0800 	mov.w	r8, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfcc      	ite	gt
 8005d8c:	461f      	movgt	r7, r3
 8005d8e:	2701      	movle	r7, #1
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	441f      	add	r7, r3
 8005d94:	4651      	mov	r1, sl
 8005d96:	2201      	movs	r2, #1
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 fb3b 	bl	8006414 <__lshift>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4682      	mov	sl, r0
 8005da2:	f000 fba3 	bl	80064ec <__mcmp>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	dc97      	bgt.n	8005cda <_dtoa_r+0xaa2>
 8005daa:	d102      	bne.n	8005db2 <_dtoa_r+0xb7a>
 8005dac:	f019 0f01 	tst.w	r9, #1
 8005db0:	d193      	bne.n	8005cda <_dtoa_r+0xaa2>
 8005db2:	463b      	mov	r3, r7
 8005db4:	461f      	mov	r7, r3
 8005db6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dba:	2a30      	cmp	r2, #48	; 0x30
 8005dbc:	d0fa      	beq.n	8005db4 <_dtoa_r+0xb7c>
 8005dbe:	e6e1      	b.n	8005b84 <_dtoa_r+0x94c>
 8005dc0:	9a03      	ldr	r2, [sp, #12]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d18a      	bne.n	8005cdc <_dtoa_r+0xaa4>
 8005dc6:	2331      	movs	r3, #49	; 0x31
 8005dc8:	f10b 0b01 	add.w	fp, fp, #1
 8005dcc:	e797      	b.n	8005cfe <_dtoa_r+0xac6>
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <_dtoa_r+0xbc0>)
 8005dd0:	f7ff ba9f 	b.w	8005312 <_dtoa_r+0xda>
 8005dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f aa77 	bne.w	80052ca <_dtoa_r+0x92>
 8005ddc:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <_dtoa_r+0xbc4>)
 8005dde:	f7ff ba98 	b.w	8005312 <_dtoa_r+0xda>
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dcb6      	bgt.n	8005d56 <_dtoa_r+0xb1e>
 8005de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	f73f aeb5 	bgt.w	8005b5a <_dtoa_r+0x922>
 8005df0:	e7b1      	b.n	8005d56 <_dtoa_r+0xb1e>
 8005df2:	bf00      	nop
 8005df4:	08007406 	.word	0x08007406
 8005df8:	08007366 	.word	0x08007366
 8005dfc:	0800738a 	.word	0x0800738a

08005e00 <_free_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4605      	mov	r5, r0
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d040      	beq.n	8005e8a <_free_r+0x8a>
 8005e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0c:	1f0c      	subs	r4, r1, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfb8      	it	lt
 8005e12:	18e4      	addlt	r4, r4, r3
 8005e14:	f000 f8e4 	bl	8005fe0 <__malloc_lock>
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <_free_r+0x8c>)
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	b933      	cbnz	r3, 8005e2c <_free_r+0x2c>
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	6014      	str	r4, [r2, #0]
 8005e22:	4628      	mov	r0, r5
 8005e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e28:	f000 b8e0 	b.w	8005fec <__malloc_unlock>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d908      	bls.n	8005e42 <_free_r+0x42>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	1821      	adds	r1, r4, r0
 8005e34:	428b      	cmp	r3, r1
 8005e36:	bf01      	itttt	eq
 8005e38:	6819      	ldreq	r1, [r3, #0]
 8005e3a:	685b      	ldreq	r3, [r3, #4]
 8005e3c:	1809      	addeq	r1, r1, r0
 8005e3e:	6021      	streq	r1, [r4, #0]
 8005e40:	e7ed      	b.n	8005e1e <_free_r+0x1e>
 8005e42:	461a      	mov	r2, r3
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b10b      	cbz	r3, 8005e4c <_free_r+0x4c>
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d9fa      	bls.n	8005e42 <_free_r+0x42>
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	1850      	adds	r0, r2, r1
 8005e50:	42a0      	cmp	r0, r4
 8005e52:	d10b      	bne.n	8005e6c <_free_r+0x6c>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	4401      	add	r1, r0
 8005e58:	1850      	adds	r0, r2, r1
 8005e5a:	4283      	cmp	r3, r0
 8005e5c:	6011      	str	r1, [r2, #0]
 8005e5e:	d1e0      	bne.n	8005e22 <_free_r+0x22>
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4408      	add	r0, r1
 8005e66:	6010      	str	r0, [r2, #0]
 8005e68:	6053      	str	r3, [r2, #4]
 8005e6a:	e7da      	b.n	8005e22 <_free_r+0x22>
 8005e6c:	d902      	bls.n	8005e74 <_free_r+0x74>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	e7d6      	b.n	8005e22 <_free_r+0x22>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	1821      	adds	r1, r4, r0
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	bf01      	itttt	eq
 8005e7c:	6819      	ldreq	r1, [r3, #0]
 8005e7e:	685b      	ldreq	r3, [r3, #4]
 8005e80:	1809      	addeq	r1, r1, r0
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6063      	str	r3, [r4, #4]
 8005e86:	6054      	str	r4, [r2, #4]
 8005e88:	e7cb      	b.n	8005e22 <_free_r+0x22>
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000430 	.word	0x20000430

08005e90 <malloc>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <malloc+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f000 b823 	b.w	8005ee0 <_malloc_r>
 8005e9a:	bf00      	nop
 8005e9c:	20000074 	.word	0x20000074

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fe38 	bl	8006b20 <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fe33 	bl	8006b20 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fe28 	bl	8006b20 <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	20000434 	.word	0x20000434

08005ee0 <_malloc_r>:
 8005ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	2600      	movs	r6, #0
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fdc <_malloc_r+0xfc>
 8005f0c:	f000 f868 	bl	8005fe0 <__malloc_lock>
 8005f10:	f8d8 3000 	ldr.w	r3, [r8]
 8005f14:	461c      	mov	r4, r3
 8005f16:	bb5c      	cbnz	r4, 8005f70 <_malloc_r+0x90>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f7ff ffc0 	bl	8005ea0 <sbrk_aligned>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	4604      	mov	r4, r0
 8005f24:	d155      	bne.n	8005fd2 <_malloc_r+0xf2>
 8005f26:	f8d8 4000 	ldr.w	r4, [r8]
 8005f2a:	4626      	mov	r6, r4
 8005f2c:	2e00      	cmp	r6, #0
 8005f2e:	d145      	bne.n	8005fbc <_malloc_r+0xdc>
 8005f30:	2c00      	cmp	r4, #0
 8005f32:	d048      	beq.n	8005fc6 <_malloc_r+0xe6>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	4631      	mov	r1, r6
 8005f38:	4638      	mov	r0, r7
 8005f3a:	eb04 0903 	add.w	r9, r4, r3
 8005f3e:	f000 fdef 	bl	8006b20 <_sbrk_r>
 8005f42:	4581      	cmp	r9, r0
 8005f44:	d13f      	bne.n	8005fc6 <_malloc_r+0xe6>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	4638      	mov	r0, r7
 8005f4a:	1a6d      	subs	r5, r5, r1
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7ff ffa7 	bl	8005ea0 <sbrk_aligned>
 8005f52:	3001      	adds	r0, #1
 8005f54:	d037      	beq.n	8005fc6 <_malloc_r+0xe6>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	442b      	add	r3, r5
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d038      	beq.n	8005fd6 <_malloc_r+0xf6>
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	42a2      	cmp	r2, r4
 8005f68:	d12b      	bne.n	8005fc2 <_malloc_r+0xe2>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	e00f      	b.n	8005f90 <_malloc_r+0xb0>
 8005f70:	6822      	ldr	r2, [r4, #0]
 8005f72:	1b52      	subs	r2, r2, r5
 8005f74:	d41f      	bmi.n	8005fb6 <_malloc_r+0xd6>
 8005f76:	2a0b      	cmp	r2, #11
 8005f78:	d917      	bls.n	8005faa <_malloc_r+0xca>
 8005f7a:	1961      	adds	r1, r4, r5
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	6025      	str	r5, [r4, #0]
 8005f80:	bf18      	it	ne
 8005f82:	6059      	strne	r1, [r3, #4]
 8005f84:	6863      	ldr	r3, [r4, #4]
 8005f86:	bf08      	it	eq
 8005f88:	f8c8 1000 	streq.w	r1, [r8]
 8005f8c:	5162      	str	r2, [r4, r5]
 8005f8e:	604b      	str	r3, [r1, #4]
 8005f90:	4638      	mov	r0, r7
 8005f92:	f104 060b 	add.w	r6, r4, #11
 8005f96:	f000 f829 	bl	8005fec <__malloc_unlock>
 8005f9a:	f026 0607 	bic.w	r6, r6, #7
 8005f9e:	1d23      	adds	r3, r4, #4
 8005fa0:	1af2      	subs	r2, r6, r3
 8005fa2:	d0ae      	beq.n	8005f02 <_malloc_r+0x22>
 8005fa4:	1b9b      	subs	r3, r3, r6
 8005fa6:	50a3      	str	r3, [r4, r2]
 8005fa8:	e7ab      	b.n	8005f02 <_malloc_r+0x22>
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	d1dd      	bne.n	8005f6c <_malloc_r+0x8c>
 8005fb0:	f8c8 2000 	str.w	r2, [r8]
 8005fb4:	e7ec      	b.n	8005f90 <_malloc_r+0xb0>
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	6864      	ldr	r4, [r4, #4]
 8005fba:	e7ac      	b.n	8005f16 <_malloc_r+0x36>
 8005fbc:	4634      	mov	r4, r6
 8005fbe:	6876      	ldr	r6, [r6, #4]
 8005fc0:	e7b4      	b.n	8005f2c <_malloc_r+0x4c>
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	e7cc      	b.n	8005f60 <_malloc_r+0x80>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	4638      	mov	r0, r7
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	f000 f80e 	bl	8005fec <__malloc_unlock>
 8005fd0:	e797      	b.n	8005f02 <_malloc_r+0x22>
 8005fd2:	6025      	str	r5, [r4, #0]
 8005fd4:	e7dc      	b.n	8005f90 <_malloc_r+0xb0>
 8005fd6:	605b      	str	r3, [r3, #4]
 8005fd8:	deff      	udf	#255	; 0xff
 8005fda:	bf00      	nop
 8005fdc:	20000430 	.word	0x20000430

08005fe0 <__malloc_lock>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__malloc_lock+0x8>)
 8005fe2:	f7ff b88f 	b.w	8005104 <__retarget_lock_acquire_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	2000042c 	.word	0x2000042c

08005fec <__malloc_unlock>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__malloc_unlock+0x8>)
 8005fee:	f7ff b88a 	b.w	8005106 <__retarget_lock_release_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	2000042c 	.word	0x2000042c

08005ff8 <_Balloc>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	69c6      	ldr	r6, [r0, #28]
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	460d      	mov	r5, r1
 8006000:	b976      	cbnz	r6, 8006020 <_Balloc+0x28>
 8006002:	2010      	movs	r0, #16
 8006004:	f7ff ff44 	bl	8005e90 <malloc>
 8006008:	4602      	mov	r2, r0
 800600a:	61e0      	str	r0, [r4, #28]
 800600c:	b920      	cbnz	r0, 8006018 <_Balloc+0x20>
 800600e:	216b      	movs	r1, #107	; 0x6b
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <_Balloc+0x78>)
 8006012:	4818      	ldr	r0, [pc, #96]	; (8006074 <_Balloc+0x7c>)
 8006014:	f000 fda2 	bl	8006b5c <__assert_func>
 8006018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800601c:	6006      	str	r6, [r0, #0]
 800601e:	60c6      	str	r6, [r0, #12]
 8006020:	69e6      	ldr	r6, [r4, #28]
 8006022:	68f3      	ldr	r3, [r6, #12]
 8006024:	b183      	cbz	r3, 8006048 <_Balloc+0x50>
 8006026:	69e3      	ldr	r3, [r4, #28]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800602e:	b9b8      	cbnz	r0, 8006060 <_Balloc+0x68>
 8006030:	2101      	movs	r1, #1
 8006032:	fa01 f605 	lsl.w	r6, r1, r5
 8006036:	1d72      	adds	r2, r6, #5
 8006038:	4620      	mov	r0, r4
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	f000 fdac 	bl	8006b98 <_calloc_r>
 8006040:	b160      	cbz	r0, 800605c <_Balloc+0x64>
 8006042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006046:	e00e      	b.n	8006066 <_Balloc+0x6e>
 8006048:	2221      	movs	r2, #33	; 0x21
 800604a:	2104      	movs	r1, #4
 800604c:	4620      	mov	r0, r4
 800604e:	f000 fda3 	bl	8006b98 <_calloc_r>
 8006052:	69e3      	ldr	r3, [r4, #28]
 8006054:	60f0      	str	r0, [r6, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e4      	bne.n	8006026 <_Balloc+0x2e>
 800605c:	2000      	movs	r0, #0
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	6802      	ldr	r2, [r0, #0]
 8006062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006066:	2300      	movs	r3, #0
 8006068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800606c:	e7f7      	b.n	800605e <_Balloc+0x66>
 800606e:	bf00      	nop
 8006070:	08007397 	.word	0x08007397
 8006074:	08007417 	.word	0x08007417

08006078 <_Bfree>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	69c6      	ldr	r6, [r0, #28]
 800607c:	4605      	mov	r5, r0
 800607e:	460c      	mov	r4, r1
 8006080:	b976      	cbnz	r6, 80060a0 <_Bfree+0x28>
 8006082:	2010      	movs	r0, #16
 8006084:	f7ff ff04 	bl	8005e90 <malloc>
 8006088:	4602      	mov	r2, r0
 800608a:	61e8      	str	r0, [r5, #28]
 800608c:	b920      	cbnz	r0, 8006098 <_Bfree+0x20>
 800608e:	218f      	movs	r1, #143	; 0x8f
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <_Bfree+0x3c>)
 8006092:	4809      	ldr	r0, [pc, #36]	; (80060b8 <_Bfree+0x40>)
 8006094:	f000 fd62 	bl	8006b5c <__assert_func>
 8006098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800609c:	6006      	str	r6, [r0, #0]
 800609e:	60c6      	str	r6, [r0, #12]
 80060a0:	b13c      	cbz	r4, 80060b2 <_Bfree+0x3a>
 80060a2:	69eb      	ldr	r3, [r5, #28]
 80060a4:	6862      	ldr	r2, [r4, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060ac:	6021      	str	r1, [r4, #0]
 80060ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	08007397 	.word	0x08007397
 80060b8:	08007417 	.word	0x08007417

080060bc <__multadd>:
 80060bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c0:	4607      	mov	r7, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	461e      	mov	r6, r3
 80060c6:	2000      	movs	r0, #0
 80060c8:	690d      	ldr	r5, [r1, #16]
 80060ca:	f101 0c14 	add.w	ip, r1, #20
 80060ce:	f8dc 3000 	ldr.w	r3, [ip]
 80060d2:	3001      	adds	r0, #1
 80060d4:	b299      	uxth	r1, r3
 80060d6:	fb02 6101 	mla	r1, r2, r1, r6
 80060da:	0c1e      	lsrs	r6, r3, #16
 80060dc:	0c0b      	lsrs	r3, r1, #16
 80060de:	fb02 3306 	mla	r3, r2, r6, r3
 80060e2:	b289      	uxth	r1, r1
 80060e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060e8:	4285      	cmp	r5, r0
 80060ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060ee:	f84c 1b04 	str.w	r1, [ip], #4
 80060f2:	dcec      	bgt.n	80060ce <__multadd+0x12>
 80060f4:	b30e      	cbz	r6, 800613a <__multadd+0x7e>
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	dc19      	bgt.n	8006130 <__multadd+0x74>
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4638      	mov	r0, r7
 8006100:	3101      	adds	r1, #1
 8006102:	f7ff ff79 	bl	8005ff8 <_Balloc>
 8006106:	4680      	mov	r8, r0
 8006108:	b928      	cbnz	r0, 8006116 <__multadd+0x5a>
 800610a:	4602      	mov	r2, r0
 800610c:	21ba      	movs	r1, #186	; 0xba
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <__multadd+0x84>)
 8006110:	480c      	ldr	r0, [pc, #48]	; (8006144 <__multadd+0x88>)
 8006112:	f000 fd23 	bl	8006b5c <__assert_func>
 8006116:	6922      	ldr	r2, [r4, #16]
 8006118:	f104 010c 	add.w	r1, r4, #12
 800611c:	3202      	adds	r2, #2
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	300c      	adds	r0, #12
 8006122:	f000 fd0d 	bl	8006b40 <memcpy>
 8006126:	4621      	mov	r1, r4
 8006128:	4638      	mov	r0, r7
 800612a:	f7ff ffa5 	bl	8006078 <_Bfree>
 800612e:	4644      	mov	r4, r8
 8006130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006134:	3501      	adds	r5, #1
 8006136:	615e      	str	r6, [r3, #20]
 8006138:	6125      	str	r5, [r4, #16]
 800613a:	4620      	mov	r0, r4
 800613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006140:	08007406 	.word	0x08007406
 8006144:	08007417 	.word	0x08007417

08006148 <__hi0bits>:
 8006148:	0c02      	lsrs	r2, r0, #16
 800614a:	0412      	lsls	r2, r2, #16
 800614c:	4603      	mov	r3, r0
 800614e:	b9ca      	cbnz	r2, 8006184 <__hi0bits+0x3c>
 8006150:	0403      	lsls	r3, r0, #16
 8006152:	2010      	movs	r0, #16
 8006154:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006158:	bf04      	itt	eq
 800615a:	021b      	lsleq	r3, r3, #8
 800615c:	3008      	addeq	r0, #8
 800615e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006162:	bf04      	itt	eq
 8006164:	011b      	lsleq	r3, r3, #4
 8006166:	3004      	addeq	r0, #4
 8006168:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800616c:	bf04      	itt	eq
 800616e:	009b      	lsleq	r3, r3, #2
 8006170:	3002      	addeq	r0, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	db05      	blt.n	8006182 <__hi0bits+0x3a>
 8006176:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800617a:	f100 0001 	add.w	r0, r0, #1
 800617e:	bf08      	it	eq
 8006180:	2020      	moveq	r0, #32
 8006182:	4770      	bx	lr
 8006184:	2000      	movs	r0, #0
 8006186:	e7e5      	b.n	8006154 <__hi0bits+0xc>

08006188 <__lo0bits>:
 8006188:	6803      	ldr	r3, [r0, #0]
 800618a:	4602      	mov	r2, r0
 800618c:	f013 0007 	ands.w	r0, r3, #7
 8006190:	d00b      	beq.n	80061aa <__lo0bits+0x22>
 8006192:	07d9      	lsls	r1, r3, #31
 8006194:	d421      	bmi.n	80061da <__lo0bits+0x52>
 8006196:	0798      	lsls	r0, r3, #30
 8006198:	bf49      	itett	mi
 800619a:	085b      	lsrmi	r3, r3, #1
 800619c:	089b      	lsrpl	r3, r3, #2
 800619e:	2001      	movmi	r0, #1
 80061a0:	6013      	strmi	r3, [r2, #0]
 80061a2:	bf5c      	itt	pl
 80061a4:	2002      	movpl	r0, #2
 80061a6:	6013      	strpl	r3, [r2, #0]
 80061a8:	4770      	bx	lr
 80061aa:	b299      	uxth	r1, r3
 80061ac:	b909      	cbnz	r1, 80061b2 <__lo0bits+0x2a>
 80061ae:	2010      	movs	r0, #16
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	b2d9      	uxtb	r1, r3
 80061b4:	b909      	cbnz	r1, 80061ba <__lo0bits+0x32>
 80061b6:	3008      	adds	r0, #8
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	0719      	lsls	r1, r3, #28
 80061bc:	bf04      	itt	eq
 80061be:	091b      	lsreq	r3, r3, #4
 80061c0:	3004      	addeq	r0, #4
 80061c2:	0799      	lsls	r1, r3, #30
 80061c4:	bf04      	itt	eq
 80061c6:	089b      	lsreq	r3, r3, #2
 80061c8:	3002      	addeq	r0, #2
 80061ca:	07d9      	lsls	r1, r3, #31
 80061cc:	d403      	bmi.n	80061d6 <__lo0bits+0x4e>
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	f100 0001 	add.w	r0, r0, #1
 80061d4:	d003      	beq.n	80061de <__lo0bits+0x56>
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4770      	bx	lr
 80061da:	2000      	movs	r0, #0
 80061dc:	4770      	bx	lr
 80061de:	2020      	movs	r0, #32
 80061e0:	4770      	bx	lr
	...

080061e4 <__i2b>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	460c      	mov	r4, r1
 80061e8:	2101      	movs	r1, #1
 80061ea:	f7ff ff05 	bl	8005ff8 <_Balloc>
 80061ee:	4602      	mov	r2, r0
 80061f0:	b928      	cbnz	r0, 80061fe <__i2b+0x1a>
 80061f2:	f240 1145 	movw	r1, #325	; 0x145
 80061f6:	4b04      	ldr	r3, [pc, #16]	; (8006208 <__i2b+0x24>)
 80061f8:	4804      	ldr	r0, [pc, #16]	; (800620c <__i2b+0x28>)
 80061fa:	f000 fcaf 	bl	8006b5c <__assert_func>
 80061fe:	2301      	movs	r3, #1
 8006200:	6144      	str	r4, [r0, #20]
 8006202:	6103      	str	r3, [r0, #16]
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	08007406 	.word	0x08007406
 800620c:	08007417 	.word	0x08007417

08006210 <__multiply>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	4691      	mov	r9, r2
 8006216:	690a      	ldr	r2, [r1, #16]
 8006218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800621c:	460c      	mov	r4, r1
 800621e:	429a      	cmp	r2, r3
 8006220:	bfbe      	ittt	lt
 8006222:	460b      	movlt	r3, r1
 8006224:	464c      	movlt	r4, r9
 8006226:	4699      	movlt	r9, r3
 8006228:	6927      	ldr	r7, [r4, #16]
 800622a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800622e:	68a3      	ldr	r3, [r4, #8]
 8006230:	6861      	ldr	r1, [r4, #4]
 8006232:	eb07 060a 	add.w	r6, r7, sl
 8006236:	42b3      	cmp	r3, r6
 8006238:	b085      	sub	sp, #20
 800623a:	bfb8      	it	lt
 800623c:	3101      	addlt	r1, #1
 800623e:	f7ff fedb 	bl	8005ff8 <_Balloc>
 8006242:	b930      	cbnz	r0, 8006252 <__multiply+0x42>
 8006244:	4602      	mov	r2, r0
 8006246:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800624a:	4b43      	ldr	r3, [pc, #268]	; (8006358 <__multiply+0x148>)
 800624c:	4843      	ldr	r0, [pc, #268]	; (800635c <__multiply+0x14c>)
 800624e:	f000 fc85 	bl	8006b5c <__assert_func>
 8006252:	f100 0514 	add.w	r5, r0, #20
 8006256:	462b      	mov	r3, r5
 8006258:	2200      	movs	r2, #0
 800625a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800625e:	4543      	cmp	r3, r8
 8006260:	d321      	bcc.n	80062a6 <__multiply+0x96>
 8006262:	f104 0314 	add.w	r3, r4, #20
 8006266:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800626a:	f109 0314 	add.w	r3, r9, #20
 800626e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	1b3a      	subs	r2, r7, r4
 8006276:	3a15      	subs	r2, #21
 8006278:	f022 0203 	bic.w	r2, r2, #3
 800627c:	3204      	adds	r2, #4
 800627e:	f104 0115 	add.w	r1, r4, #21
 8006282:	428f      	cmp	r7, r1
 8006284:	bf38      	it	cc
 8006286:	2204      	movcc	r2, #4
 8006288:	9201      	str	r2, [sp, #4]
 800628a:	9a02      	ldr	r2, [sp, #8]
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	429a      	cmp	r2, r3
 8006290:	d80c      	bhi.n	80062ac <__multiply+0x9c>
 8006292:	2e00      	cmp	r6, #0
 8006294:	dd03      	ble.n	800629e <__multiply+0x8e>
 8006296:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800629a:	2b00      	cmp	r3, #0
 800629c:	d05a      	beq.n	8006354 <__multiply+0x144>
 800629e:	6106      	str	r6, [r0, #16]
 80062a0:	b005      	add	sp, #20
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	f843 2b04 	str.w	r2, [r3], #4
 80062aa:	e7d8      	b.n	800625e <__multiply+0x4e>
 80062ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80062b0:	f1ba 0f00 	cmp.w	sl, #0
 80062b4:	d023      	beq.n	80062fe <__multiply+0xee>
 80062b6:	46a9      	mov	r9, r5
 80062b8:	f04f 0c00 	mov.w	ip, #0
 80062bc:	f104 0e14 	add.w	lr, r4, #20
 80062c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062c4:	f8d9 1000 	ldr.w	r1, [r9]
 80062c8:	fa1f fb82 	uxth.w	fp, r2
 80062cc:	b289      	uxth	r1, r1
 80062ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80062d2:	4461      	add	r1, ip
 80062d4:	f8d9 c000 	ldr.w	ip, [r9]
 80062d8:	0c12      	lsrs	r2, r2, #16
 80062da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062de:	fb0a c202 	mla	r2, sl, r2, ip
 80062e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062e6:	b289      	uxth	r1, r1
 80062e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062ec:	4577      	cmp	r7, lr
 80062ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062f2:	f849 1b04 	str.w	r1, [r9], #4
 80062f6:	d8e3      	bhi.n	80062c0 <__multiply+0xb0>
 80062f8:	9a01      	ldr	r2, [sp, #4]
 80062fa:	f845 c002 	str.w	ip, [r5, r2]
 80062fe:	9a03      	ldr	r2, [sp, #12]
 8006300:	3304      	adds	r3, #4
 8006302:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006306:	f1b9 0f00 	cmp.w	r9, #0
 800630a:	d021      	beq.n	8006350 <__multiply+0x140>
 800630c:	46ae      	mov	lr, r5
 800630e:	f04f 0a00 	mov.w	sl, #0
 8006312:	6829      	ldr	r1, [r5, #0]
 8006314:	f104 0c14 	add.w	ip, r4, #20
 8006318:	f8bc b000 	ldrh.w	fp, [ip]
 800631c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006320:	b289      	uxth	r1, r1
 8006322:	fb09 220b 	mla	r2, r9, fp, r2
 8006326:	4452      	add	r2, sl
 8006328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800632c:	f84e 1b04 	str.w	r1, [lr], #4
 8006330:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006334:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006338:	f8be 1000 	ldrh.w	r1, [lr]
 800633c:	4567      	cmp	r7, ip
 800633e:	fb09 110a 	mla	r1, r9, sl, r1
 8006342:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006346:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800634a:	d8e5      	bhi.n	8006318 <__multiply+0x108>
 800634c:	9a01      	ldr	r2, [sp, #4]
 800634e:	50a9      	str	r1, [r5, r2]
 8006350:	3504      	adds	r5, #4
 8006352:	e79a      	b.n	800628a <__multiply+0x7a>
 8006354:	3e01      	subs	r6, #1
 8006356:	e79c      	b.n	8006292 <__multiply+0x82>
 8006358:	08007406 	.word	0x08007406
 800635c:	08007417 	.word	0x08007417

08006360 <__pow5mult>:
 8006360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4615      	mov	r5, r2
 8006366:	f012 0203 	ands.w	r2, r2, #3
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	d007      	beq.n	8006380 <__pow5mult+0x20>
 8006370:	4c25      	ldr	r4, [pc, #148]	; (8006408 <__pow5mult+0xa8>)
 8006372:	3a01      	subs	r2, #1
 8006374:	2300      	movs	r3, #0
 8006376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800637a:	f7ff fe9f 	bl	80060bc <__multadd>
 800637e:	4607      	mov	r7, r0
 8006380:	10ad      	asrs	r5, r5, #2
 8006382:	d03d      	beq.n	8006400 <__pow5mult+0xa0>
 8006384:	69f4      	ldr	r4, [r6, #28]
 8006386:	b97c      	cbnz	r4, 80063a8 <__pow5mult+0x48>
 8006388:	2010      	movs	r0, #16
 800638a:	f7ff fd81 	bl	8005e90 <malloc>
 800638e:	4602      	mov	r2, r0
 8006390:	61f0      	str	r0, [r6, #28]
 8006392:	b928      	cbnz	r0, 80063a0 <__pow5mult+0x40>
 8006394:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006398:	4b1c      	ldr	r3, [pc, #112]	; (800640c <__pow5mult+0xac>)
 800639a:	481d      	ldr	r0, [pc, #116]	; (8006410 <__pow5mult+0xb0>)
 800639c:	f000 fbde 	bl	8006b5c <__assert_func>
 80063a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063a4:	6004      	str	r4, [r0, #0]
 80063a6:	60c4      	str	r4, [r0, #12]
 80063a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80063ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063b0:	b94c      	cbnz	r4, 80063c6 <__pow5mult+0x66>
 80063b2:	f240 2171 	movw	r1, #625	; 0x271
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ff14 	bl	80061e4 <__i2b>
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	f04f 0900 	mov.w	r9, #0
 80063ca:	07eb      	lsls	r3, r5, #31
 80063cc:	d50a      	bpl.n	80063e4 <__pow5mult+0x84>
 80063ce:	4639      	mov	r1, r7
 80063d0:	4622      	mov	r2, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff ff1c 	bl	8006210 <__multiply>
 80063d8:	4680      	mov	r8, r0
 80063da:	4639      	mov	r1, r7
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff fe4b 	bl	8006078 <_Bfree>
 80063e2:	4647      	mov	r7, r8
 80063e4:	106d      	asrs	r5, r5, #1
 80063e6:	d00b      	beq.n	8006400 <__pow5mult+0xa0>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	b938      	cbnz	r0, 80063fc <__pow5mult+0x9c>
 80063ec:	4622      	mov	r2, r4
 80063ee:	4621      	mov	r1, r4
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff ff0d 	bl	8006210 <__multiply>
 80063f6:	6020      	str	r0, [r4, #0]
 80063f8:	f8c0 9000 	str.w	r9, [r0]
 80063fc:	4604      	mov	r4, r0
 80063fe:	e7e4      	b.n	80063ca <__pow5mult+0x6a>
 8006400:	4638      	mov	r0, r7
 8006402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006406:	bf00      	nop
 8006408:	08007560 	.word	0x08007560
 800640c:	08007397 	.word	0x08007397
 8006410:	08007417 	.word	0x08007417

08006414 <__lshift>:
 8006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	460c      	mov	r4, r1
 800641a:	4607      	mov	r7, r0
 800641c:	4691      	mov	r9, r2
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6849      	ldr	r1, [r1, #4]
 8006422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800642c:	f108 0601 	add.w	r6, r8, #1
 8006430:	42b3      	cmp	r3, r6
 8006432:	db0b      	blt.n	800644c <__lshift+0x38>
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff fddf 	bl	8005ff8 <_Balloc>
 800643a:	4605      	mov	r5, r0
 800643c:	b948      	cbnz	r0, 8006452 <__lshift+0x3e>
 800643e:	4602      	mov	r2, r0
 8006440:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006444:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <__lshift+0xd0>)
 8006446:	4828      	ldr	r0, [pc, #160]	; (80064e8 <__lshift+0xd4>)
 8006448:	f000 fb88 	bl	8006b5c <__assert_func>
 800644c:	3101      	adds	r1, #1
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	e7ee      	b.n	8006430 <__lshift+0x1c>
 8006452:	2300      	movs	r3, #0
 8006454:	f100 0114 	add.w	r1, r0, #20
 8006458:	f100 0210 	add.w	r2, r0, #16
 800645c:	4618      	mov	r0, r3
 800645e:	4553      	cmp	r3, sl
 8006460:	db33      	blt.n	80064ca <__lshift+0xb6>
 8006462:	6920      	ldr	r0, [r4, #16]
 8006464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006468:	f104 0314 	add.w	r3, r4, #20
 800646c:	f019 091f 	ands.w	r9, r9, #31
 8006470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006478:	d02b      	beq.n	80064d2 <__lshift+0xbe>
 800647a:	468a      	mov	sl, r1
 800647c:	2200      	movs	r2, #0
 800647e:	f1c9 0e20 	rsb	lr, r9, #32
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	fa00 f009 	lsl.w	r0, r0, r9
 8006488:	4310      	orrs	r0, r2
 800648a:	f84a 0b04 	str.w	r0, [sl], #4
 800648e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006492:	459c      	cmp	ip, r3
 8006494:	fa22 f20e 	lsr.w	r2, r2, lr
 8006498:	d8f3      	bhi.n	8006482 <__lshift+0x6e>
 800649a:	ebac 0304 	sub.w	r3, ip, r4
 800649e:	3b15      	subs	r3, #21
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	3304      	adds	r3, #4
 80064a6:	f104 0015 	add.w	r0, r4, #21
 80064aa:	4584      	cmp	ip, r0
 80064ac:	bf38      	it	cc
 80064ae:	2304      	movcc	r3, #4
 80064b0:	50ca      	str	r2, [r1, r3]
 80064b2:	b10a      	cbz	r2, 80064b8 <__lshift+0xa4>
 80064b4:	f108 0602 	add.w	r6, r8, #2
 80064b8:	3e01      	subs	r6, #1
 80064ba:	4638      	mov	r0, r7
 80064bc:	4621      	mov	r1, r4
 80064be:	612e      	str	r6, [r5, #16]
 80064c0:	f7ff fdda 	bl	8006078 <_Bfree>
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ce:	3301      	adds	r3, #1
 80064d0:	e7c5      	b.n	800645e <__lshift+0x4a>
 80064d2:	3904      	subs	r1, #4
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	459c      	cmp	ip, r3
 80064da:	f841 2f04 	str.w	r2, [r1, #4]!
 80064de:	d8f9      	bhi.n	80064d4 <__lshift+0xc0>
 80064e0:	e7ea      	b.n	80064b8 <__lshift+0xa4>
 80064e2:	bf00      	nop
 80064e4:	08007406 	.word	0x08007406
 80064e8:	08007417 	.word	0x08007417

080064ec <__mcmp>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	690a      	ldr	r2, [r1, #16]
 80064f0:	6900      	ldr	r0, [r0, #16]
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	1a80      	subs	r0, r0, r2
 80064f6:	d10d      	bne.n	8006514 <__mcmp+0x28>
 80064f8:	3314      	adds	r3, #20
 80064fa:	3114      	adds	r1, #20
 80064fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800650c:	4295      	cmp	r5, r2
 800650e:	d002      	beq.n	8006516 <__mcmp+0x2a>
 8006510:	d304      	bcc.n	800651c <__mcmp+0x30>
 8006512:	2001      	movs	r0, #1
 8006514:	bd30      	pop	{r4, r5, pc}
 8006516:	42a3      	cmp	r3, r4
 8006518:	d3f4      	bcc.n	8006504 <__mcmp+0x18>
 800651a:	e7fb      	b.n	8006514 <__mcmp+0x28>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	e7f8      	b.n	8006514 <__mcmp+0x28>
	...

08006524 <__mdiff>:
 8006524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	460d      	mov	r5, r1
 800652a:	4607      	mov	r7, r0
 800652c:	4611      	mov	r1, r2
 800652e:	4628      	mov	r0, r5
 8006530:	4614      	mov	r4, r2
 8006532:	f7ff ffdb 	bl	80064ec <__mcmp>
 8006536:	1e06      	subs	r6, r0, #0
 8006538:	d111      	bne.n	800655e <__mdiff+0x3a>
 800653a:	4631      	mov	r1, r6
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fd5b 	bl	8005ff8 <_Balloc>
 8006542:	4602      	mov	r2, r0
 8006544:	b928      	cbnz	r0, 8006552 <__mdiff+0x2e>
 8006546:	f240 2137 	movw	r1, #567	; 0x237
 800654a:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <__mdiff+0x110>)
 800654c:	483a      	ldr	r0, [pc, #232]	; (8006638 <__mdiff+0x114>)
 800654e:	f000 fb05 	bl	8006b5c <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006558:	4610      	mov	r0, r2
 800655a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	bfa4      	itt	ge
 8006560:	4623      	movge	r3, r4
 8006562:	462c      	movge	r4, r5
 8006564:	4638      	mov	r0, r7
 8006566:	6861      	ldr	r1, [r4, #4]
 8006568:	bfa6      	itte	ge
 800656a:	461d      	movge	r5, r3
 800656c:	2600      	movge	r6, #0
 800656e:	2601      	movlt	r6, #1
 8006570:	f7ff fd42 	bl	8005ff8 <_Balloc>
 8006574:	4602      	mov	r2, r0
 8006576:	b918      	cbnz	r0, 8006580 <__mdiff+0x5c>
 8006578:	f240 2145 	movw	r1, #581	; 0x245
 800657c:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <__mdiff+0x110>)
 800657e:	e7e5      	b.n	800654c <__mdiff+0x28>
 8006580:	f102 0814 	add.w	r8, r2, #20
 8006584:	46c2      	mov	sl, r8
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	6927      	ldr	r7, [r4, #16]
 800658c:	60c6      	str	r6, [r0, #12]
 800658e:	692e      	ldr	r6, [r5, #16]
 8006590:	f104 0014 	add.w	r0, r4, #20
 8006594:	f105 0914 	add.w	r9, r5, #20
 8006598:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800659c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065a0:	3410      	adds	r4, #16
 80065a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80065a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80065aa:	fa1f f18b 	uxth.w	r1, fp
 80065ae:	4461      	add	r1, ip
 80065b0:	fa1f fc83 	uxth.w	ip, r3
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	eba1 010c 	sub.w	r1, r1, ip
 80065ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065c2:	b289      	uxth	r1, r1
 80065c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80065c8:	454e      	cmp	r6, r9
 80065ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065ce:	f84a 1b04 	str.w	r1, [sl], #4
 80065d2:	d8e6      	bhi.n	80065a2 <__mdiff+0x7e>
 80065d4:	1b73      	subs	r3, r6, r5
 80065d6:	3b15      	subs	r3, #21
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	3515      	adds	r5, #21
 80065de:	3304      	adds	r3, #4
 80065e0:	42ae      	cmp	r6, r5
 80065e2:	bf38      	it	cc
 80065e4:	2304      	movcc	r3, #4
 80065e6:	4418      	add	r0, r3
 80065e8:	4443      	add	r3, r8
 80065ea:	461e      	mov	r6, r3
 80065ec:	4605      	mov	r5, r0
 80065ee:	4575      	cmp	r5, lr
 80065f0:	d30e      	bcc.n	8006610 <__mdiff+0xec>
 80065f2:	f10e 0103 	add.w	r1, lr, #3
 80065f6:	1a09      	subs	r1, r1, r0
 80065f8:	f021 0103 	bic.w	r1, r1, #3
 80065fc:	3803      	subs	r0, #3
 80065fe:	4586      	cmp	lr, r0
 8006600:	bf38      	it	cc
 8006602:	2100      	movcc	r1, #0
 8006604:	440b      	add	r3, r1
 8006606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800660a:	b189      	cbz	r1, 8006630 <__mdiff+0x10c>
 800660c:	6117      	str	r7, [r2, #16]
 800660e:	e7a3      	b.n	8006558 <__mdiff+0x34>
 8006610:	f855 8b04 	ldr.w	r8, [r5], #4
 8006614:	fa1f f188 	uxth.w	r1, r8
 8006618:	4461      	add	r1, ip
 800661a:	140c      	asrs	r4, r1, #16
 800661c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006620:	b289      	uxth	r1, r1
 8006622:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006626:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800662a:	f846 1b04 	str.w	r1, [r6], #4
 800662e:	e7de      	b.n	80065ee <__mdiff+0xca>
 8006630:	3f01      	subs	r7, #1
 8006632:	e7e8      	b.n	8006606 <__mdiff+0xe2>
 8006634:	08007406 	.word	0x08007406
 8006638:	08007417 	.word	0x08007417

0800663c <__d2b>:
 800663c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663e:	2101      	movs	r1, #1
 8006640:	4617      	mov	r7, r2
 8006642:	461c      	mov	r4, r3
 8006644:	9e08      	ldr	r6, [sp, #32]
 8006646:	f7ff fcd7 	bl	8005ff8 <_Balloc>
 800664a:	4605      	mov	r5, r0
 800664c:	b930      	cbnz	r0, 800665c <__d2b+0x20>
 800664e:	4602      	mov	r2, r0
 8006650:	f240 310f 	movw	r1, #783	; 0x30f
 8006654:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <__d2b+0xa4>)
 8006656:	4823      	ldr	r0, [pc, #140]	; (80066e4 <__d2b+0xa8>)
 8006658:	f000 fa80 	bl	8006b5c <__assert_func>
 800665c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006660:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006664:	bb24      	cbnz	r4, 80066b0 <__d2b+0x74>
 8006666:	2f00      	cmp	r7, #0
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	d026      	beq.n	80066ba <__d2b+0x7e>
 800666c:	4668      	mov	r0, sp
 800666e:	9700      	str	r7, [sp, #0]
 8006670:	f7ff fd8a 	bl	8006188 <__lo0bits>
 8006674:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006678:	b1e8      	cbz	r0, 80066b6 <__d2b+0x7a>
 800667a:	f1c0 0320 	rsb	r3, r0, #32
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	430b      	orrs	r3, r1
 8006684:	40c2      	lsrs	r2, r0
 8006686:	616b      	str	r3, [r5, #20]
 8006688:	9201      	str	r2, [sp, #4]
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2102      	movne	r1, #2
 8006692:	2101      	moveq	r1, #1
 8006694:	61ab      	str	r3, [r5, #24]
 8006696:	6129      	str	r1, [r5, #16]
 8006698:	b1bc      	cbz	r4, 80066ca <__d2b+0x8e>
 800669a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800669e:	4404      	add	r4, r0
 80066a0:	6034      	str	r4, [r6, #0]
 80066a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	4628      	mov	r0, r5
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b4:	e7d7      	b.n	8006666 <__d2b+0x2a>
 80066b6:	6169      	str	r1, [r5, #20]
 80066b8:	e7e7      	b.n	800668a <__d2b+0x4e>
 80066ba:	a801      	add	r0, sp, #4
 80066bc:	f7ff fd64 	bl	8006188 <__lo0bits>
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	2101      	movs	r1, #1
 80066c4:	616b      	str	r3, [r5, #20]
 80066c6:	3020      	adds	r0, #32
 80066c8:	e7e5      	b.n	8006696 <__d2b+0x5a>
 80066ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066ce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80066d2:	6030      	str	r0, [r6, #0]
 80066d4:	6918      	ldr	r0, [r3, #16]
 80066d6:	f7ff fd37 	bl	8006148 <__hi0bits>
 80066da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066de:	e7e2      	b.n	80066a6 <__d2b+0x6a>
 80066e0:	08007406 	.word	0x08007406
 80066e4:	08007417 	.word	0x08007417

080066e8 <__ssputs_r>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	461f      	mov	r7, r3
 80066ee:	688e      	ldr	r6, [r1, #8]
 80066f0:	4682      	mov	sl, r0
 80066f2:	42be      	cmp	r6, r7
 80066f4:	460c      	mov	r4, r1
 80066f6:	4690      	mov	r8, r2
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	d82c      	bhi.n	8006756 <__ssputs_r+0x6e>
 80066fc:	898a      	ldrh	r2, [r1, #12]
 80066fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006702:	d026      	beq.n	8006752 <__ssputs_r+0x6a>
 8006704:	6965      	ldr	r5, [r4, #20]
 8006706:	6909      	ldr	r1, [r1, #16]
 8006708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800670c:	eba3 0901 	sub.w	r9, r3, r1
 8006710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006714:	1c7b      	adds	r3, r7, #1
 8006716:	444b      	add	r3, r9
 8006718:	106d      	asrs	r5, r5, #1
 800671a:	429d      	cmp	r5, r3
 800671c:	bf38      	it	cc
 800671e:	461d      	movcc	r5, r3
 8006720:	0553      	lsls	r3, r2, #21
 8006722:	d527      	bpl.n	8006774 <__ssputs_r+0x8c>
 8006724:	4629      	mov	r1, r5
 8006726:	f7ff fbdb 	bl	8005ee0 <_malloc_r>
 800672a:	4606      	mov	r6, r0
 800672c:	b360      	cbz	r0, 8006788 <__ssputs_r+0xa0>
 800672e:	464a      	mov	r2, r9
 8006730:	6921      	ldr	r1, [r4, #16]
 8006732:	f000 fa05 	bl	8006b40 <memcpy>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	6126      	str	r6, [r4, #16]
 8006744:	444e      	add	r6, r9
 8006746:	6026      	str	r6, [r4, #0]
 8006748:	463e      	mov	r6, r7
 800674a:	6165      	str	r5, [r4, #20]
 800674c:	eba5 0509 	sub.w	r5, r5, r9
 8006750:	60a5      	str	r5, [r4, #8]
 8006752:	42be      	cmp	r6, r7
 8006754:	d900      	bls.n	8006758 <__ssputs_r+0x70>
 8006756:	463e      	mov	r6, r7
 8006758:	4632      	mov	r2, r6
 800675a:	4641      	mov	r1, r8
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	f000 f9c5 	bl	8006aec <memmove>
 8006762:	2000      	movs	r0, #0
 8006764:	68a3      	ldr	r3, [r4, #8]
 8006766:	1b9b      	subs	r3, r3, r6
 8006768:	60a3      	str	r3, [r4, #8]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	4433      	add	r3, r6
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	462a      	mov	r2, r5
 8006776:	f000 fa35 	bl	8006be4 <_realloc_r>
 800677a:	4606      	mov	r6, r0
 800677c:	2800      	cmp	r0, #0
 800677e:	d1e0      	bne.n	8006742 <__ssputs_r+0x5a>
 8006780:	4650      	mov	r0, sl
 8006782:	6921      	ldr	r1, [r4, #16]
 8006784:	f7ff fb3c 	bl	8005e00 <_free_r>
 8006788:	230c      	movs	r3, #12
 800678a:	f8ca 3000 	str.w	r3, [sl]
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	e7e9      	b.n	8006770 <__ssputs_r+0x88>

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4698      	mov	r8, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	4607      	mov	r7, r0
 80067a6:	061b      	lsls	r3, r3, #24
 80067a8:	460d      	mov	r5, r1
 80067aa:	4614      	mov	r4, r2
 80067ac:	b09d      	sub	sp, #116	; 0x74
 80067ae:	d50e      	bpl.n	80067ce <_svfiprintf_r+0x32>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b963      	cbnz	r3, 80067ce <_svfiprintf_r+0x32>
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	f7ff fb93 	bl	8005ee0 <_malloc_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	6128      	str	r0, [r5, #16]
 80067be:	b920      	cbnz	r0, 80067ca <_svfiprintf_r+0x2e>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e0d0      	b.n	800696c <_svfiprintf_r+0x1d0>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	616b      	str	r3, [r5, #20]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	2320      	movs	r3, #32
 80067d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d8:	2330      	movs	r3, #48	; 0x30
 80067da:	f04f 0901 	mov.w	r9, #1
 80067de:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006984 <_svfiprintf_r+0x1e8>
 80067e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ea:	4623      	mov	r3, r4
 80067ec:	469a      	mov	sl, r3
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b10a      	cbz	r2, 80067f8 <_svfiprintf_r+0x5c>
 80067f4:	2a25      	cmp	r2, #37	; 0x25
 80067f6:	d1f9      	bne.n	80067ec <_svfiprintf_r+0x50>
 80067f8:	ebba 0b04 	subs.w	fp, sl, r4
 80067fc:	d00b      	beq.n	8006816 <_svfiprintf_r+0x7a>
 80067fe:	465b      	mov	r3, fp
 8006800:	4622      	mov	r2, r4
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff6f 	bl	80066e8 <__ssputs_r>
 800680a:	3001      	adds	r0, #1
 800680c:	f000 80a9 	beq.w	8006962 <_svfiprintf_r+0x1c6>
 8006810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006812:	445a      	add	r2, fp
 8006814:	9209      	str	r2, [sp, #36]	; 0x24
 8006816:	f89a 3000 	ldrb.w	r3, [sl]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a1 	beq.w	8006962 <_svfiprintf_r+0x1c6>
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006836:	931a      	str	r3, [sp, #104]	; 0x68
 8006838:	4654      	mov	r4, sl
 800683a:	2205      	movs	r2, #5
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	4850      	ldr	r0, [pc, #320]	; (8006984 <_svfiprintf_r+0x1e8>)
 8006842:	f7fe fc61 	bl	8005108 <memchr>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	b9d8      	cbnz	r0, 8006882 <_svfiprintf_r+0xe6>
 800684a:	06d0      	lsls	r0, r2, #27
 800684c:	bf44      	itt	mi
 800684e:	2320      	movmi	r3, #32
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006854:	0711      	lsls	r1, r2, #28
 8006856:	bf44      	itt	mi
 8006858:	232b      	movmi	r3, #43	; 0x2b
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xf6>
 8006866:	4654      	mov	r4, sl
 8006868:	2000      	movs	r0, #0
 800686a:	f04f 0c0a 	mov.w	ip, #10
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	4621      	mov	r1, r4
 8006872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006876:	3b30      	subs	r3, #48	; 0x30
 8006878:	2b09      	cmp	r3, #9
 800687a:	d94d      	bls.n	8006918 <_svfiprintf_r+0x17c>
 800687c:	b1b0      	cbz	r0, 80068ac <_svfiprintf_r+0x110>
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	e014      	b.n	80068ac <_svfiprintf_r+0x110>
 8006882:	eba0 0308 	sub.w	r3, r0, r8
 8006886:	fa09 f303 	lsl.w	r3, r9, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	46a2      	mov	sl, r4
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	e7d2      	b.n	8006838 <_svfiprintf_r+0x9c>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbb      	ittet	lt
 800689e:	425b      	neglt	r3, r3
 80068a0:	f042 0202 	orrlt.w	r2, r2, #2
 80068a4:	9307      	strge	r3, [sp, #28]
 80068a6:	9307      	strlt	r3, [sp, #28]
 80068a8:	bfb8      	it	lt
 80068aa:	9204      	strlt	r2, [sp, #16]
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2b2e      	cmp	r3, #46	; 0x2e
 80068b0:	d10c      	bne.n	80068cc <_svfiprintf_r+0x130>
 80068b2:	7863      	ldrb	r3, [r4, #1]
 80068b4:	2b2a      	cmp	r3, #42	; 0x2a
 80068b6:	d134      	bne.n	8006922 <_svfiprintf_r+0x186>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	3402      	adds	r4, #2
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	9203      	str	r2, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006988 <_svfiprintf_r+0x1ec>
 80068d0:	2203      	movs	r2, #3
 80068d2:	4650      	mov	r0, sl
 80068d4:	7821      	ldrb	r1, [r4, #0]
 80068d6:	f7fe fc17 	bl	8005108 <memchr>
 80068da:	b138      	cbz	r0, 80068ec <_svfiprintf_r+0x150>
 80068dc:	2240      	movs	r2, #64	; 0x40
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	eba0 000a 	sub.w	r0, r0, sl
 80068e4:	4082      	lsls	r2, r0
 80068e6:	4313      	orrs	r3, r2
 80068e8:	3401      	adds	r4, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f0:	2206      	movs	r2, #6
 80068f2:	4826      	ldr	r0, [pc, #152]	; (800698c <_svfiprintf_r+0x1f0>)
 80068f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068f8:	f7fe fc06 	bl	8005108 <memchr>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d038      	beq.n	8006972 <_svfiprintf_r+0x1d6>
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <_svfiprintf_r+0x1f4>)
 8006902:	bb1b      	cbnz	r3, 800694c <_svfiprintf_r+0x1b0>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	3307      	adds	r3, #7
 8006908:	f023 0307 	bic.w	r3, r3, #7
 800690c:	3308      	adds	r3, #8
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	4433      	add	r3, r6
 8006914:	9309      	str	r3, [sp, #36]	; 0x24
 8006916:	e768      	b.n	80067ea <_svfiprintf_r+0x4e>
 8006918:	460c      	mov	r4, r1
 800691a:	2001      	movs	r0, #1
 800691c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006920:	e7a6      	b.n	8006870 <_svfiprintf_r+0xd4>
 8006922:	2300      	movs	r3, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4619      	mov	r1, r3
 800692a:	3401      	adds	r4, #1
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	4620      	mov	r0, r4
 8006930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006934:	3a30      	subs	r2, #48	; 0x30
 8006936:	2a09      	cmp	r2, #9
 8006938:	d903      	bls.n	8006942 <_svfiprintf_r+0x1a6>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0c6      	beq.n	80068cc <_svfiprintf_r+0x130>
 800693e:	9105      	str	r1, [sp, #20]
 8006940:	e7c4      	b.n	80068cc <_svfiprintf_r+0x130>
 8006942:	4604      	mov	r4, r0
 8006944:	2301      	movs	r3, #1
 8006946:	fb0c 2101 	mla	r1, ip, r1, r2
 800694a:	e7f0      	b.n	800692e <_svfiprintf_r+0x192>
 800694c:	ab03      	add	r3, sp, #12
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	462a      	mov	r2, r5
 8006952:	4638      	mov	r0, r7
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <_svfiprintf_r+0x1f8>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	f7fd fe82 	bl	8004660 <_printf_float>
 800695c:	1c42      	adds	r2, r0, #1
 800695e:	4606      	mov	r6, r0
 8006960:	d1d6      	bne.n	8006910 <_svfiprintf_r+0x174>
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	065b      	lsls	r3, r3, #25
 8006966:	f53f af2d 	bmi.w	80067c4 <_svfiprintf_r+0x28>
 800696a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696c:	b01d      	add	sp, #116	; 0x74
 800696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006972:	ab03      	add	r3, sp, #12
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	462a      	mov	r2, r5
 8006978:	4638      	mov	r0, r7
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <_svfiprintf_r+0x1f8>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	f7fe f90f 	bl	8004ba0 <_printf_i>
 8006982:	e7eb      	b.n	800695c <_svfiprintf_r+0x1c0>
 8006984:	0800756c 	.word	0x0800756c
 8006988:	08007572 	.word	0x08007572
 800698c:	08007576 	.word	0x08007576
 8006990:	08004661 	.word	0x08004661
 8006994:	080066e9 	.word	0x080066e9

08006998 <__sflush_r>:
 8006998:	898a      	ldrh	r2, [r1, #12]
 800699a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699c:	4605      	mov	r5, r0
 800699e:	0710      	lsls	r0, r2, #28
 80069a0:	460c      	mov	r4, r1
 80069a2:	d457      	bmi.n	8006a54 <__sflush_r+0xbc>
 80069a4:	684b      	ldr	r3, [r1, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dc04      	bgt.n	80069b4 <__sflush_r+0x1c>
 80069aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dc01      	bgt.n	80069b4 <__sflush_r+0x1c>
 80069b0:	2000      	movs	r0, #0
 80069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d0fa      	beq.n	80069b0 <__sflush_r+0x18>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c0:	682f      	ldr	r7, [r5, #0]
 80069c2:	6a21      	ldr	r1, [r4, #32]
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	d032      	beq.n	8006a2e <__sflush_r+0x96>
 80069c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	075a      	lsls	r2, r3, #29
 80069ce:	d505      	bpl.n	80069dc <__sflush_r+0x44>
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	1ac0      	subs	r0, r0, r3
 80069d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069d6:	b10b      	cbz	r3, 80069dc <__sflush_r+0x44>
 80069d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069da:	1ac0      	subs	r0, r0, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	4602      	mov	r2, r0
 80069e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e2:	4628      	mov	r0, r5
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	47b0      	blx	r6
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	d106      	bne.n	80069fc <__sflush_r+0x64>
 80069ee:	6829      	ldr	r1, [r5, #0]
 80069f0:	291d      	cmp	r1, #29
 80069f2:	d82b      	bhi.n	8006a4c <__sflush_r+0xb4>
 80069f4:	4a28      	ldr	r2, [pc, #160]	; (8006a98 <__sflush_r+0x100>)
 80069f6:	410a      	asrs	r2, r1
 80069f8:	07d6      	lsls	r6, r2, #31
 80069fa:	d427      	bmi.n	8006a4c <__sflush_r+0xb4>
 80069fc:	2200      	movs	r2, #0
 80069fe:	6062      	str	r2, [r4, #4]
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	6022      	str	r2, [r4, #0]
 8006a06:	d504      	bpl.n	8006a12 <__sflush_r+0x7a>
 8006a08:	1c42      	adds	r2, r0, #1
 8006a0a:	d101      	bne.n	8006a10 <__sflush_r+0x78>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b903      	cbnz	r3, 8006a12 <__sflush_r+0x7a>
 8006a10:	6560      	str	r0, [r4, #84]	; 0x54
 8006a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a14:	602f      	str	r7, [r5, #0]
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d0ca      	beq.n	80069b0 <__sflush_r+0x18>
 8006a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	d002      	beq.n	8006a28 <__sflush_r+0x90>
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7ff f9ec 	bl	8005e00 <_free_r>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	6360      	str	r0, [r4, #52]	; 0x34
 8006a2c:	e7c1      	b.n	80069b2 <__sflush_r+0x1a>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b0      	blx	r6
 8006a34:	1c41      	adds	r1, r0, #1
 8006a36:	d1c8      	bne.n	80069ca <__sflush_r+0x32>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0c5      	beq.n	80069ca <__sflush_r+0x32>
 8006a3e:	2b1d      	cmp	r3, #29
 8006a40:	d001      	beq.n	8006a46 <__sflush_r+0xae>
 8006a42:	2b16      	cmp	r3, #22
 8006a44:	d101      	bne.n	8006a4a <__sflush_r+0xb2>
 8006a46:	602f      	str	r7, [r5, #0]
 8006a48:	e7b2      	b.n	80069b0 <__sflush_r+0x18>
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	e7ae      	b.n	80069b2 <__sflush_r+0x1a>
 8006a54:	690f      	ldr	r7, [r1, #16]
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	d0aa      	beq.n	80069b0 <__sflush_r+0x18>
 8006a5a:	0793      	lsls	r3, r2, #30
 8006a5c:	bf18      	it	ne
 8006a5e:	2300      	movne	r3, #0
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	bf08      	it	eq
 8006a64:	694b      	ldreq	r3, [r1, #20]
 8006a66:	1bf6      	subs	r6, r6, r7
 8006a68:	600f      	str	r7, [r1, #0]
 8006a6a:	608b      	str	r3, [r1, #8]
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	dd9f      	ble.n	80069b0 <__sflush_r+0x18>
 8006a70:	4633      	mov	r3, r6
 8006a72:	463a      	mov	r2, r7
 8006a74:	4628      	mov	r0, r5
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a7c:	47e0      	blx	ip
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	dc06      	bgt.n	8006a90 <__sflush_r+0xf8>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	e790      	b.n	80069b2 <__sflush_r+0x1a>
 8006a90:	4407      	add	r7, r0
 8006a92:	1a36      	subs	r6, r6, r0
 8006a94:	e7ea      	b.n	8006a6c <__sflush_r+0xd4>
 8006a96:	bf00      	nop
 8006a98:	dfbffffe 	.word	0xdfbffffe

08006a9c <_fflush_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b913      	cbnz	r3, 8006aac <_fflush_r+0x10>
 8006aa6:	2500      	movs	r5, #0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	b118      	cbz	r0, 8006ab6 <_fflush_r+0x1a>
 8006aae:	6a03      	ldr	r3, [r0, #32]
 8006ab0:	b90b      	cbnz	r3, 8006ab6 <_fflush_r+0x1a>
 8006ab2:	f7fe fa11 	bl	8004ed8 <__sinit>
 8006ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f3      	beq.n	8006aa6 <_fflush_r+0xa>
 8006abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ac0:	07d0      	lsls	r0, r2, #31
 8006ac2:	d404      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac4:	0599      	lsls	r1, r3, #22
 8006ac6:	d402      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aca:	f7fe fb1b 	bl	8005104 <__retarget_lock_acquire_recursive>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	f7ff ff61 	bl	8006998 <__sflush_r>
 8006ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad8:	4605      	mov	r5, r0
 8006ada:	07da      	lsls	r2, r3, #31
 8006adc:	d4e4      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	059b      	lsls	r3, r3, #22
 8006ae2:	d4e1      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f7fe fb0e 	bl	8005106 <__retarget_lock_release_recursive>
 8006aea:	e7dd      	b.n	8006aa8 <_fflush_r+0xc>

08006aec <memmove>:
 8006aec:	4288      	cmp	r0, r1
 8006aee:	b510      	push	{r4, lr}
 8006af0:	eb01 0402 	add.w	r4, r1, r2
 8006af4:	d902      	bls.n	8006afc <memmove+0x10>
 8006af6:	4284      	cmp	r4, r0
 8006af8:	4623      	mov	r3, r4
 8006afa:	d807      	bhi.n	8006b0c <memmove+0x20>
 8006afc:	1e43      	subs	r3, r0, #1
 8006afe:	42a1      	cmp	r1, r4
 8006b00:	d008      	beq.n	8006b14 <memmove+0x28>
 8006b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b0a:	e7f8      	b.n	8006afe <memmove+0x12>
 8006b0c:	4601      	mov	r1, r0
 8006b0e:	4402      	add	r2, r0
 8006b10:	428a      	cmp	r2, r1
 8006b12:	d100      	bne.n	8006b16 <memmove+0x2a>
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b1e:	e7f7      	b.n	8006b10 <memmove+0x24>

08006b20 <_sbrk_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	2300      	movs	r3, #0
 8006b24:	4d05      	ldr	r5, [pc, #20]	; (8006b3c <_sbrk_r+0x1c>)
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fb faf2 	bl	8002114 <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_sbrk_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_sbrk_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000428 	.word	0x20000428

08006b40 <memcpy>:
 8006b40:	440a      	add	r2, r1
 8006b42:	4291      	cmp	r1, r2
 8006b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b48:	d100      	bne.n	8006b4c <memcpy+0xc>
 8006b4a:	4770      	bx	lr
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b52:	4291      	cmp	r1, r2
 8006b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b58:	d1f9      	bne.n	8006b4e <memcpy+0xe>
 8006b5a:	bd10      	pop	{r4, pc}

08006b5c <__assert_func>:
 8006b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b5e:	4614      	mov	r4, r2
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <__assert_func+0x2c>)
 8006b64:	4605      	mov	r5, r0
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68d8      	ldr	r0, [r3, #12]
 8006b6a:	b14c      	cbz	r4, 8006b80 <__assert_func+0x24>
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <__assert_func+0x30>)
 8006b6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b72:	9100      	str	r1, [sp, #0]
 8006b74:	462b      	mov	r3, r5
 8006b76:	4906      	ldr	r1, [pc, #24]	; (8006b90 <__assert_func+0x34>)
 8006b78:	f000 f870 	bl	8006c5c <fiprintf>
 8006b7c:	f000 f880 	bl	8006c80 <abort>
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <__assert_func+0x38>)
 8006b82:	461c      	mov	r4, r3
 8006b84:	e7f3      	b.n	8006b6e <__assert_func+0x12>
 8006b86:	bf00      	nop
 8006b88:	20000074 	.word	0x20000074
 8006b8c:	08007587 	.word	0x08007587
 8006b90:	08007594 	.word	0x08007594
 8006b94:	080075c2 	.word	0x080075c2

08006b98 <_calloc_r>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	fba1 5402 	umull	r5, r4, r1, r2
 8006b9e:	b934      	cbnz	r4, 8006bae <_calloc_r+0x16>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7ff f99d 	bl	8005ee0 <_malloc_r>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	b928      	cbnz	r0, 8006bb6 <_calloc_r+0x1e>
 8006baa:	4630      	mov	r0, r6
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	220c      	movs	r2, #12
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	6002      	str	r2, [r0, #0]
 8006bb4:	e7f9      	b.n	8006baa <_calloc_r+0x12>
 8006bb6:	462a      	mov	r2, r5
 8006bb8:	4621      	mov	r1, r4
 8006bba:	f7fe fa26 	bl	800500a <memset>
 8006bbe:	e7f4      	b.n	8006baa <_calloc_r+0x12>

08006bc0 <__ascii_mbtowc>:
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	b901      	cbnz	r1, 8006bc6 <__ascii_mbtowc+0x6>
 8006bc4:	a901      	add	r1, sp, #4
 8006bc6:	b142      	cbz	r2, 8006bda <__ascii_mbtowc+0x1a>
 8006bc8:	b14b      	cbz	r3, 8006bde <__ascii_mbtowc+0x1e>
 8006bca:	7813      	ldrb	r3, [r2, #0]
 8006bcc:	600b      	str	r3, [r1, #0]
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	1e10      	subs	r0, r2, #0
 8006bd2:	bf18      	it	ne
 8006bd4:	2001      	movne	r0, #1
 8006bd6:	b002      	add	sp, #8
 8006bd8:	4770      	bx	lr
 8006bda:	4610      	mov	r0, r2
 8006bdc:	e7fb      	b.n	8006bd6 <__ascii_mbtowc+0x16>
 8006bde:	f06f 0001 	mvn.w	r0, #1
 8006be2:	e7f8      	b.n	8006bd6 <__ascii_mbtowc+0x16>

08006be4 <_realloc_r>:
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	4680      	mov	r8, r0
 8006bea:	4614      	mov	r4, r2
 8006bec:	460e      	mov	r6, r1
 8006bee:	b921      	cbnz	r1, 8006bfa <_realloc_r+0x16>
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf6:	f7ff b973 	b.w	8005ee0 <_malloc_r>
 8006bfa:	b92a      	cbnz	r2, 8006c08 <_realloc_r+0x24>
 8006bfc:	f7ff f900 	bl	8005e00 <_free_r>
 8006c00:	4625      	mov	r5, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	f000 f841 	bl	8006c8e <_malloc_usable_size_r>
 8006c0c:	4284      	cmp	r4, r0
 8006c0e:	4607      	mov	r7, r0
 8006c10:	d802      	bhi.n	8006c18 <_realloc_r+0x34>
 8006c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c16:	d812      	bhi.n	8006c3e <_realloc_r+0x5a>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff f960 	bl	8005ee0 <_malloc_r>
 8006c20:	4605      	mov	r5, r0
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0ed      	beq.n	8006c02 <_realloc_r+0x1e>
 8006c26:	42bc      	cmp	r4, r7
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	bf28      	it	cs
 8006c2e:	463a      	movcs	r2, r7
 8006c30:	f7ff ff86 	bl	8006b40 <memcpy>
 8006c34:	4631      	mov	r1, r6
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7ff f8e2 	bl	8005e00 <_free_r>
 8006c3c:	e7e1      	b.n	8006c02 <_realloc_r+0x1e>
 8006c3e:	4635      	mov	r5, r6
 8006c40:	e7df      	b.n	8006c02 <_realloc_r+0x1e>

08006c42 <__ascii_wctomb>:
 8006c42:	4603      	mov	r3, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	b141      	cbz	r1, 8006c5a <__ascii_wctomb+0x18>
 8006c48:	2aff      	cmp	r2, #255	; 0xff
 8006c4a:	d904      	bls.n	8006c56 <__ascii_wctomb+0x14>
 8006c4c:	228a      	movs	r2, #138	; 0x8a
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	2001      	movs	r0, #1
 8006c58:	700a      	strb	r2, [r1, #0]
 8006c5a:	4770      	bx	lr

08006c5c <fiprintf>:
 8006c5c:	b40e      	push	{r1, r2, r3}
 8006c5e:	b503      	push	{r0, r1, lr}
 8006c60:	4601      	mov	r1, r0
 8006c62:	ab03      	add	r3, sp, #12
 8006c64:	4805      	ldr	r0, [pc, #20]	; (8006c7c <fiprintf+0x20>)
 8006c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	f000 f83d 	bl	8006cec <_vfiprintf_r>
 8006c72:	b002      	add	sp, #8
 8006c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c78:	b003      	add	sp, #12
 8006c7a:	4770      	bx	lr
 8006c7c:	20000074 	.word	0x20000074

08006c80 <abort>:
 8006c80:	2006      	movs	r0, #6
 8006c82:	b508      	push	{r3, lr}
 8006c84:	f000 fa0a 	bl	800709c <raise>
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7fb f9cf 	bl	800202c <_exit>

08006c8e <_malloc_usable_size_r>:
 8006c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c92:	1f18      	subs	r0, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bfbc      	itt	lt
 8006c98:	580b      	ldrlt	r3, [r1, r0]
 8006c9a:	18c0      	addlt	r0, r0, r3
 8006c9c:	4770      	bx	lr

08006c9e <__sfputc_r>:
 8006c9e:	6893      	ldr	r3, [r2, #8]
 8006ca0:	b410      	push	{r4}
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	6093      	str	r3, [r2, #8]
 8006ca8:	da07      	bge.n	8006cba <__sfputc_r+0x1c>
 8006caa:	6994      	ldr	r4, [r2, #24]
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	db01      	blt.n	8006cb4 <__sfputc_r+0x16>
 8006cb0:	290a      	cmp	r1, #10
 8006cb2:	d102      	bne.n	8006cba <__sfputc_r+0x1c>
 8006cb4:	bc10      	pop	{r4}
 8006cb6:	f000 b933 	b.w	8006f20 <__swbuf_r>
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	1c58      	adds	r0, r3, #1
 8006cbe:	6010      	str	r0, [r2, #0]
 8006cc0:	7019      	strb	r1, [r3, #0]
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	bc10      	pop	{r4}
 8006cc6:	4770      	bx	lr

08006cc8 <__sfputs_r>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	4614      	mov	r4, r2
 8006cd0:	18d5      	adds	r5, r2, r3
 8006cd2:	42ac      	cmp	r4, r5
 8006cd4:	d101      	bne.n	8006cda <__sfputs_r+0x12>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	e007      	b.n	8006cea <__sfputs_r+0x22>
 8006cda:	463a      	mov	r2, r7
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce2:	f7ff ffdc 	bl	8006c9e <__sfputc_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d1f3      	bne.n	8006cd2 <__sfputs_r+0xa>
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cec <_vfiprintf_r>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	b09d      	sub	sp, #116	; 0x74
 8006cfa:	b118      	cbz	r0, 8006d04 <_vfiprintf_r+0x18>
 8006cfc:	6a03      	ldr	r3, [r0, #32]
 8006cfe:	b90b      	cbnz	r3, 8006d04 <_vfiprintf_r+0x18>
 8006d00:	f7fe f8ea 	bl	8004ed8 <__sinit>
 8006d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d06:	07d9      	lsls	r1, r3, #31
 8006d08:	d405      	bmi.n	8006d16 <_vfiprintf_r+0x2a>
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	059a      	lsls	r2, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_vfiprintf_r+0x2a>
 8006d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d12:	f7fe f9f7 	bl	8005104 <__retarget_lock_acquire_recursive>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	071b      	lsls	r3, r3, #28
 8006d1a:	d501      	bpl.n	8006d20 <_vfiprintf_r+0x34>
 8006d1c:	692b      	ldr	r3, [r5, #16]
 8006d1e:	b99b      	cbnz	r3, 8006d48 <_vfiprintf_r+0x5c>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 f93a 	bl	8006f9c <__swsetup_r>
 8006d28:	b170      	cbz	r0, 8006d48 <_vfiprintf_r+0x5c>
 8006d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d2c:	07dc      	lsls	r4, r3, #31
 8006d2e:	d504      	bpl.n	8006d3a <_vfiprintf_r+0x4e>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	b01d      	add	sp, #116	; 0x74
 8006d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	0598      	lsls	r0, r3, #22
 8006d3e:	d4f7      	bmi.n	8006d30 <_vfiprintf_r+0x44>
 8006d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d42:	f7fe f9e0 	bl	8005106 <__retarget_lock_release_recursive>
 8006d46:	e7f3      	b.n	8006d30 <_vfiprintf_r+0x44>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d52:	2330      	movs	r3, #48	; 0x30
 8006d54:	f04f 0901 	mov.w	r9, #1
 8006d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f0c <_vfiprintf_r+0x220>
 8006d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d64:	4623      	mov	r3, r4
 8006d66:	469a      	mov	sl, r3
 8006d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6c:	b10a      	cbz	r2, 8006d72 <_vfiprintf_r+0x86>
 8006d6e:	2a25      	cmp	r2, #37	; 0x25
 8006d70:	d1f9      	bne.n	8006d66 <_vfiprintf_r+0x7a>
 8006d72:	ebba 0b04 	subs.w	fp, sl, r4
 8006d76:	d00b      	beq.n	8006d90 <_vfiprintf_r+0xa4>
 8006d78:	465b      	mov	r3, fp
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ffa2 	bl	8006cc8 <__sfputs_r>
 8006d84:	3001      	adds	r0, #1
 8006d86:	f000 80a9 	beq.w	8006edc <_vfiprintf_r+0x1f0>
 8006d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8c:	445a      	add	r2, fp
 8006d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d90:	f89a 3000 	ldrb.w	r3, [sl]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80a1 	beq.w	8006edc <_vfiprintf_r+0x1f0>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da4:	f10a 0a01 	add.w	sl, sl, #1
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	9307      	str	r3, [sp, #28]
 8006dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db0:	931a      	str	r3, [sp, #104]	; 0x68
 8006db2:	4654      	mov	r4, sl
 8006db4:	2205      	movs	r2, #5
 8006db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dba:	4854      	ldr	r0, [pc, #336]	; (8006f0c <_vfiprintf_r+0x220>)
 8006dbc:	f7fe f9a4 	bl	8005108 <memchr>
 8006dc0:	9a04      	ldr	r2, [sp, #16]
 8006dc2:	b9d8      	cbnz	r0, 8006dfc <_vfiprintf_r+0x110>
 8006dc4:	06d1      	lsls	r1, r2, #27
 8006dc6:	bf44      	itt	mi
 8006dc8:	2320      	movmi	r3, #32
 8006dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dce:	0713      	lsls	r3, r2, #28
 8006dd0:	bf44      	itt	mi
 8006dd2:	232b      	movmi	r3, #43	; 0x2b
 8006dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dde:	d015      	beq.n	8006e0c <_vfiprintf_r+0x120>
 8006de0:	4654      	mov	r4, sl
 8006de2:	2000      	movs	r0, #0
 8006de4:	f04f 0c0a 	mov.w	ip, #10
 8006de8:	9a07      	ldr	r2, [sp, #28]
 8006dea:	4621      	mov	r1, r4
 8006dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df0:	3b30      	subs	r3, #48	; 0x30
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d94d      	bls.n	8006e92 <_vfiprintf_r+0x1a6>
 8006df6:	b1b0      	cbz	r0, 8006e26 <_vfiprintf_r+0x13a>
 8006df8:	9207      	str	r2, [sp, #28]
 8006dfa:	e014      	b.n	8006e26 <_vfiprintf_r+0x13a>
 8006dfc:	eba0 0308 	sub.w	r3, r0, r8
 8006e00:	fa09 f303 	lsl.w	r3, r9, r3
 8006e04:	4313      	orrs	r3, r2
 8006e06:	46a2      	mov	sl, r4
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	e7d2      	b.n	8006db2 <_vfiprintf_r+0xc6>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	1d19      	adds	r1, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9103      	str	r1, [sp, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfbb      	ittet	lt
 8006e18:	425b      	neglt	r3, r3
 8006e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e1e:	9307      	strge	r3, [sp, #28]
 8006e20:	9307      	strlt	r3, [sp, #28]
 8006e22:	bfb8      	it	lt
 8006e24:	9204      	strlt	r2, [sp, #16]
 8006e26:	7823      	ldrb	r3, [r4, #0]
 8006e28:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2a:	d10c      	bne.n	8006e46 <_vfiprintf_r+0x15a>
 8006e2c:	7863      	ldrb	r3, [r4, #1]
 8006e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e30:	d134      	bne.n	8006e9c <_vfiprintf_r+0x1b0>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	3402      	adds	r4, #2
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb8      	it	lt
 8006e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f10 <_vfiprintf_r+0x224>
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	7821      	ldrb	r1, [r4, #0]
 8006e50:	f7fe f95a 	bl	8005108 <memchr>
 8006e54:	b138      	cbz	r0, 8006e66 <_vfiprintf_r+0x17a>
 8006e56:	2240      	movs	r2, #64	; 0x40
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	eba0 000a 	sub.w	r0, r0, sl
 8006e5e:	4082      	lsls	r2, r0
 8006e60:	4313      	orrs	r3, r2
 8006e62:	3401      	adds	r4, #1
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	4829      	ldr	r0, [pc, #164]	; (8006f14 <_vfiprintf_r+0x228>)
 8006e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e72:	f7fe f949 	bl	8005108 <memchr>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d03f      	beq.n	8006efa <_vfiprintf_r+0x20e>
 8006e7a:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <_vfiprintf_r+0x22c>)
 8006e7c:	bb1b      	cbnz	r3, 8006ec6 <_vfiprintf_r+0x1da>
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	3307      	adds	r3, #7
 8006e82:	f023 0307 	bic.w	r3, r3, #7
 8006e86:	3308      	adds	r3, #8
 8006e88:	9303      	str	r3, [sp, #12]
 8006e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8c:	443b      	add	r3, r7
 8006e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e90:	e768      	b.n	8006d64 <_vfiprintf_r+0x78>
 8006e92:	460c      	mov	r4, r1
 8006e94:	2001      	movs	r0, #1
 8006e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e9a:	e7a6      	b.n	8006dea <_vfiprintf_r+0xfe>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f04f 0c0a 	mov.w	ip, #10
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	3401      	adds	r4, #1
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eae:	3a30      	subs	r2, #48	; 0x30
 8006eb0:	2a09      	cmp	r2, #9
 8006eb2:	d903      	bls.n	8006ebc <_vfiprintf_r+0x1d0>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0c6      	beq.n	8006e46 <_vfiprintf_r+0x15a>
 8006eb8:	9105      	str	r1, [sp, #20]
 8006eba:	e7c4      	b.n	8006e46 <_vfiprintf_r+0x15a>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec4:	e7f0      	b.n	8006ea8 <_vfiprintf_r+0x1bc>
 8006ec6:	ab03      	add	r3, sp, #12
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	462a      	mov	r2, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <_vfiprintf_r+0x230>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	f7fd fbc5 	bl	8004660 <_printf_float>
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	1c78      	adds	r0, r7, #1
 8006eda:	d1d6      	bne.n	8006e8a <_vfiprintf_r+0x19e>
 8006edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ede:	07d9      	lsls	r1, r3, #31
 8006ee0:	d405      	bmi.n	8006eee <_vfiprintf_r+0x202>
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	059a      	lsls	r2, r3, #22
 8006ee6:	d402      	bmi.n	8006eee <_vfiprintf_r+0x202>
 8006ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eea:	f7fe f90c 	bl	8005106 <__retarget_lock_release_recursive>
 8006eee:	89ab      	ldrh	r3, [r5, #12]
 8006ef0:	065b      	lsls	r3, r3, #25
 8006ef2:	f53f af1d 	bmi.w	8006d30 <_vfiprintf_r+0x44>
 8006ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ef8:	e71c      	b.n	8006d34 <_vfiprintf_r+0x48>
 8006efa:	ab03      	add	r3, sp, #12
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	462a      	mov	r2, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <_vfiprintf_r+0x230>)
 8006f04:	a904      	add	r1, sp, #16
 8006f06:	f7fd fe4b 	bl	8004ba0 <_printf_i>
 8006f0a:	e7e4      	b.n	8006ed6 <_vfiprintf_r+0x1ea>
 8006f0c:	0800756c 	.word	0x0800756c
 8006f10:	08007572 	.word	0x08007572
 8006f14:	08007576 	.word	0x08007576
 8006f18:	08004661 	.word	0x08004661
 8006f1c:	08006cc9 	.word	0x08006cc9

08006f20 <__swbuf_r>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	460e      	mov	r6, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	4605      	mov	r5, r0
 8006f28:	b118      	cbz	r0, 8006f32 <__swbuf_r+0x12>
 8006f2a:	6a03      	ldr	r3, [r0, #32]
 8006f2c:	b90b      	cbnz	r3, 8006f32 <__swbuf_r+0x12>
 8006f2e:	f7fd ffd3 	bl	8004ed8 <__sinit>
 8006f32:	69a3      	ldr	r3, [r4, #24]
 8006f34:	60a3      	str	r3, [r4, #8]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	071a      	lsls	r2, r3, #28
 8006f3a:	d525      	bpl.n	8006f88 <__swbuf_r+0x68>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	b31b      	cbz	r3, 8006f88 <__swbuf_r+0x68>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	6922      	ldr	r2, [r4, #16]
 8006f44:	b2f6      	uxtb	r6, r6
 8006f46:	1a98      	subs	r0, r3, r2
 8006f48:	6963      	ldr	r3, [r4, #20]
 8006f4a:	4637      	mov	r7, r6
 8006f4c:	4283      	cmp	r3, r0
 8006f4e:	dc04      	bgt.n	8006f5a <__swbuf_r+0x3a>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7ff fda2 	bl	8006a9c <_fflush_r>
 8006f58:	b9e0      	cbnz	r0, 8006f94 <__swbuf_r+0x74>
 8006f5a:	68a3      	ldr	r3, [r4, #8]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	701e      	strb	r6, [r3, #0]
 8006f68:	6962      	ldr	r2, [r4, #20]
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d004      	beq.n	8006f7a <__swbuf_r+0x5a>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	07db      	lsls	r3, r3, #31
 8006f74:	d506      	bpl.n	8006f84 <__swbuf_r+0x64>
 8006f76:	2e0a      	cmp	r6, #10
 8006f78:	d104      	bne.n	8006f84 <__swbuf_r+0x64>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7ff fd8d 	bl	8006a9c <_fflush_r>
 8006f82:	b938      	cbnz	r0, 8006f94 <__swbuf_r+0x74>
 8006f84:	4638      	mov	r0, r7
 8006f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 f806 	bl	8006f9c <__swsetup_r>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d0d5      	beq.n	8006f40 <__swbuf_r+0x20>
 8006f94:	f04f 37ff 	mov.w	r7, #4294967295
 8006f98:	e7f4      	b.n	8006f84 <__swbuf_r+0x64>
	...

08006f9c <__swsetup_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <__swsetup_r+0xac>)
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	b118      	cbz	r0, 8006fb0 <__swsetup_r+0x14>
 8006fa8:	6a03      	ldr	r3, [r0, #32]
 8006faa:	b90b      	cbnz	r3, 8006fb0 <__swsetup_r+0x14>
 8006fac:	f7fd ff94 	bl	8004ed8 <__sinit>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb6:	0718      	lsls	r0, r3, #28
 8006fb8:	d422      	bmi.n	8007000 <__swsetup_r+0x64>
 8006fba:	06d9      	lsls	r1, r3, #27
 8006fbc:	d407      	bmi.n	8006fce <__swsetup_r+0x32>
 8006fbe:	2309      	movs	r3, #9
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	e034      	b.n	8007038 <__swsetup_r+0x9c>
 8006fce:	0758      	lsls	r0, r3, #29
 8006fd0:	d512      	bpl.n	8006ff8 <__swsetup_r+0x5c>
 8006fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd4:	b141      	cbz	r1, 8006fe8 <__swsetup_r+0x4c>
 8006fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	d002      	beq.n	8006fe4 <__swsetup_r+0x48>
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7fe ff0e 	bl	8005e00 <_free_r>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6063      	str	r3, [r4, #4]
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f043 0308 	orr.w	r3, r3, #8
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	b94b      	cbnz	r3, 8007018 <__swsetup_r+0x7c>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800700a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700e:	d003      	beq.n	8007018 <__swsetup_r+0x7c>
 8007010:	4621      	mov	r1, r4
 8007012:	4628      	mov	r0, r5
 8007014:	f000 f883 	bl	800711e <__smakebuf_r>
 8007018:	89a0      	ldrh	r0, [r4, #12]
 800701a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800701e:	f010 0301 	ands.w	r3, r0, #1
 8007022:	d00a      	beq.n	800703a <__swsetup_r+0x9e>
 8007024:	2300      	movs	r3, #0
 8007026:	60a3      	str	r3, [r4, #8]
 8007028:	6963      	ldr	r3, [r4, #20]
 800702a:	425b      	negs	r3, r3
 800702c:	61a3      	str	r3, [r4, #24]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	b943      	cbnz	r3, 8007044 <__swsetup_r+0xa8>
 8007032:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007036:	d1c4      	bne.n	8006fc2 <__swsetup_r+0x26>
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	0781      	lsls	r1, r0, #30
 800703c:	bf58      	it	pl
 800703e:	6963      	ldrpl	r3, [r4, #20]
 8007040:	60a3      	str	r3, [r4, #8]
 8007042:	e7f4      	b.n	800702e <__swsetup_r+0x92>
 8007044:	2000      	movs	r0, #0
 8007046:	e7f7      	b.n	8007038 <__swsetup_r+0x9c>
 8007048:	20000074 	.word	0x20000074

0800704c <_raise_r>:
 800704c:	291f      	cmp	r1, #31
 800704e:	b538      	push	{r3, r4, r5, lr}
 8007050:	4604      	mov	r4, r0
 8007052:	460d      	mov	r5, r1
 8007054:	d904      	bls.n	8007060 <_raise_r+0x14>
 8007056:	2316      	movs	r3, #22
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007062:	b112      	cbz	r2, 800706a <_raise_r+0x1e>
 8007064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007068:	b94b      	cbnz	r3, 800707e <_raise_r+0x32>
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f830 	bl	80070d0 <_getpid_r>
 8007070:	462a      	mov	r2, r5
 8007072:	4601      	mov	r1, r0
 8007074:	4620      	mov	r0, r4
 8007076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800707a:	f000 b817 	b.w	80070ac <_kill_r>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00a      	beq.n	8007098 <_raise_r+0x4c>
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	d103      	bne.n	800708e <_raise_r+0x42>
 8007086:	2316      	movs	r3, #22
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	2001      	movs	r0, #1
 800708c:	e7e7      	b.n	800705e <_raise_r+0x12>
 800708e:	2400      	movs	r4, #0
 8007090:	4628      	mov	r0, r5
 8007092:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007096:	4798      	blx	r3
 8007098:	2000      	movs	r0, #0
 800709a:	e7e0      	b.n	800705e <_raise_r+0x12>

0800709c <raise>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <raise+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f7ff bfd3 	b.w	800704c <_raise_r>
 80070a6:	bf00      	nop
 80070a8:	20000074 	.word	0x20000074

080070ac <_kill_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	2300      	movs	r3, #0
 80070b0:	4d06      	ldr	r5, [pc, #24]	; (80070cc <_kill_r+0x20>)
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	f7fa ffa7 	bl	800200c <_kill>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	d102      	bne.n	80070c8 <_kill_r+0x1c>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	b103      	cbz	r3, 80070c8 <_kill_r+0x1c>
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	bf00      	nop
 80070cc:	20000428 	.word	0x20000428

080070d0 <_getpid_r>:
 80070d0:	f7fa bf95 	b.w	8001ffe <_getpid>

080070d4 <__swhatbuf_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070dc:	4615      	mov	r5, r2
 80070de:	2900      	cmp	r1, #0
 80070e0:	461e      	mov	r6, r3
 80070e2:	b096      	sub	sp, #88	; 0x58
 80070e4:	da0c      	bge.n	8007100 <__swhatbuf_r+0x2c>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	2100      	movs	r1, #0
 80070ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070ee:	bf0c      	ite	eq
 80070f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80070f4:	2340      	movne	r3, #64	; 0x40
 80070f6:	2000      	movs	r0, #0
 80070f8:	6031      	str	r1, [r6, #0]
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	b016      	add	sp, #88	; 0x58
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	466a      	mov	r2, sp
 8007102:	f000 f849 	bl	8007198 <_fstat_r>
 8007106:	2800      	cmp	r0, #0
 8007108:	dbed      	blt.n	80070e6 <__swhatbuf_r+0x12>
 800710a:	9901      	ldr	r1, [sp, #4]
 800710c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007110:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007114:	4259      	negs	r1, r3
 8007116:	4159      	adcs	r1, r3
 8007118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711c:	e7eb      	b.n	80070f6 <__swhatbuf_r+0x22>

0800711e <__smakebuf_r>:
 800711e:	898b      	ldrh	r3, [r1, #12]
 8007120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007122:	079d      	lsls	r5, r3, #30
 8007124:	4606      	mov	r6, r0
 8007126:	460c      	mov	r4, r1
 8007128:	d507      	bpl.n	800713a <__smakebuf_r+0x1c>
 800712a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2301      	movs	r3, #1
 8007134:	6163      	str	r3, [r4, #20]
 8007136:	b002      	add	sp, #8
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	466a      	mov	r2, sp
 800713c:	ab01      	add	r3, sp, #4
 800713e:	f7ff ffc9 	bl	80070d4 <__swhatbuf_r>
 8007142:	9900      	ldr	r1, [sp, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	4630      	mov	r0, r6
 8007148:	f7fe feca 	bl	8005ee0 <_malloc_r>
 800714c:	b948      	cbnz	r0, 8007162 <__smakebuf_r+0x44>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	059a      	lsls	r2, r3, #22
 8007154:	d4ef      	bmi.n	8007136 <__smakebuf_r+0x18>
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0302 	orr.w	r3, r3, #2
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	e7e3      	b.n	800712a <__smakebuf_r+0xc>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	6020      	str	r0, [r4, #0]
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	6120      	str	r0, [r4, #16]
 8007170:	6163      	str	r3, [r4, #20]
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	b15b      	cbz	r3, 800718e <__smakebuf_r+0x70>
 8007176:	4630      	mov	r0, r6
 8007178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717c:	f000 f81e 	bl	80071bc <_isatty_r>
 8007180:	b128      	cbz	r0, 800718e <__smakebuf_r+0x70>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f023 0303 	bic.w	r3, r3, #3
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	431d      	orrs	r5, r3
 8007192:	81a5      	strh	r5, [r4, #12]
 8007194:	e7cf      	b.n	8007136 <__smakebuf_r+0x18>
	...

08007198 <_fstat_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	2300      	movs	r3, #0
 800719c:	4d06      	ldr	r5, [pc, #24]	; (80071b8 <_fstat_r+0x20>)
 800719e:	4604      	mov	r4, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	f7fa ff8f 	bl	80020c8 <_fstat>
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	d102      	bne.n	80071b4 <_fstat_r+0x1c>
 80071ae:	682b      	ldr	r3, [r5, #0]
 80071b0:	b103      	cbz	r3, 80071b4 <_fstat_r+0x1c>
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
 80071b6:	bf00      	nop
 80071b8:	20000428 	.word	0x20000428

080071bc <_isatty_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	2300      	movs	r3, #0
 80071c0:	4d05      	ldr	r5, [pc, #20]	; (80071d8 <_isatty_r+0x1c>)
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fa ff8d 	bl	80020e6 <_isatty>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_isatty_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_isatty_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	20000428 	.word	0x20000428
 80071dc:	00000000 	.word	0x00000000

080071e0 <floor>:
 80071e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80071ec:	2e13      	cmp	r6, #19
 80071ee:	460b      	mov	r3, r1
 80071f0:	4607      	mov	r7, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4605      	mov	r5, r0
 80071f6:	dc32      	bgt.n	800725e <floor+0x7e>
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	da14      	bge.n	8007226 <floor+0x46>
 80071fc:	a334      	add	r3, pc, #208	; (adr r3, 80072d0 <floor+0xf0>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 f867 	bl	80002d4 <__adddf3>
 8007206:	2200      	movs	r2, #0
 8007208:	2300      	movs	r3, #0
 800720a:	f7f9 fca9 	bl	8000b60 <__aeabi_dcmpgt>
 800720e:	b138      	cbz	r0, 8007220 <floor+0x40>
 8007210:	2c00      	cmp	r4, #0
 8007212:	da56      	bge.n	80072c2 <floor+0xe2>
 8007214:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007218:	4325      	orrs	r5, r4
 800721a:	d055      	beq.n	80072c8 <floor+0xe8>
 800721c:	2500      	movs	r5, #0
 800721e:	4c2e      	ldr	r4, [pc, #184]	; (80072d8 <floor+0xf8>)
 8007220:	4623      	mov	r3, r4
 8007222:	462f      	mov	r7, r5
 8007224:	e025      	b.n	8007272 <floor+0x92>
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <floor+0xfc>)
 8007228:	fa42 f806 	asr.w	r8, r2, r6
 800722c:	ea01 0208 	and.w	r2, r1, r8
 8007230:	4302      	orrs	r2, r0
 8007232:	d01e      	beq.n	8007272 <floor+0x92>
 8007234:	a326      	add	r3, pc, #152	; (adr r3, 80072d0 <floor+0xf0>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f84b 	bl	80002d4 <__adddf3>
 800723e:	2200      	movs	r2, #0
 8007240:	2300      	movs	r3, #0
 8007242:	f7f9 fc8d 	bl	8000b60 <__aeabi_dcmpgt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d0ea      	beq.n	8007220 <floor+0x40>
 800724a:	2c00      	cmp	r4, #0
 800724c:	bfbe      	ittt	lt
 800724e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007252:	4133      	asrlt	r3, r6
 8007254:	18e4      	addlt	r4, r4, r3
 8007256:	2500      	movs	r5, #0
 8007258:	ea24 0408 	bic.w	r4, r4, r8
 800725c:	e7e0      	b.n	8007220 <floor+0x40>
 800725e:	2e33      	cmp	r6, #51	; 0x33
 8007260:	dd0b      	ble.n	800727a <floor+0x9a>
 8007262:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007266:	d104      	bne.n	8007272 <floor+0x92>
 8007268:	4602      	mov	r2, r0
 800726a:	f7f9 f833 	bl	80002d4 <__adddf3>
 800726e:	4607      	mov	r7, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4638      	mov	r0, r7
 8007274:	4619      	mov	r1, r3
 8007276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727a:	f04f 38ff 	mov.w	r8, #4294967295
 800727e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007282:	fa28 f802 	lsr.w	r8, r8, r2
 8007286:	ea10 0f08 	tst.w	r0, r8
 800728a:	d0f2      	beq.n	8007272 <floor+0x92>
 800728c:	a310      	add	r3, pc, #64	; (adr r3, 80072d0 <floor+0xf0>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f9 f81f 	bl	80002d4 <__adddf3>
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	f7f9 fc61 	bl	8000b60 <__aeabi_dcmpgt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0be      	beq.n	8007220 <floor+0x40>
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	da0a      	bge.n	80072bc <floor+0xdc>
 80072a6:	2e14      	cmp	r6, #20
 80072a8:	d101      	bne.n	80072ae <floor+0xce>
 80072aa:	3401      	adds	r4, #1
 80072ac:	e006      	b.n	80072bc <floor+0xdc>
 80072ae:	2301      	movs	r3, #1
 80072b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80072b4:	40b3      	lsls	r3, r6
 80072b6:	441d      	add	r5, r3
 80072b8:	42af      	cmp	r7, r5
 80072ba:	d8f6      	bhi.n	80072aa <floor+0xca>
 80072bc:	ea25 0508 	bic.w	r5, r5, r8
 80072c0:	e7ae      	b.n	8007220 <floor+0x40>
 80072c2:	2500      	movs	r5, #0
 80072c4:	462c      	mov	r4, r5
 80072c6:	e7ab      	b.n	8007220 <floor+0x40>
 80072c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80072cc:	e7a8      	b.n	8007220 <floor+0x40>
 80072ce:	bf00      	nop
 80072d0:	8800759c 	.word	0x8800759c
 80072d4:	7e37e43c 	.word	0x7e37e43c
 80072d8:	bff00000 	.word	0xbff00000
 80072dc:	000fffff 	.word	0x000fffff

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
